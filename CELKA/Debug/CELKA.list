
CELKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  0800504c  0800504c  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800504c  0800504c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005054  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000014  08005068  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08005068  00007234  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e180  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268e  00000000  00000000  000151bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa1  00000000  00000000  00018630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014743  00000000  00000000  000190d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112c8  00000000  00000000  0002d814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008008a  00000000  00000000  0003eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000beb66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  000bebac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c1c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004fa0 	.word	0x08004fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004fa0 	.word	0x08004fa0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 fe8a 	bl	8004f48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000234:	4b37      	ldr	r3, [pc, #220]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000236:	4a38      	ldr	r2, [pc, #224]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800023a:	4b36      	ldr	r3, [pc, #216]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800023c:	22c0      	movs	r2, #192	@ 0xc0
 800023e:	0612      	lsls	r2, r2, #24
 8000240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000242:	4b34      	ldr	r3, [pc, #208]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b32      	ldr	r3, [pc, #200]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800024e:	4b31      	ldr	r3, [pc, #196]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000250:	2280      	movs	r2, #128	@ 0x80
 8000252:	0392      	lsls	r2, r2, #14
 8000254:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000256:	4b2f      	ldr	r3, [pc, #188]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000258:	2208      	movs	r2, #8
 800025a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800025c:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000262:	4b2c      	ldr	r3, [pc, #176]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000268:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800026e:	4b29      	ldr	r3, [pc, #164]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000270:	2202      	movs	r2, #2
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b27      	ldr	r3, [pc, #156]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000276:	2220      	movs	r2, #32
 8000278:	2100      	movs	r1, #0
 800027a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800027c:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800027e:	2298      	movs	r2, #152	@ 0x98
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000284:	4b23      	ldr	r3, [pc, #140]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000286:	2280      	movs	r2, #128	@ 0x80
 8000288:	00d2      	lsls	r2, r2, #3
 800028a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028c:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800028e:	222c      	movs	r2, #44	@ 0x2c
 8000290:	2100      	movs	r1, #0
 8000292:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <MX_ADC1_Init+0xf4>)
 8000296:	2200      	movs	r2, #0
 8000298:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800029a:	4b1e      	ldr	r3, [pc, #120]	@ (8000314 <MX_ADC1_Init+0xf4>)
 800029c:	2200      	movs	r2, #0
 800029e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80002a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002a8:	223c      	movs	r2, #60	@ 0x3c
 80002aa:	2100      	movs	r1, #0
 80002ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002ae:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b4:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f896 	bl	80013e8 <HAL_ADC_Init>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 fa26 	bl	8000710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4a15      	ldr	r2, [pc, #84]	@ (800031c <MX_ADC1_Init+0xfc>)
 80002c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d6:	1d3a      	adds	r2, r7, #4
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fcf5 	bl	8001ccc <HAL_ADC_ConfigChannel>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80002e6:	f000 fa13 	bl	8000710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000320 <MX_ADC1_Init+0x100>)
 80002ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2204      	movs	r2, #4
 80002f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f6:	1d3a      	adds	r2, r7, #4
 80002f8:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <MX_ADC1_Init+0xf4>)
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fce5 	bl	8001ccc <HAL_ADC_ConfigChannel>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000306:	f000 fa03 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800030a:	46c0      	nop			@ (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b004      	add	sp, #16
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			@ (mov r8, r8)
 8000314:	20000030 	.word	0x20000030
 8000318:	40012400 	.word	0x40012400
 800031c:	30001000 	.word	0x30001000
 8000320:	20000100 	.word	0x20000100

08000324 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b091      	sub	sp, #68	@ 0x44
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	232c      	movs	r3, #44	@ 0x2c
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	0018      	movs	r0, r3
 8000332:	2314      	movs	r3, #20
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f004 fe06 	bl	8004f48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	2410      	movs	r4, #16
 800033e:	193b      	adds	r3, r7, r4
 8000340:	0018      	movs	r0, r3
 8000342:	231c      	movs	r3, #28
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f004 fdfe 	bl	8004f48 <memset>
  if(adcHandle->Instance==ADC1)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a3c      	ldr	r2, [pc, #240]	@ (8000444 <HAL_ADC_MspInit+0x120>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d172      	bne.n	800043c <HAL_ADC_MspInit+0x118>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2280      	movs	r2, #128	@ 0x80
 800035a:	01d2      	lsls	r2, r2, #7
 800035c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	f003 fa4a 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000370:	f000 f9ce 	bl	8000710 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000374:	4b34      	ldr	r3, [pc, #208]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 8000376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000378:	4b33      	ldr	r3, [pc, #204]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 800037a:	2180      	movs	r1, #128	@ 0x80
 800037c:	0349      	lsls	r1, r1, #13
 800037e:	430a      	orrs	r2, r1
 8000380:	641a      	str	r2, [r3, #64]	@ 0x40
 8000382:	4b31      	ldr	r3, [pc, #196]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 8000384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	035b      	lsls	r3, r3, #13
 800038a:	4013      	ands	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b2d      	ldr	r3, [pc, #180]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 8000392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000394:	4b2c      	ldr	r3, [pc, #176]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 8000396:	2101      	movs	r1, #1
 8000398:	430a      	orrs	r2, r1
 800039a:	635a      	str	r2, [r3, #52]	@ 0x34
 800039c:	4b2a      	ldr	r3, [pc, #168]	@ (8000448 <HAL_ADC_MspInit+0x124>)
 800039e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003a0:	2201      	movs	r2, #1
 80003a2:	4013      	ands	r3, r2
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_BAT_Pin|ADC1_TEMP_Pin;
 80003a8:	212c      	movs	r1, #44	@ 0x2c
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2288      	movs	r2, #136	@ 0x88
 80003ae:	0152      	lsls	r2, r2, #5
 80003b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2203      	movs	r2, #3
 80003b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	187a      	adds	r2, r7, r1
 80003c0:	23a0      	movs	r3, #160	@ 0xa0
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	0011      	movs	r1, r2
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 fc54 	bl	8002c74 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA8);
 80003cc:	23c0      	movs	r3, #192	@ 0xc0
 80003ce:	039b      	lsls	r3, r3, #14
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fe77 	bl	80010c4 <HAL_SYSCFG_SetPinBinding>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003d6:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000450 <HAL_ADC_MspInit+0x12c>)
 80003da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003de:	2205      	movs	r2, #5
 80003e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003e8:	4b18      	ldr	r3, [pc, #96]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	0052      	lsls	r2, r2, #1
 80003fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003fc:	4b13      	ldr	r3, [pc, #76]	@ (800044c <HAL_ADC_MspInit+0x128>)
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	00d2      	lsls	r2, r2, #3
 8000402:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000404:	4b11      	ldr	r3, [pc, #68]	@ (800044c <HAL_ADC_MspInit+0x128>)
 8000406:	2220      	movs	r2, #32
 8000408:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800040a:	4b10      	ldr	r3, [pc, #64]	@ (800044c <HAL_ADC_MspInit+0x128>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <HAL_ADC_MspInit+0x128>)
 8000412:	0018      	movs	r0, r3
 8000414:	f002 f900 	bl	8002618 <HAL_DMA_Init>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800041c:	f000 f978 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <HAL_ADC_MspInit+0x128>)
 8000424:	651a      	str	r2, [r3, #80]	@ 0x50
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <HAL_ADC_MspInit+0x128>)
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	200c      	movs	r0, #12
 8000432:	f002 f8af 	bl	8002594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000436:	200c      	movs	r0, #12
 8000438:	f002 f8c1 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b011      	add	sp, #68	@ 0x44
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	40012400 	.word	0x40012400
 8000448:	40021000 	.word	0x40021000
 800044c:	20000094 	.word	0x20000094
 8000450:	40020008 	.word	0x40020008

08000454 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a0e      	ldr	r2, [pc, #56]	@ (800049c <HAL_ADC_MspDeInit+0x48>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d115      	bne.n	8000492 <HAL_ADC_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <HAL_ADC_MspDeInit+0x4c>)
 8000468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800046a:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <HAL_ADC_MspDeInit+0x4c>)
 800046c:	490d      	ldr	r1, [pc, #52]	@ (80004a4 <HAL_ADC_MspDeInit+0x50>)
 800046e:	400a      	ands	r2, r1
 8000470:	641a      	str	r2, [r3, #64]	@ 0x40

    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    HAL_GPIO_DeInit(GPIOA, ADC1_BAT_Pin|ADC1_TEMP_Pin);
 8000472:	2388      	movs	r3, #136	@ 0x88
 8000474:	015a      	lsls	r2, r3, #5
 8000476:	23a0      	movs	r3, #160	@ 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fd63 	bl	8002f48 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000486:	0018      	movs	r0, r3
 8000488:	f002 f950 	bl	800272c <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 800048c:	200c      	movs	r0, #12
 800048e:	f002 f8a6 	bl	80025de <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b002      	add	sp, #8
 8000498:	bd80      	pop	{r7, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	40012400 	.word	0x40012400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	ffefffff 	.word	0xffefffff

080004a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

		static int duty = 200;
	  // check status and turn lamp off if overhit or batt low
	  if((hlamp.status == LAMP_ON) && ((hlamp.ADC_Results[TEMP_LOCATION] >= TEMP_TH) || (hlamp.ADC_Results[BATT_LOCATION] <= BATT_TH)))
 80004b0:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x60>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d118      	bne.n	80004ea <HAL_ADC_ConvCpltCallback+0x42>
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x60>)
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	4a13      	ldr	r2, [pc, #76]	@ (800050c <HAL_ADC_ConvCpltCallback+0x64>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d804      	bhi.n	80004cc <HAL_ADC_ConvCpltCallback+0x24>
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x60>)
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	4a12      	ldr	r2, [pc, #72]	@ (8000510 <HAL_ADC_ConvCpltCallback+0x68>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d80e      	bhi.n	80004ea <HAL_ADC_ConvCpltCallback+0x42>
	  {
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2296      	movs	r2, #150	@ 0x96
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	641a      	str	r2, [r3, #64]	@ 0x40
		 hlamp.helth = (hlamp.ADC_Results[TEMP_LOCATION] >= TEMP_TH) ? LAMP_TEMP_ERR : LAMP_BATT_ERR;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x60>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <HAL_ADC_ConvCpltCallback+0x64>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d901      	bls.n	80004e4 <HAL_ADC_ConvCpltCallback+0x3c>
 80004e0:	2202      	movs	r2, #2
 80004e2:	e000      	b.n	80004e6 <HAL_ADC_ConvCpltCallback+0x3e>
 80004e4:	2201      	movs	r2, #1
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_ADC_ConvCpltCallback+0x60>)
 80004e8:	709a      	strb	r2, [r3, #2]

	  }


	  // HAL_ADC_ConfigChanell(); //Ta koda je delala probleme tuki in je šlo v Err_handler();
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty);
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x70>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	641a      	str	r2, [r3, #64]	@ 0x40
	  duty = duty+100;
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x70>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3364      	adds	r3, #100	@ 0x64
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x70>)
 80004fe:	601a      	str	r2, [r3, #0]
		//HAL_ADC_Start_IT(hadc); ///!!!! trigger timer????
}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000220 	.word	0x20000220
 800050c:	00000739 	.word	0x00000739
 8000510:	0000073a 	.word	0x0000073a
 8000514:	200000f0 	.word	0x200000f0
 8000518:	20000000 	.word	0x20000000

0800051c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_DMA_Init+0x38>)
 8000524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_DMA_Init+0x38>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	639a      	str	r2, [r3, #56]	@ 0x38
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_DMA_Init+0x38>)
 8000530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2009      	movs	r0, #9
 8000540:	f002 f828 	bl	8002594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000544:	2009      	movs	r0, #9
 8000546:	f002 f83a 	bl	80025be <HAL_NVIC_EnableIRQ>

}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b089      	sub	sp, #36	@ 0x24
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	240c      	movs	r4, #12
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2314      	movs	r3, #20
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f004 fced 	bl	8004f48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_GPIO_Init+0x80>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <MX_GPIO_Init+0x80>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_GPIO_Init+0x80>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_GPIO_Init+0x80>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_GPIO_Init+0x80>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_GPIO_Init+0x80>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0192      	lsls	r2, r2, #6
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <MX_GPIO_Init+0x84>)
 80005aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2201      	movs	r2, #1
 80005b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005b2:	193a      	adds	r2, r7, r4
 80005b4:	23a0      	movs	r3, #160	@ 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fb5a 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2007      	movs	r0, #7
 80005c6:	f001 ffe5 	bl	8002594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005ca:	2007      	movs	r0, #7
 80005cc:	f001 fff7 	bl	80025be <HAL_NVIC_EnableIRQ>

}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b009      	add	sp, #36	@ 0x24
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	10210000 	.word	0x10210000

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


    extern LAMP_HandleTypedef hlamp;
    hlamp.ADC_Results[TEMP_LOCATION] = 0;
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <main+0x90>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hlamp.ADC_Results[BATT_LOCATION] = 4095;
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <main+0x90>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <main+0x94>)
 80005ee:	60da      	str	r2, [r3, #12]
	hlamp.status = LAMP_OFF;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <main+0x90>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	hlamp.setup  = LAMP_SETUP_OFF;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <main+0x90>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	705a      	strb	r2, [r3, #1]
	hlamp.button = 0;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <main+0x90>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
	hlamp.helth  = LAMP_OK;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <main+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	709a      	strb	r2, [r3, #2]
	hlamp.pressed = FALSE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <main+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fcdb 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f835 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f7ff ff9f 	bl	8000558 <MX_GPIO_Init>

  MX_TIM1_Init();
 800061a:	f000 f909 	bl	8000830 <MX_TIM1_Init>

#ifdef IWDG_
  MX_IWDG_Init();
#endif

  MX_TIM16_Init();
 800061e:	f000 fa5b 	bl	8000ad8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */



   if(HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <main+0x98>)
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fafb 	bl	8003c20 <HAL_TIM_Base_Start_IT>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <main+0x52>
   {
	   Error_Handler();
 800062e:	f000 f86f 	bl	8000710 <Error_Handler>
   }
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <main+0x9c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	641a      	str	r2, [r3, #64]	@ 0x40

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800063a:	4b10      	ldr	r3, [pc, #64]	@ (800067c <main+0x9c>)
 800063c:	210c      	movs	r1, #12
 800063e:	0018      	movs	r0, r3
 8000640:	f003 fbca 	bl	8003dd8 <HAL_TIM_PWM_Start>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <main+0x6c>
	{
		Error_Handler();
 8000648:	f000 f862 	bl	8000710 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(hlamp.pressed == TRUE)
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <main+0x90>)
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d1fb      	bne.n	800064c <main+0x6c>
	  {

		  hlamp.button++;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <main+0x90>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <main+0x90>)
 800065e:	70da      	strb	r2, [r3, #3]
		  hlamp.pressed = FALSE;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <main+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	711a      	strb	r2, [r3, #4]

		  Lamp_Start();
 8000666:	f000 fbcd 	bl	8000e04 <Lamp_Start>
		  Lamp_SetPower();
 800066a:	f000 fc07 	bl	8000e7c <Lamp_SetPower>
	  if(hlamp.pressed == TRUE)
 800066e:	e7ed      	b.n	800064c <main+0x6c>
 8000670:	20000220 	.word	0x20000220
 8000674:	00000fff 	.word	0x00000fff
 8000678:	200001d4 	.word	0x200001d4
 800067c:	200000f0 	.word	0x200000f0

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08d      	sub	sp, #52	@ 0x34
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2414      	movs	r4, #20
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	231c      	movs	r3, #28
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f004 fc59 	bl	8004f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f004 fc52 	bl	8004f48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	220a      	movs	r2, #10
 80006a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2280      	movs	r2, #128	@ 0x80
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	0152      	lsls	r2, r2, #5
 80006b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2240      	movs	r2, #64	@ 0x40
 80006be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2201      	movs	r2, #1
 80006c4:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 fd69 	bl	80031a0 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80006d2:	f000 f81d 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	003b      	movs	r3, r7
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 ff35 	bl	8003568 <HAL_RCC_ClockConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000702:	f000 f805 	bl	8000710 <Error_Handler>
  }
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b00d      	add	sp, #52	@ 0x34
 800070c:	bd90      	pop	{r4, r7, pc}
	...

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8000718:	4b02      	ldr	r3, [pc, #8]	@ (8000724 <Error_Handler+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2264      	movs	r2, #100	@ 0x64
 800071e:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <Error_Handler+0x10>
 8000724:	200000f0 	.word	0x200000f0

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x44>)
 8000730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_MspInit+0x44>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	641a      	str	r2, [r3, #64]	@ 0x40
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x44>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x44>)
 8000748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <HAL_MspInit+0x44>)
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	0549      	lsls	r1, r1, #21
 8000750:	430a      	orrs	r2, r1
 8000752:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_MspInit+0x44>)
 8000756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	055b      	lsls	r3, r3, #21
 800075c:	4013      	ands	r3, r2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 fc78 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fcba 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <DMA1_Channel1_IRQHandler+0x14>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 f916 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000094 	.word	0x20000094

080007d0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <ADC1_IRQHandler+0x14>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f948 	bl	8001a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000030 	.word	0x20000030

080007e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <TIM14_IRQHandler+0x14>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 fbca 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	20000188 	.word	0x20000188

08000800 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <TIM16_IRQHandler+0x14>)
 8000806:	0018      	movs	r0, r3
 8000808:	f003 fbbe 	bl	8003f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	200001d4 	.word	0x200001d4

08000818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <SystemInit+0x14>)
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	0512      	lsls	r2, r2, #20
 8000822:	609a      	str	r2, [r3, #8]
#endif
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	@ 0x70
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2360      	movs	r3, #96	@ 0x60
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 fb81 	bl	8004f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	2354      	movs	r3, #84	@ 0x54
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	230c      	movs	r3, #12
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 fb79 	bl	8004f48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	2338      	movs	r3, #56	@ 0x38
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	231c      	movs	r3, #28
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f004 fb71 	bl	8004f48 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2334      	movs	r3, #52	@ 0x34
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f004 fb6a 	bl	8004f48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000874:	4b54      	ldr	r3, [pc, #336]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000876:	4a55      	ldr	r2, [pc, #340]	@ (80009cc <MX_TIM1_Init+0x19c>)
 8000878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800087a:	4b53      	ldr	r3, [pc, #332]	@ (80009c8 <MX_TIM1_Init+0x198>)
 800087c:	2213      	movs	r2, #19
 800087e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b51      	ldr	r3, [pc, #324]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000886:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000888:	4a51      	ldr	r2, [pc, #324]	@ (80009d0 <MX_TIM1_Init+0x1a0>)
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b4e      	ldr	r3, [pc, #312]	@ (80009c8 <MX_TIM1_Init+0x198>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000892:	4b4d      	ldr	r3, [pc, #308]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b4b      	ldr	r3, [pc, #300]	@ (80009c8 <MX_TIM1_Init+0x198>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089e:	4b4a      	ldr	r3, [pc, #296]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f003 f89b 	bl	80039dc <HAL_TIM_Base_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f7ff ff31 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	2160      	movs	r1, #96	@ 0x60
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	0152      	lsls	r2, r2, #5
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	4b43      	ldr	r3, [pc, #268]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f003 fd64 	bl	800438c <HAL_TIM_ConfigClockSource>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f7ff ff22 	bl	8000710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008cc:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f003 fa22 	bl	8003d18 <HAL_TIM_PWM_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008d8:	f7ff ff1a 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2154      	movs	r1, #84	@ 0x54
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	4b35      	ldr	r3, [pc, #212]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f004 fa06 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000900:	f7ff ff06 	bl	8000710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2138      	movs	r1, #56	@ 0x38
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2260      	movs	r2, #96	@ 0x60
 800090a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	22f4      	movs	r2, #244	@ 0xf4
 8000910:	32ff      	adds	r2, #255	@ 0xff
 8000912:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	1879      	adds	r1, r7, r1
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000930:	220c      	movs	r2, #12
 8000932:	0018      	movs	r0, r3
 8000934:	f003 fc2a 	bl	800418c <HAL_TIM_PWM_ConfigChannel>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800093c:	f7ff fee8 	bl	8000710 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	69da      	ldr	r2, [r3, #28]
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <MX_TIM1_Init+0x198>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4922      	ldr	r1, [pc, #136]	@ (80009d4 <MX_TIM1_Init+0x1a4>)
 800094c:	400a      	ands	r2, r1
 800094e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	0192      	lsls	r2, r2, #6
 8000974:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0492      	lsls	r2, r2, #18
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f004 fa0f 	bl	8004dcc <HAL_TIMEx_ConfigBreakDeadTime>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80009b2:	f7ff fead 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <MX_TIM1_Init+0x198>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 f925 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b01c      	add	sp, #112	@ 0x70
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	200000f0 	.word	0x200000f0
 80009cc:	40012c00 	.word	0x40012c00
 80009d0:	000003e7 	.word	0x000003e7
 80009d4:	fffff7ff 	.word	0xfffff7ff

080009d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2310      	movs	r3, #16
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f004 faad 	bl	8004f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	0018      	movs	r0, r3
 80009f2:	230c      	movs	r3, #12
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f004 faa6 	bl	8004f48 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <MX_TIM3_Init+0xa4>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12000;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a04:	4a1e      	ldr	r2, [pc, #120]	@ (8000a80 <MX_TIM3_Init+0xa8>)
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a10:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <MX_TIM3_Init+0xac>)
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 ffda 	bl	80039dc <HAL_TIM_Base_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f7ff fe70 	bl	8000710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	2110      	movs	r1, #16
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f003 fca3 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a4a:	f7ff fe61 	bl	8000710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2220      	movs	r2, #32
 8000a52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a5a:	1d3a      	adds	r2, r7, #4
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_TIM3_Init+0xa0>)
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f004 f951 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a6a:	f7ff fe51 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b008      	add	sp, #32
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	2000013c 	.word	0x2000013c
 8000a7c:	40000400 	.word	0x40000400
 8000a80:	00002ee0 	.word	0x00002ee0
 8000a84:	00007530 	.word	0x00007530

08000a88 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <MX_TIM14_Init+0x44>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12000;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000a94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <MX_TIM14_Init+0x48>)
 8000a96:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <MX_TIM14_Init+0x4c>)
 8000aa2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <MX_TIM14_Init+0x40>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 ff92 	bl	80039dc <HAL_TIM_Base_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000abc:	f7ff fe28 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	20000188 	.word	0x20000188
 8000acc:	40002000 	.word	0x40002000
 8000ad0:	00002ee0 	.word	0x00002ee0
 8000ad4:	00001388 	.word	0x00001388

08000ad8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000ade:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <MX_TIM16_Init+0x4c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1200;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000ae4:	2296      	movs	r2, #150	@ 0x96
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000af2:	2264      	movs	r2, #100	@ 0x64
 8000af4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <MX_TIM16_Init+0x48>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 ff66 	bl	80039dc <HAL_TIM_Base_Init>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000b14:	f7ff fdfc 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	200001d4 	.word	0x200001d4
 8000b24:	40014400 	.word	0x40014400

08000b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf4 <HAL_TIM_Base_MspInit+0xcc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10e      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	0109      	lsls	r1, r1, #4
 8000b44:	430a      	orrs	r2, r1
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	4013      	ands	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b56:	e048      	b.n	8000bea <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <HAL_TIM_Base_MspInit+0xd4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d10c      	bne.n	8000b7c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
}
 8000b7a:	e036      	b.n	8000bea <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM14)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1f      	ldr	r2, [pc, #124]	@ (8000c00 <HAL_TIM_Base_MspInit+0xd8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d116      	bne.n	8000bb4 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	0209      	lsls	r1, r1, #8
 8000b90:	430a      	orrs	r2, r1
 8000b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2013      	movs	r0, #19
 8000ba8:	f001 fcf4 	bl	8002594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000bac:	2013      	movs	r0, #19
 8000bae:	f001 fd06 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 8000bb2:	e01a      	b.n	8000bea <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM16)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <HAL_TIM_Base_MspInit+0xdc>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d115      	bne.n	8000bea <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	0289      	lsls	r1, r1, #10
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_TIM_Base_MspInit+0xd0>)
 8000bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2015      	movs	r0, #21
 8000be0:	f001 fcd8 	bl	8002594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000be4:	2015      	movs	r0, #21
 8000be6:	f001 fcea 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b006      	add	sp, #24
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	40012c00 	.word	0x40012c00
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	40002000 	.word	0x40002000
 8000c04:	40014400 	.word	0x40014400

08000c08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	240c      	movs	r4, #12
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	2314      	movs	r3, #20
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f004 f994 	bl	8004f48 <memset>
  if(timHandle->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <HAL_TIM_MspPostInit+0x78>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d126      	bne.n	8000c78 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <HAL_TIM_MspPostInit+0x7c>)
 8000c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_TIM_MspPostInit+0x7c>)
 8000c30:	2102      	movs	r1, #2
 8000c32:	430a      	orrs	r2, r1
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <HAL_TIM_MspPostInit+0x7c>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_PWM_Pin;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_TIM_MspPostInit+0x80>)
 8000c66:	0019      	movs	r1, r3
 8000c68:	0010      	movs	r0, r2
 8000c6a:	f002 f803 	bl	8002c74 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 8000c6e:	23c0      	movs	r3, #192	@ 0xc0
 8000c70:	029b      	lsls	r3, r3, #10
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fa26 	bl	80010c4 <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b009      	add	sp, #36	@ 0x24
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40012c00 	.word	0x40012c00
 8000c84:	40021000 	.word	0x40021000
 8000c88:	50000400 	.word	0x50000400

08000c8c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1b      	ldr	r2, [pc, #108]	@ (8000d08 <HAL_TIM_Base_MspDeInit+0x7c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000ca4:	491a      	ldr	r1, [pc, #104]	@ (8000d10 <HAL_TIM_Base_MspDeInit+0x84>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }
}
 8000caa:	e028      	b.n	8000cfe <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_TIM_Base_MspDeInit+0x88>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	438a      	bics	r2, r1
 8000cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000cc2:	e01c      	b.n	8000cfe <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM14)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	@ (8000d18 <HAL_TIM_Base_MspDeInit+0x8c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d109      	bne.n	8000ce2 <HAL_TIM_Base_MspDeInit+0x56>
    __HAL_RCC_TIM14_CLK_DISABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cd4:	4911      	ldr	r1, [pc, #68]	@ (8000d1c <HAL_TIM_Base_MspDeInit+0x90>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8000cda:	2013      	movs	r0, #19
 8000cdc:	f001 fc7f 	bl	80025de <HAL_NVIC_DisableIRQ>
}
 8000ce0:	e00d      	b.n	8000cfe <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d20 <HAL_TIM_Base_MspDeInit+0x94>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d108      	bne.n	8000cfe <HAL_TIM_Base_MspDeInit+0x72>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_TIM_Base_MspDeInit+0x80>)
 8000cf2:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <HAL_TIM_Base_MspDeInit+0x98>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM16_IRQn);
 8000cf8:	2015      	movs	r0, #21
 8000cfa:	f001 fc70 	bl	80025de <HAL_NVIC_DisableIRQ>
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	fffff7ff 	.word	0xfffff7ff
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40002000 	.word	0x40002000
 8000d1c:	ffff7fff 	.word	0xffff7fff
 8000d20:	40014400 	.word	0x40014400
 8000d24:	fffdffff 	.word	0xfffdffff

08000d28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	static GPIO_PinState button 	= GPIO_PIN_SET;
	static GPIO_PinState buttonOld = GPIO_PIN_SET;

	if(htim->Instance == TIM14)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10b      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		hlamp.setup = LAMP_SETUP_OFF;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	705a      	strb	r2, [r3, #1]


		if(HAL_TIM_Base_Stop(htim) != HAL_OK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 ff46 	bl	8003bd4 <HAL_TIM_Base_Stop>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d022      	beq.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			Error_Handler();
 8000d4c:	f7ff fce0 	bl	8000710 <Error_Handler>

#ifdef IWDG_
	  HAL_IWDG_Refresh(&hiwdg);
#endif
	}
}
 8000d50:	e01f      	b.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if(htim->Instance == TIM16)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d11a      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  button = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	019a      	lsls	r2, r3, #6
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 f9be 	bl	80030e8 <HAL_GPIO_ReadPin>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	001a      	movs	r2, r3
 8000d70:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d72:	701a      	strb	r2, [r3, #0]
	  if(buttonOld == GPIO_PIN_SET && button == GPIO_PIN_RESET)
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d106      	bne.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x62>
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x62>
		  hlamp.pressed = TRUE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	711a      	strb	r2, [r3, #4]
	  buttonOld = button;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d8c:	781a      	ldrb	r2, [r3, #0]
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	40002000 	.word	0x40002000
 8000da0:	20000220 	.word	0x20000220
 8000da4:	40014400 	.word	0x40014400
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000009 	.word	0x20000009

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f7ff fd30 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000db8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dc4:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dd4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd6:	3204      	adds	r2, #4

08000dd8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <LoopForever+0x16>)
  cmp r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000dde:	f004 f8bb 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fbfd 	bl	80005e0 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000dec:	08005054 	.word	0x08005054
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000df4:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000df8:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000dfc:	20000234 	.word	0x20000234

08000e00 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <DMA1_Channel2_3_IRQHandler>
	...

08000e04 <Lamp_Start>:

LAMP_HandleTypedef hlamp;


void Lamp_Start(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

	if(hlamp.status == LAMP_OFF)
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <Lamp_Start+0x64>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d127      	bne.n	8000e60 <Lamp_Start+0x5c>
	{
		hlamp.status = LAMP_ON;
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <Lamp_Start+0x64>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]

		MX_DMA_Init();
 8000e16:	f7ff fb81 	bl	800051c <MX_DMA_Init>
	    MX_ADC1_Init();
 8000e1a:	f7ff fa01 	bl	8000220 <MX_ADC1_Init>
	    MX_TIM14_Init();
 8000e1e:	f7ff fe33 	bl	8000a88 <MX_TIM14_Init>
	    MX_TIM3_Init();
 8000e22:	f7ff fdd9 	bl	80009d8 <MX_TIM3_Init>

		// start 5s setup timer
		if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <Lamp_Start+0x68>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fef9 	bl	8003c20 <HAL_TIM_Base_Start_IT>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <Lamp_Start+0x32>
		{
			Error_Handler();
 8000e32:	f7ff fc6d 	bl	8000710 <Error_Handler>
		}


		hlamp.setup = LAMP_SETUP_ON;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <Lamp_Start+0x64>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	705a      	strb	r2, [r3, #1]

		// start adc timer
		if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <Lamp_Start+0x6c>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 fe82 	bl	8003b48 <HAL_TIM_Base_Start>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <Lamp_Start+0x48>
		{
			Error_Handler();
 8000e48:	f7ff fc62 	bl	8000710 <Error_Handler>
		}



		if(HAL_ADC_Start_DMA(&hadc1, hlamp.ADC_Results, 2) != HAL_OK)
 8000e4c:	4909      	ldr	r1, [pc, #36]	@ (8000e74 <Lamp_Start+0x70>)
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <Lamp_Start+0x74>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fd0a 	bl	800186c <HAL_ADC_Start_DMA>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <Lamp_Start+0x5c>
		{
			Error_Handler();
 8000e5c:	f7ff fc58 	bl	8000710 <Error_Handler>
		}
	}

}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	20000220 	.word	0x20000220
 8000e6c:	20000188 	.word	0x20000188
 8000e70:	2000013c 	.word	0x2000013c
 8000e74:	20000228 	.word	0x20000228
 8000e78:	20000030 	.word	0x20000030

08000e7c <Lamp_SetPower>:


void Lamp_SetPower(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

	if(hlamp.setup == LAMP_SETUP_ON)
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d12b      	bne.n	8000ee0 <Lamp_SetPower+0x64>
	{
		switch(hlamp.button)
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d011      	beq.n	8000eb4 <Lamp_SetPower+0x38>
 8000e90:	dc16      	bgt.n	8000ec0 <Lamp_SetPower+0x44>
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d002      	beq.n	8000e9c <Lamp_SetPower+0x20>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d006      	beq.n	8000ea8 <Lamp_SetPower+0x2c>
 8000e9a:	e011      	b.n	8000ec0 <Lamp_SetPower+0x44>
		{
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2296      	movs	r2, #150	@ 0x96
 8000ea2:	0052      	lsls	r2, r2, #1
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000ea6:	e027      	b.n	8000ef8 <Lamp_SetPower+0x7c>
		case 2:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 600);
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2296      	movs	r2, #150	@ 0x96
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000eb2:	e021      	b.n	8000ef8 <Lamp_SetPower+0x7c>
		case 3:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	22fa      	movs	r2, #250	@ 0xfa
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000ebe:	e01b      	b.n	8000ef8 <Lamp_SetPower+0x7c>
		default:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	641a      	str	r2, [r3, #64]	@ 0x40
		    Lamp_DeInit();
 8000ec8:	f000 f82a 	bl	8000f20 <Lamp_DeInit>

		    hlamp.button = 0;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	70da      	strb	r2, [r3, #3]
		    hlamp.status = LAMP_OFF;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		    hlamp.setup = LAMP_SETUP_OFF;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	705a      	strb	r2, [r3, #1]
			break;
 8000ede:	e00b      	b.n	8000ef8 <Lamp_SetPower+0x7c>

	}
	// turn off lamp
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	641a      	str	r2, [r3, #64]	@ 0x40

		Lamp_DeInit();
 8000ee8:	f000 f81a 	bl	8000f20 <Lamp_DeInit>
		hlamp.status = LAMP_OFF;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		hlamp.button = 0;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	70da      	strb	r2, [r3, #3]
	}

	//forcee low state (batt, Temp)
	if((hlamp.helth != LAMP_OK) && (hlamp.status != LAMP_OFF))
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <Lamp_SetPower+0x96>
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <Lamp_SetPower+0x9c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <Lamp_SetPower+0x96>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <Lamp_SetPower+0xa0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2296      	movs	r2, #150	@ 0x96
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000220 	.word	0x20000220
 8000f1c:	200000f0 	.word	0x200000f0

08000f20 <Lamp_DeInit>:

void Lamp_DeInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	//#############ADC_Deinit################################
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <Lamp_DeInit+0x6c>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fd2e 	bl	8001988 <HAL_ADC_Stop_DMA>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <Lamp_DeInit+0x14>
	{
		Error_Handler();
 8000f30:	f7ff fbee 	bl	8000710 <Error_Handler>
	}


	if(HAL_ADC_DeInit(&hadc1) != HAL_OK)
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <Lamp_DeInit+0x6c>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 fbfc 	bl	8001734 <HAL_ADC_DeInit>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <Lamp_DeInit+0x24>
	{
		Error_Handler();
 8000f40:	f7ff fbe6 	bl	8000710 <Error_Handler>
	//#######################################################



	//###########5sTIM_Deinit################################
	if(HAL_TIM_Base_Stop_IT(&htim14) != HAL_OK)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <Lamp_DeInit+0x70>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f002 feb8 	bl	8003cbc <HAL_TIM_Base_Stop_IT>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <Lamp_DeInit+0x34>
	{
		Error_Handler();
 8000f50:	f7ff fbde 	bl	8000710 <Error_Handler>
	}

	if(HAL_TIM_Base_DeInit(&htim14) != HAL_OK)
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <Lamp_DeInit+0x70>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 fd98 	bl	8003a8c <HAL_TIM_Base_DeInit>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <Lamp_DeInit+0x44>
	{
		Error_Handler();
 8000f60:	f7ff fbd6 	bl	8000710 <Error_Handler>




	//###########ADC_Triger_Deinit##########################
	if(HAL_TIM_Base_Stop(&htim3) != HAL_OK)
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <Lamp_DeInit+0x74>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 fe34 	bl	8003bd4 <HAL_TIM_Base_Stop>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <Lamp_DeInit+0x54>
	{
		Error_Handler();
 8000f70:	f7ff fbce 	bl	8000710 <Error_Handler>
	}
	if(HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <Lamp_DeInit+0x74>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 fd88 	bl	8003a8c <HAL_TIM_Base_DeInit>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <Lamp_DeInit+0x64>
	{
		Error_Handler();
 8000f80:	f7ff fbc6 	bl	8000710 <Error_Handler>
	}
	//######################################################

}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	20000030 	.word	0x20000030
 8000f90:	20000188 	.word	0x20000188
 8000f94:	2000013c 	.word	0x2000013c

08000f98 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	0c12      	lsrs	r2, r2, #16
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c1a      	lsrs	r2, r3, #16
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f80f 	bl	8000ff8 <HAL_InitTick>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e001      	b.n	8000fea <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe6:	f7ff fb9f 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_InitTick+0x88>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d02b      	beq.n	8001068 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_InitTick+0x8c>)
 8001012:	681c      	ldr	r4, [r3, #0]
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <HAL_InitTick+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0019      	movs	r1, r3
 800101a:	23fa      	movs	r3, #250	@ 0xfa
 800101c:	0098      	lsls	r0, r3, #2
 800101e:	f7ff f873 	bl	8000108 <__udivsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	0020      	movs	r0, r4
 8001028:	f7ff f86e 	bl	8000108 <__udivsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	0018      	movs	r0, r3
 8001030:	f001 fae5 	bl	80025fe <HAL_SYSTICK_Config>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d112      	bne.n	800105e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	2301      	movs	r3, #1
 8001042:	425b      	negs	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	0018      	movs	r0, r3
 8001048:	f001 faa4 	bl	8002594 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_InitTick+0x90>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00d      	b.n	8001070 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e008      	b.n	8001070 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e003      	b.n	8001070 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b005      	add	sp, #20
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	20000010 	.word	0x20000010
 8001084:	20000004 	.word	0x20000004
 8001088:	2000000c 	.word	0x2000000c

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	18d2      	adds	r2, r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_IncTick+0x20>)
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000010 	.word	0x20000010
 80010ac:	20000230 	.word	0x20000230

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	20000230 	.word	0x20000230

080010c4 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff ff62 	bl	8000f98 <LL_SYSCFG_ConfigPinMux>
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	431a      	orrs	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	ff3fffff 	.word	0xff3fffff

08001104 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	23c0      	movs	r3, #192	@ 0xc0
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	4013      	ands	r3, r2
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}

0800111e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	2104      	movs	r1, #4
 8001132:	400a      	ands	r2, r1
 8001134:	2107      	movs	r1, #7
 8001136:	4091      	lsls	r1, r2
 8001138:	000a      	movs	r2, r1
 800113a:	43d2      	mvns	r2, r2
 800113c:	401a      	ands	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2104      	movs	r1, #4
 8001142:	400b      	ands	r3, r1
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4099      	lsls	r1, r3
 8001148:	000b      	movs	r3, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b004      	add	sp, #16
 8001156:	bd80      	pop	{r7, pc}

08001158 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	2104      	movs	r1, #4
 800116a:	400a      	ands	r2, r1
 800116c:	2107      	movs	r1, #7
 800116e:	4091      	lsls	r1, r2
 8001170:	000a      	movs	r2, r1
 8001172:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2104      	movs	r1, #4
 8001178:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800117a:	40da      	lsrs	r2, r3
 800117c:	0013      	movs	r3, r2
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}

08001186 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	23c0      	movs	r3, #192	@ 0xc0
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4013      	ands	r3, r2
 8001198:	d101      	bne.n	800119e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	211f      	movs	r1, #31
 80011bc:	400a      	ands	r2, r1
 80011be:	210f      	movs	r1, #15
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	43d2      	mvns	r2, r2
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0e9b      	lsrs	r3, r3, #26
 80011cc:	210f      	movs	r1, #15
 80011ce:	4019      	ands	r1, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	201f      	movs	r0, #31
 80011d4:	4003      	ands	r3, r0
 80011d6:	4099      	lsls	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b004      	add	sp, #16
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	0a5b      	lsrs	r3, r3, #9
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}

0800120a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	0252      	lsls	r2, r2, #9
 800121c:	0a52      	lsrs	r2, r2, #9
 800121e:	43d2      	mvns	r2, r2
 8001220:	401a      	ands	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}

0800122e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2203      	movs	r2, #3
 800123c:	4013      	ands	r3, r2
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	0212      	lsls	r2, r2, #8
 800125c:	43d2      	mvns	r2, r2
 800125e:	401a      	ands	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	400b      	ands	r3, r1
 8001268:	4904      	ldr	r1, [pc, #16]	@ (800127c <LL_ADC_SetChannelSamplingTime+0x34>)
 800126a:	400b      	ands	r3, r1
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	7fffff00 	.word	0x7fffff00

08001280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800128e:	4013      	ands	r3, r2
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	6fffffe8 	.word	0x6fffffe8

080012a8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a03      	ldr	r2, [pc, #12]	@ (80012c4 <LL_ADC_DisableInternalRegulator+0x1c>)
 80012b6:	401a      	ands	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	6fffffe8 	.word	0x6fffffe8

080012c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	401a      	ands	r2, r3
 80012da:	2380      	movs	r3, #128	@ 0x80
 80012dc:	055b      	lsls	r3, r3, #21
 80012de:	429a      	cmp	r2, r3
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <LL_ADC_Enable+0x20>)
 80012fe:	4013      	ands	r3, r2
 8001300:	2201      	movs	r2, #1
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	7fffffe8 	.word	0x7fffffe8

08001314 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <LL_ADC_Disable+0x20>)
 8001322:	4013      	ands	r3, r2
 8001324:	2202      	movs	r2, #2
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800132c:	46c0      	nop			@ (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}
 8001334:	7fffffe8 	.word	0x7fffffe8

08001338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <LL_ADC_IsEnabled+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_IsEnabled+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}

0800135a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d101      	bne.n	8001372 <LL_ADC_IsDisableOngoing+0x18>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_ADC_IsDisableOngoing+0x1a>
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}

0800137c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <LL_ADC_REG_StartConversion+0x20>)
 800138a:	4013      	ands	r3, r2
 800138c:	2204      	movs	r2, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	7fffffe8 	.word	0x7fffffe8

080013a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <LL_ADC_REG_StopConversion+0x20>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	2210      	movs	r2, #16
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	7fffffe8 	.word	0x7fffffe8

080013c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2204      	movs	r2, #4
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d101      	bne.n	80013dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f0:	231f      	movs	r3, #31
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e17e      	b.n	800170c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10a      	bne.n	800142c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe ff83 	bl	8000324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2254      	movs	r2, #84	@ 0x54
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff49 	bl	80012c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d114      	bne.n	8001464 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0018      	movs	r0, r3
 8001440:	f7ff ff1e 	bl	8001280 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001444:	4bb3      	ldr	r3, [pc, #716]	@ (8001714 <HAL_ADC_Init+0x32c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	49b3      	ldr	r1, [pc, #716]	@ (8001718 <HAL_ADC_Init+0x330>)
 800144a:	0018      	movs	r0, r3
 800144c:	f7fe fe5c 	bl	8000108 <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001456:	e002      	b.n	800145e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f9      	bne.n	8001458 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ff2d 	bl	80012c8 <LL_ADC_IsInternalRegulatorEnabled>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d10f      	bne.n	8001492 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	2210      	movs	r2, #16
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001482:	2201      	movs	r2, #1
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800148a:	231f      	movs	r3, #31
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff94 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	2210      	movs	r2, #16
 80014a6:	4013      	ands	r3, r2
 80014a8:	d000      	beq.n	80014ac <HAL_ADC_Init+0xc4>
 80014aa:	e122      	b.n	80016f2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d000      	beq.n	80014b4 <HAL_ADC_Init+0xcc>
 80014b2:	e11e      	b.n	80016f2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	4a98      	ldr	r2, [pc, #608]	@ (800171c <HAL_ADC_Init+0x334>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	2202      	movs	r2, #2
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <LL_ADC_IsEnabled>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d000      	beq.n	80014d4 <HAL_ADC_Init+0xec>
 80014d2:	e0ad      	b.n	8001630 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e1b      	ldrb	r3, [r3, #24]
 80014dc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014de:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e5b      	ldrb	r3, [r3, #25]
 80014e4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e9b      	ldrb	r3, [r3, #26]
 80014ec:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_ADC_Init+0x116>
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	e000      	b.n	8001500 <HAL_ADC_Init+0x118>
 80014fe:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001500:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001506:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da04      	bge.n	800151a <HAL_ADC_Init+0x132>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	e001      	b.n	800151e <HAL_ADC_Init+0x136>
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800151e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	212c      	movs	r1, #44	@ 0x2c
 8001524:	5c5b      	ldrb	r3, [r3, r1]
 8001526:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001528:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	5c9b      	ldrb	r3, [r3, r2]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d115      	bne.n	8001566 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7e9b      	ldrb	r3, [r3, #26]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2280      	movs	r2, #128	@ 0x80
 8001546:	0252      	lsls	r2, r2, #9
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	e00b      	b.n	8001566 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	2220      	movs	r2, #32
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155e:	2201      	movs	r2, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001572:	23e0      	movs	r3, #224	@ 0xe0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800157c:	4313      	orrs	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4a65      	ldr	r2, [pc, #404]	@ (8001720 <HAL_ADC_Init+0x338>)
 800158c:	4013      	ands	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0f9b      	lsrs	r3, r3, #30
 80015a0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015a6:	4313      	orrs	r3, r2
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	223c      	movs	r2, #60	@ 0x3c
 80015b2:	5c9b      	ldrb	r3, [r3, r2]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d111      	bne.n	80015dc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	0f9b      	lsrs	r3, r3, #30
 80015be:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80015ca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80015d0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <HAL_ADC_Init+0x33c>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	0019      	movs	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	23c0      	movs	r3, #192	@ 0xc0
 80015f8:	061b      	lsls	r3, r3, #24
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d018      	beq.n	8001630 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	05db      	lsls	r3, r3, #23
 8001606:	429a      	cmp	r2, r3
 8001608:	d012      	beq.n	8001630 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	429a      	cmp	r2, r3
 8001614:	d00c      	beq.n	8001630 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <HAL_ADC_Init+0x340>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <HAL_ADC_Init+0x344>)
 800161c:	4013      	ands	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23f0      	movs	r3, #240	@ 0xf0
 8001626:	039b      	lsls	r3, r3, #14
 8001628:	401a      	ands	r2, r3
 800162a:	4b3f      	ldr	r3, [pc, #252]	@ (8001728 <HAL_ADC_Init+0x340>)
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001638:	001a      	movs	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	f7ff fd6f 	bl	800111e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001648:	4939      	ldr	r1, [pc, #228]	@ (8001730 <HAL_ADC_Init+0x348>)
 800164a:	001a      	movs	r2, r3
 800164c:	f7ff fd67 	bl	800111e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2110      	movs	r1, #16
 8001664:	4249      	negs	r1, r1
 8001666:	430a      	orrs	r2, r1
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
 800166a:	e018      	b.n	800169e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	039b      	lsls	r3, r3, #14
 8001674:	429a      	cmp	r2, r3
 8001676:	d112      	bne.n	800169e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	3b01      	subs	r3, #1
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	221c      	movs	r2, #28
 8001688:	4013      	ands	r3, r2
 800168a:	2210      	movs	r2, #16
 800168c:	4252      	negs	r2, r2
 800168e:	409a      	lsls	r2, r3
 8001690:	0011      	movs	r1, r2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2100      	movs	r1, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fd57 	bl	8001158 <LL_ADC_GetSamplingTimeCommonChannels>
 80016aa:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10b      	bne.n	80016cc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	2203      	movs	r2, #3
 80016c0:	4393      	bics	r3, r2
 80016c2:	2201      	movs	r2, #1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016ca:	e01c      	b.n	8001706 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	2212      	movs	r2, #18
 80016d2:	4393      	bics	r3, r2
 80016d4:	2210      	movs	r2, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e0:	2201      	movs	r2, #1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80016e8:	231f      	movs	r3, #31
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016f0:	e009      	b.n	8001706 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	2210      	movs	r2, #16
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016fe:	231f      	movs	r3, #31
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001706:	231f      	movs	r3, #31
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	781b      	ldrb	r3, [r3, #0]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b008      	add	sp, #32
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	00030d40 	.word	0x00030d40
 800171c:	fffffefd 	.word	0xfffffefd
 8001720:	ffde0201 	.word	0xffde0201
 8001724:	1ffffc02 	.word	0x1ffffc02
 8001728:	40012708 	.word	0x40012708
 800172c:	ffc3ffff 	.word	0xffc3ffff
 8001730:	7fffff04 	.word	0x7fffff04

08001734 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e081      	b.n	800184a <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	2202      	movs	r2, #2
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001752:	250f      	movs	r5, #15
 8001754:	197c      	adds	r4, r7, r5
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 fc8d 	bl	8002078 <ADC_ConversionStop>
 800175e:	0003      	movs	r3, r0
 8001760:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001762:	197b      	adds	r3, r7, r5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d112      	bne.n	8001790 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800176a:	197c      	adds	r4, r7, r5
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fd3c 	bl	80021ec <ADC_Disable>
 8001774:	0003      	movs	r3, r0
 8001776:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001778:	197b      	adds	r3, r7, r5
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff fd8c 	bl	80012a8 <LL_ADC_DisableInternalRegulator>
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */

  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	492e      	ldr	r1, [pc, #184]	@ (8001854 <HAL_ADC_DeInit+0x120>)
 800179c:	400a      	ands	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001858 <HAL_ADC_DeInit+0x124>)
 80017a6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH  | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	492a      	ldr	r1, [pc, #168]	@ (800185c <HAL_ADC_DeInit+0x128>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	0892      	lsrs	r2, r2, #2
 80017c6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2107      	movs	r1, #7
 80017d4:	438a      	bics	r2, r1
 80017d6:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	491f      	ldr	r1, [pc, #124]	@ (8001860 <HAL_ADC_DeInit+0x12c>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	491b      	ldr	r1, [pc, #108]	@ (8001860 <HAL_ADC_DeInit+0x12c>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4917      	ldr	r1, [pc, #92]	@ (8001860 <HAL_ADC_DeInit+0x12c>)
 8001804:	400a      	ands	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_ADC_DeInit+0x130>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_ADC_DeInit+0x130>)
 800181c:	4912      	ldr	r1, [pc, #72]	@ (8001868 <HAL_ADC_DeInit+0x134>)
 800181e:	400a      	ands	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f7fe fe15 	bl	8000454 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2254      	movs	r2, #84	@ 0x54
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001844:	230f      	movs	r3, #15
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	fffffc60 	.word	0xfffffc60
 8001858:	0000039f 	.word	0x0000039f
 800185c:	831e0200 	.word	0x831e0200
 8001860:	f000f000 	.word	0xf000f000
 8001864:	40012708 	.word	0x40012708
 8001868:	ff03ffff 	.word	0xff03ffff

0800186c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fda1 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d16c      	bne.n	8001960 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2254      	movs	r2, #84	@ 0x54
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_Start_DMA+0x28>
 8001890:	2302      	movs	r3, #2
 8001892:	e06c      	b.n	800196e <HAL_ADC_Start_DMA+0x102>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2254      	movs	r2, #84	@ 0x54
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	d113      	bne.n	80018d0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fd43 	bl	8001338 <LL_ADC_IsEnabled>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fd2a 	bl	8001314 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018d0:	2517      	movs	r5, #23
 80018d2:	197c      	adds	r4, r7, r5
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fc0a 	bl	80020f0 <ADC_Enable>
 80018dc:	0003      	movs	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018e0:	002c      	movs	r4, r5
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d13e      	bne.n	8001968 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <HAL_ADC_Start_DMA+0x10c>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	0052      	lsls	r2, r2, #1
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001906:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <HAL_ADC_Start_DMA+0x110>)
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <HAL_ADC_Start_DMA+0x114>)
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001916:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <HAL_ADC_Start_DMA+0x118>)
 8001918:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	221c      	movs	r2, #28
 8001920:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2254      	movs	r2, #84	@ 0x54
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2110      	movs	r1, #16
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3340      	adds	r3, #64	@ 0x40
 8001944:	0019      	movs	r1, r3
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	193c      	adds	r4, r7, r4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f000 ff66 	bl	800281c <HAL_DMA_Start_IT>
 8001950:	0003      	movs	r3, r0
 8001952:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff fd0f 	bl	800137c <LL_ADC_REG_StartConversion>
 800195e:	e003      	b.n	8001968 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001960:	2317      	movs	r3, #23
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001968:	2317      	movs	r3, #23
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b006      	add	sp, #24
 8001974:	bdb0      	pop	{r4, r5, r7, pc}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	fffff0fe 	.word	0xfffff0fe
 800197c:	0800229d 	.word	0x0800229d
 8001980:	08002365 	.word	0x08002365
 8001984:	08002383 	.word	0x08002383

08001988 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2254      	movs	r2, #84	@ 0x54
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_ADC_Stop_DMA+0x16>
 800199a:	2302      	movs	r3, #2
 800199c:	e05f      	b.n	8001a5e <HAL_ADC_Stop_DMA+0xd6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2254      	movs	r2, #84	@ 0x54
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019a6:	250f      	movs	r5, #15
 80019a8:	197c      	adds	r4, r7, r5
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 fb63 	bl	8002078 <ADC_ConversionStop>
 80019b2:	0003      	movs	r3, r0
 80019b4:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019b6:	0029      	movs	r1, r5
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d147      	bne.n	8001a50 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c4:	2225      	movs	r2, #37	@ 0x25
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d112      	bne.n	80019f4 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d2:	000d      	movs	r5, r1
 80019d4:	187c      	adds	r4, r7, r1
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 ffa8 	bl	800292c <HAL_DMA_Abort>
 80019dc:	0003      	movs	r3, r0
 80019de:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80019e0:	197b      	adds	r3, r7, r5
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	2240      	movs	r2, #64	@ 0x40
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2110      	movs	r1, #16
 8001a00:	438a      	bics	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001a04:	220f      	movs	r2, #15
 8001a06:	18bb      	adds	r3, r7, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001a0e:	18bc      	adds	r4, r7, r2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fbea 	bl	80021ec <ADC_Disable>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	7023      	strb	r3, [r4, #0]
 8001a1c:	e003      	b.n	8001a26 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 fbe3 	bl	80021ec <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a26:	230f      	movs	r3, #15
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_ADC_Stop_DMA+0xe0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	2201      	movs	r2, #1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2254      	movs	r2, #84	@ 0x54
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	fffffefe 	.word	0xfffffefe

08001a6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d017      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x54>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 fc90 	bl	80023d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x64>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d107      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ad6:	d04d      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2208      	movs	r2, #8
 8001adc:	4013      	ands	r3, r2
 8001ade:	d049      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d106      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fb42 	bl	8001186 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d02e      	beq.n	8001b64 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e9b      	ldrb	r3, [r3, #26]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d12a      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2208      	movs	r2, #8
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d123      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fc4f 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d110      	bne.n	8001b4c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	210c      	movs	r1, #12
 8001b36:	438a      	bics	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_ADC_IRQHandler+0x22c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	2201      	movs	r2, #1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b4a:	e00b      	b.n	8001b64 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	2220      	movs	r2, #32
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fc9e 	bl	80004a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	220c      	movs	r2, #12
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d012      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	4013      	ands	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	2280      	movs	r2, #128	@ 0x80
 8001b8a:	0252      	lsls	r2, r2, #9
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f889 	bl	8001cac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d014      	beq.n	8001bd6 <HAL_ADC_IRQHandler+0x16a>
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d00f      	beq.n	8001bd6 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	0292      	lsls	r2, r2, #10
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fbf6 	bl	80023b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d014      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x19e>
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d00f      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	02d2      	lsls	r2, r2, #11
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 fbe4 	bl	80023c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x1fe>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2210      	movs	r2, #16
 8001c16:	4013      	ands	r3, r2
 8001c18:	d027      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e008      	b.n	8001c3a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fafe 	bl	800122e <LL_ADC_REG_GetDMATransfer>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d110      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	2280      	movs	r2, #128	@ 0x80
 8001c46:	00d2      	lsls	r2, r2, #3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2202      	movs	r2, #2
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f82d 	bl	8001cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2210      	movs	r2, #16
 8001c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	019b      	lsls	r3, r3, #6
 8001c70:	4013      	ands	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x224>
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d008      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 fbb1 	bl	80023e8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	0192      	lsls	r2, r2, #6
 8001c8e:	601a      	str	r2, [r3, #0]
  }
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b006      	add	sp, #24
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	fffffefe 	.word	0xfffffefe

08001c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ca4:	46c0      	nop			@ (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2254      	movs	r2, #84	@ 0x54
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x24>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e1be      	b.n	800206e <HAL_ADC_ConfigChannel+0x3a2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2254      	movs	r2, #84	@ 0x54
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fb61 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d000      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0x3c>
 8001d06:	e1a1      	b.n	800204c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d100      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x46>
 8001d10:	e152      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d22:	4ac2      	ldr	r2, [pc, #776]	@ (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d108      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0019      	movs	r1, r3
 8001d32:	0010      	movs	r0, r2
 8001d34:	f7ff fa58 	bl	80011e8 <LL_ADC_REG_SetSequencerChAdd>
 8001d38:	e0ed      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	211f      	movs	r1, #31
 8001d44:	400b      	ands	r3, r1
 8001d46:	210f      	movs	r1, #15
 8001d48:	4099      	lsls	r1, r3
 8001d4a:	000b      	movs	r3, r1
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	0a5b      	lsrs	r3, r3, #9
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x9c>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	221f      	movs	r2, #31
 8001d64:	4013      	ands	r3, r2
 8001d66:	e0bc      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d000      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0xa8>
 8001d72:	e0b5      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x214>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d000      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0xb4>
 8001d7e:	e0ad      	b.n	8001edc <HAL_ADC_ConfigChannel+0x210>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2204      	movs	r2, #4
 8001d86:	4013      	ands	r3, r2
 8001d88:	d000      	beq.n	8001d8c <HAL_ADC_ConfigChannel+0xc0>
 8001d8a:	e0a5      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x20c>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	4013      	ands	r3, r2
 8001d94:	d000      	beq.n	8001d98 <HAL_ADC_ConfigChannel+0xcc>
 8001d96:	e09d      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x208>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d000      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0xd8>
 8001da2:	e095      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x204>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	4013      	ands	r3, r2
 8001dac:	d000      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0xe4>
 8001dae:	e08d      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x200>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2240      	movs	r2, #64	@ 0x40
 8001db6:	4013      	ands	r3, r2
 8001db8:	d000      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0xf0>
 8001dba:	e085      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1fc>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2280      	movs	r2, #128	@ 0x80
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d000      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0xfc>
 8001dc6:	e07d      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1f8>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADC_ConfigChannel+0x10a>
 8001dd4:	e074      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1f4>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d000      	beq.n	8001de4 <HAL_ADC_ConfigChannel+0x118>
 8001de2:	e06b      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1f0>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4013      	ands	r3, r2
 8001dee:	d000      	beq.n	8001df2 <HAL_ADC_ConfigChannel+0x126>
 8001df0:	e062      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1ec>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d000      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x134>
 8001dfe:	e059      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1e8>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d151      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1e4>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	019b      	lsls	r3, r3, #6
 8001e14:	4013      	ands	r3, r2
 8001e16:	d149      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1e0>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	01db      	lsls	r3, r3, #7
 8001e20:	4013      	ands	r3, r2
 8001e22:	d141      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1dc>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d139      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1d8>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d131      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1d4>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	d129      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1d0>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	02db      	lsls	r3, r3, #11
 8001e50:	4013      	ands	r3, r2
 8001e52:	d121      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1cc>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d119      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c8>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	035b      	lsls	r3, r3, #13
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1c4>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	039b      	lsls	r3, r3, #14
 8001e74:	4013      	ands	r3, r2
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1c0>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	03db      	lsls	r3, r3, #15
 8001e80:	4013      	ands	r3, r2
 8001e82:	d001      	beq.n	8001e88 <HAL_ADC_ConfigChannel+0x1bc>
 8001e84:	2316      	movs	r3, #22
 8001e86:	e02c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e02a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e8c:	2315      	movs	r3, #21
 8001e8e:	e028      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e90:	2314      	movs	r3, #20
 8001e92:	e026      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e94:	2313      	movs	r3, #19
 8001e96:	e024      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e98:	2312      	movs	r3, #18
 8001e9a:	e022      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	e020      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	e01e      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	e01c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ea8:	230e      	movs	r3, #14
 8001eaa:	e01a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001eac:	230d      	movs	r3, #13
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	e016      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001eb4:	230b      	movs	r3, #11
 8001eb6:	e014      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001eb8:	230a      	movs	r3, #10
 8001eba:	e012      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ebc:	2309      	movs	r3, #9
 8001ebe:	e010      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	e00e      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	e00c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ec8:	2306      	movs	r3, #6
 8001eca:	e00a      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x216>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6852      	ldr	r2, [r2, #4]
 8001ee6:	201f      	movs	r0, #31
 8001ee8:	4002      	ands	r2, r0
 8001eea:	4093      	lsls	r3, r2
 8001eec:	000a      	movs	r2, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d808      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	001a      	movs	r2, r3
 8001f12:	f7ff f949 	bl	80011a8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	001a      	movs	r2, r3
 8001f24:	f7ff f990 	bl	8001248 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db00      	blt.n	8001f32 <HAL_ADC_ConfigChannel+0x266>
 8001f30:	e096      	b.n	8002060 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff f8e5 	bl	8001104 <LL_ADC_GetCommonPathInternalCh>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3c      	ldr	r2, [pc, #240]	@ (8002034 <HAL_ADC_ConfigChannel+0x368>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d123      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f50:	d11e      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	0412      	lsls	r2, r2, #16
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	4a35      	ldr	r2, [pc, #212]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	0010      	movs	r0, r2
 8001f60:	f7ff f8bc 	bl	80010dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001f64:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <HAL_ADC_ConfigChannel+0x36c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4934      	ldr	r1, [pc, #208]	@ (800203c <HAL_ADC_ConfigChannel+0x370>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe f8cc 	bl	8000108 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	001a      	movs	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f8e:	e067      	b.n	8002060 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_ADC_ConfigChannel+0x374>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d162      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	03db      	lsls	r3, r3, #15
 8001fa0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fa2:	d15d      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	03d2      	lsls	r2, r2, #15
 8001faa:	4313      	orrs	r3, r2
 8001fac:	4a20      	ldr	r2, [pc, #128]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001fae:	0019      	movs	r1, r3
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	f7ff f893 	bl	80010dc <LL_ADC_SetCommonPathInternalCh>
 8001fb6:	e053      	b.n	8002060 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	061b      	lsls	r3, r3, #24
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d004      	beq.n	8001fce <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fc8:	4a18      	ldr	r2, [pc, #96]	@ (800202c <HAL_ADC_ConfigChannel+0x360>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d107      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	0010      	movs	r0, r2
 8001fda:	f7ff f916 	bl	800120a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da3c      	bge.n	8002060 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7ff f88b 	bl	8001104 <LL_ADC_GetCommonPathInternalCh>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8002034 <HAL_ADC_ConfigChannel+0x368>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d108      	bne.n	800200e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_ADC_ConfigChannel+0x378>)
 8002000:	4013      	ands	r3, r2
 8002002:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f7ff f868 	bl	80010dc <LL_ADC_SetCommonPathInternalCh>
 800200c:	e028      	b.n	8002060 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a0b      	ldr	r2, [pc, #44]	@ (8002040 <HAL_ADC_ConfigChannel+0x374>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d123      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <HAL_ADC_ConfigChannel+0x37c>)
 800201c:	4013      	ands	r3, r2
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_ADC_ConfigChannel+0x364>)
 8002020:	0019      	movs	r1, r3
 8002022:	0010      	movs	r0, r2
 8002024:	f7ff f85a 	bl	80010dc <LL_ADC_SetCommonPathInternalCh>
 8002028:	e01a      	b.n	8002060 <HAL_ADC_ConfigChannel+0x394>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	80000004 	.word	0x80000004
 8002030:	40012708 	.word	0x40012708
 8002034:	a4000200 	.word	0xa4000200
 8002038:	20000004 	.word	0x20000004
 800203c:	00030d40 	.word	0x00030d40
 8002040:	a8000400 	.word	0xa8000400
 8002044:	ff7fffff 	.word	0xff7fffff
 8002048:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	2220      	movs	r2, #32
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002058:	2317      	movs	r3, #23
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2254      	movs	r2, #84	@ 0x54
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002068:	2317      	movs	r3, #23
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b006      	add	sp, #24
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)

08002078 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff f99d 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d02b      	beq.n	80020e6 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff f961 	bl	800135a <LL_ADC_IsDisableOngoing>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d104      	bne.n	80020a6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff f97d 	bl	80013a0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020a6:	f7ff f803 	bl	80010b0 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80020ae:	e014      	b.n	80020da <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020b0:	f7fe fffe 	bl	80010b0 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d90d      	bls.n	80020da <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	2210      	movs	r2, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	2201      	movs	r2, #1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e006      	b.n	80020e8 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	d1e4      	bne.n	80020b0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b004      	add	sp, #16
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff f919 	bl	8001338 <LL_ADC_IsEnabled>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d162      	bne.n	80021d0 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <ADC_Enable+0xec>)
 8002112:	4013      	ands	r3, r2
 8002114:	d00d      	beq.n	8002132 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	2210      	movs	r2, #16
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002126:	2201      	movs	r2, #1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e04f      	b.n	80021d2 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff f8da 	bl	80012f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800213c:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <ADC_Enable+0xf0>)
 800213e:	0018      	movs	r0, r3
 8002140:	f7fe ffe0 	bl	8001104 <LL_ADC_GetCommonPathInternalCh>
 8002144:	0002      	movs	r2, r0
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	4013      	ands	r3, r2
 800214c:	d00f      	beq.n	800216e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800214e:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <ADC_Enable+0xf4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4925      	ldr	r1, [pc, #148]	@ (80021e8 <ADC_Enable+0xf8>)
 8002154:	0018      	movs	r0, r3
 8002156:	f7fd ffd7 	bl	8000108 <__udivsi3>
 800215a:	0003      	movs	r3, r0
 800215c:	3301      	adds	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002160:	e002      	b.n	8002168 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3b01      	subs	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f9      	bne.n	8002162 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7e5b      	ldrb	r3, [r3, #25]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d02c      	beq.n	80021d0 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002176:	f7fe ff9b 	bl	80010b0 <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800217e:	e020      	b.n	80021c2 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff f8d7 	bl	8001338 <LL_ADC_IsEnabled>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d104      	bne.n	8002198 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff f8ac 	bl	80012f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002198:	f7fe ff8a 	bl	80010b0 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d90d      	bls.n	80021c2 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	2210      	movs	r2, #16
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2201      	movs	r2, #1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e007      	b.n	80021d2 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1d7      	bne.n	8002180 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	80000017 	.word	0x80000017
 80021e0:	40012708 	.word	0x40012708
 80021e4:	20000004 	.word	0x20000004
 80021e8:	00030d40 	.word	0x00030d40

080021ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff f8ae 	bl	800135a <LL_ADC_IsDisableOngoing>
 80021fe:	0003      	movs	r3, r0
 8002200:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff f896 	bl	8001338 <LL_ADC_IsEnabled>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d040      	beq.n	8002292 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d13d      	bne.n	8002292 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2205      	movs	r2, #5
 800221e:	4013      	ands	r3, r2
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10d      	bne.n	8002240 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff f873 	bl	8001314 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2203      	movs	r2, #3
 8002234:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002236:	f7fe ff3b 	bl	80010b0 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800223e:	e022      	b.n	8002286 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2210      	movs	r2, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e01b      	b.n	8002294 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225c:	f7fe ff28 	bl	80010b0 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d90d      	bls.n	8002286 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	2210      	movs	r2, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2201      	movs	r2, #1
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e006      	b.n	8002294 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d1e4      	bne.n	800225c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}

0800229c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	2250      	movs	r2, #80	@ 0x50
 80022b0:	4013      	ands	r3, r2
 80022b2:	d141      	bne.n	8002338 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	431a      	orrs	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe ff5d 	bl	8001186 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d02e      	beq.n	800232e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	7e9b      	ldrb	r3, [r3, #26]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d12a      	bne.n	800232e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d123      	bne.n	800232e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff f86a 	bl	80013c4 <LL_ADC_REG_IsConversionOngoing>
 80022f0:	1e03      	subs	r3, r0, #0
 80022f2:	d110      	bne.n	8002316 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	210c      	movs	r1, #12
 8002300:	438a      	bics	r2, r1
 8002302:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <ADC_DMAConvCplt+0xc4>)
 800230a:	4013      	ands	r3, r2
 800230c:	2201      	movs	r2, #1
 800230e:	431a      	orrs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	659a      	str	r2, [r3, #88]	@ 0x58
 8002314:	e00b      	b.n	800232e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	2220      	movs	r2, #32
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	2201      	movs	r2, #1
 8002328:	431a      	orrs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0018      	movs	r0, r3
 8002332:	f7fe f8b9 	bl	80004a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002336:	e00f      	b.n	8002358 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233c:	2210      	movs	r2, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d004      	beq.n	800234c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fcb9 	bl	8001cbc <HAL_ADC_ErrorCallback>
}
 800234a:	e005      	b.n	8002358 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	0010      	movs	r0, r2
 8002356:	4798      	blx	r3
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffffefe 	.word	0xfffffefe

08002364 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff fc91 	bl	8001c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}

08002382 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002394:	2240      	movs	r2, #64	@ 0x40
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	2204      	movs	r2, #4
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff fc86 	bl	8001cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	0002      	movs	r2, r0
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b7f      	cmp	r3, #127	@ 0x7f
 800240a:	d809      	bhi.n	8002420 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240c:	1dfb      	adds	r3, r7, #7
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	001a      	movs	r2, r3
 8002412:	231f      	movs	r3, #31
 8002414:	401a      	ands	r2, r3
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <__NVIC_EnableIRQ+0x30>)
 8002418:	2101      	movs	r1, #1
 800241a:	4091      	lsls	r1, r2
 800241c:	000a      	movs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002420:	46c0      	nop			@ (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	0002      	movs	r2, r0
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b7f      	cmp	r3, #127	@ 0x7f
 800243e:	d810      	bhi.n	8002462 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	001a      	movs	r2, r3
 8002446:	231f      	movs	r3, #31
 8002448:	4013      	ands	r3, r2
 800244a:	4908      	ldr	r1, [pc, #32]	@ (800246c <__NVIC_DisableIRQ+0x40>)
 800244c:	2201      	movs	r2, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	2280      	movs	r2, #128	@ 0x80
 8002454:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002456:	f3bf 8f4f 	dsb	sy
}
 800245a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800245c:	f3bf 8f6f 	isb	sy
}
 8002460:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	e000e100 	.word	0xe000e100

08002470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	0002      	movs	r2, r0
 8002478:	6039      	str	r1, [r7, #0]
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b7f      	cmp	r3, #127	@ 0x7f
 8002484:	d828      	bhi.n	80024d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002486:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <__NVIC_SetPriority+0xd4>)
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	33c0      	adds	r3, #192	@ 0xc0
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	589b      	ldr	r3, [r3, r2]
 8002496:	1dfa      	adds	r2, r7, #7
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	0011      	movs	r1, r2
 800249c:	2203      	movs	r2, #3
 800249e:	400a      	ands	r2, r1
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	21ff      	movs	r1, #255	@ 0xff
 80024a4:	4091      	lsls	r1, r2
 80024a6:	000a      	movs	r2, r1
 80024a8:	43d2      	mvns	r2, r2
 80024aa:	401a      	ands	r2, r3
 80024ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	401a      	ands	r2, r3
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	0018      	movs	r0, r3
 80024bc:	2303      	movs	r3, #3
 80024be:	4003      	ands	r3, r0
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c4:	481f      	ldr	r0, [pc, #124]	@ (8002544 <__NVIC_SetPriority+0xd4>)
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	430a      	orrs	r2, r1
 80024d0:	33c0      	adds	r3, #192	@ 0xc0
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024d6:	e031      	b.n	800253c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <__NVIC_SetPriority+0xd8>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	0019      	movs	r1, r3
 80024e0:	230f      	movs	r3, #15
 80024e2:	400b      	ands	r3, r1
 80024e4:	3b08      	subs	r3, #8
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3306      	adds	r3, #6
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1dfa      	adds	r2, r7, #7
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	0011      	movs	r1, r2
 80024f8:	2203      	movs	r2, #3
 80024fa:	400a      	ands	r2, r1
 80024fc:	00d2      	lsls	r2, r2, #3
 80024fe:	21ff      	movs	r1, #255	@ 0xff
 8002500:	4091      	lsls	r1, r2
 8002502:	000a      	movs	r2, r1
 8002504:	43d2      	mvns	r2, r2
 8002506:	401a      	ands	r2, r3
 8002508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	401a      	ands	r2, r3
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	2303      	movs	r3, #3
 800251a:	4003      	ands	r3, r0
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002520:	4809      	ldr	r0, [pc, #36]	@ (8002548 <__NVIC_SetPriority+0xd8>)
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	001c      	movs	r4, r3
 8002528:	230f      	movs	r3, #15
 800252a:	4023      	ands	r3, r4
 800252c:	3b08      	subs	r3, #8
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	430a      	orrs	r2, r1
 8002532:	3306      	adds	r3, #6
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	18c3      	adds	r3, r0, r3
 8002538:	3304      	adds	r3, #4
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	46c0      	nop			@ (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b003      	add	sp, #12
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	1e5a      	subs	r2, r3, #1
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	045b      	lsls	r3, r3, #17
 800255c:	429a      	cmp	r2, r3
 800255e:	d301      	bcc.n	8002564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002560:	2301      	movs	r3, #1
 8002562:	e010      	b.n	8002586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <SysTick_Config+0x44>)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	3a01      	subs	r2, #1
 800256a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256c:	2301      	movs	r3, #1
 800256e:	425b      	negs	r3, r3
 8002570:	2103      	movs	r1, #3
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff ff7c 	bl	8002470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <SysTick_Config+0x44>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <SysTick_Config+0x44>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	210f      	movs	r1, #15
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	1c02      	adds	r2, r0, #0
 80025a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	0011      	movs	r1, r2
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ff5d 	bl	8002470 <__NVIC_SetPriority>
}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	0002      	movs	r2, r0
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff11 	bl	80023f8 <__NVIC_EnableIRQ>
}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	0002      	movs	r2, r0
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff ff1b 	bl	800242c <__NVIC_DisableIRQ>
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff ff9f 	bl	800254c <SysTick_Config>
 800260e:	0003      	movs	r3, r0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e077      	b.n	800271a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3d      	ldr	r2, [pc, #244]	@ (8002724 <HAL_DMA_Init+0x10c>)
 8002630:	4694      	mov	ip, r2
 8002632:	4463      	add	r3, ip
 8002634:	2114      	movs	r1, #20
 8002636:	0018      	movs	r0, r3
 8002638:	f7fd fd66 	bl	8000108 <__udivsi3>
 800263c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800263e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2225      	movs	r2, #37	@ 0x25
 8002648:	2102      	movs	r1, #2
 800264a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4934      	ldr	r1, [pc, #208]	@ (8002728 <HAL_DMA_Init+0x110>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fa9d 	bl	8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	2380      	movs	r3, #128	@ 0x80
 80026a0:	01db      	lsls	r3, r3, #7
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d102      	bne.n	80026ac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b4:	21ff      	movs	r1, #255	@ 0xff
 80026b6:	400a      	ands	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d011      	beq.n	80026f0 <HAL_DMA_Init+0xd8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d80d      	bhi.n	80026f0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 faa8 	bl	8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	e008      	b.n	8002702 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2225      	movs	r2, #37	@ 0x25
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	@ 0x24
 8002714:	2100      	movs	r1, #0
 8002716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	bffdfff8 	.word	0xbffdfff8
 8002728:	ffff800f 	.word	0xffff800f

0800272c <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e066      	b.n	800280c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	438a      	bics	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a30      	ldr	r2, [pc, #192]	@ (8002814 <HAL_DMA_DeInit+0xe8>)
 8002754:	4694      	mov	ip, r2
 8002756:	4463      	add	r3, ip
 8002758:	2114      	movs	r1, #20
 800275a:	0018      	movs	r0, r3
 800275c:	f7fd fcd4 	bl	8000108 <__udivsi3>
 8002760:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002762:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <HAL_DMA_DeInit+0xec>)
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	221c      	movs	r2, #28
 800277a:	4013      	ands	r3, r2
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_DMA_DeInit+0xec>)
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fa23 	bl	8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800279e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_DMA_DeInit+0x9e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d80c      	bhi.n	80027ca <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fa3a 	bl	8002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027c8:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2225      	movs	r2, #37	@ 0x25
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2224      	movs	r2, #36	@ 0x24
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	bffdfff8 	.word	0xbffdfff8
 8002818:	40020000 	.word	0x40020000

0800281c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2317      	movs	r3, #23
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2224      	movs	r2, #36	@ 0x24
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_DMA_Start_IT+0x24>
 800283c:	2302      	movs	r3, #2
 800283e:	e070      	b.n	8002922 <HAL_DMA_Start_IT+0x106>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2224      	movs	r2, #36	@ 0x24
 8002844:	2101      	movs	r1, #1
 8002846:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2225      	movs	r2, #37	@ 0x25
 800284c:	5c9b      	ldrb	r3, [r3, r2]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d157      	bne.n	8002904 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2225      	movs	r2, #37	@ 0x25
 8002858:	2102      	movs	r1, #2
 800285a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	438a      	bics	r2, r1
 8002870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f96b 	bl	8002b54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	210e      	movs	r1, #14
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00f      	b.n	80028b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2104      	movs	r1, #4
 80028a4:	438a      	bics	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	210a      	movs	r1, #10
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	4013      	ands	r3, r2
 80028c4:	d008      	beq.n	80028d8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	2180      	movs	r1, #128	@ 0x80
 80028d2:	0049      	lsls	r1, r1, #1
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	0049      	lsls	r1, r1, #1
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e007      	b.n	8002914 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	2100      	movs	r1, #0
 800290a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800290c:	2317      	movs	r3, #23
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2224      	movs	r2, #36	@ 0x24
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]

  return status;
 800291c:	2317      	movs	r3, #23
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	781b      	ldrb	r3, [r3, #0]
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b006      	add	sp, #24
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e050      	b.n	80029e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2225      	movs	r2, #37	@ 0x25
 8002942:	5c9b      	ldrb	r3, [r3, r2]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d008      	beq.n	800295c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2204      	movs	r2, #4
 800294e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	@ 0x24
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e041      	b.n	80029e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	210e      	movs	r1, #14
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	491c      	ldr	r1, [pc, #112]	@ (80029e8 <HAL_DMA_Abort+0xbc>)
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_DMA_Abort+0xc0>)
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	221c      	movs	r2, #28
 8002996:	4013      	ands	r3, r2
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <HAL_DMA_Abort+0xc0>)
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029be:	490a      	ldr	r1, [pc, #40]	@ (80029e8 <HAL_DMA_Abort+0xbc>)
 80029c0:	400a      	ands	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2225      	movs	r2, #37	@ 0x25
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	@ 0x24
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	fffffeff 	.word	0xfffffeff
 80029ec:	40020000 	.word	0x40020000

080029f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80029f8:	4b55      	ldr	r3, [pc, #340]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	221c      	movs	r2, #28
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2204      	movs	r2, #4
 8002a10:	409a      	lsls	r2, r3
 8002a12:	0013      	movs	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x7a>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d023      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d107      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2104      	movs	r1, #4
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002a3e:	4b44      	ldr	r3, [pc, #272]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	221c      	movs	r2, #28
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	4b40      	ldr	r3, [pc, #256]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d100      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x6e>
 8002a5c:	e073      	b.n	8002b46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	0010      	movs	r0, r2
 8002a66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a68:	e06d      	b.n	8002b46 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	221c      	movs	r2, #28
 8002a70:	4013      	ands	r3, r2
 8002a72:	2202      	movs	r2, #2
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d02e      	beq.n	8002adc <HAL_DMA_IRQHandler+0xec>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d02a      	beq.n	8002adc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d10b      	bne.n	8002aaa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	210a      	movs	r1, #10
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2225      	movs	r2, #37	@ 0x25
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002aaa:	4b29      	ldr	r3, [pc, #164]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	221c      	movs	r2, #28
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03a      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ada:	e034      	b.n	8002b46 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	221c      	movs	r2, #28
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	d02b      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x158>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2208      	movs	r2, #8
 8002af4:	4013      	ands	r3, r2
 8002af6:	d027      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	210e      	movs	r1, #14
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	221c      	movs	r2, #28
 8002b12:	4013      	ands	r3, r2
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_DMA_IRQHandler+0x160>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2225      	movs	r2, #37	@ 0x25
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	@ 0x24
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	0010      	movs	r0, r2
 8002b44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	46c0      	nop			@ (mov r8, r8)
}
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40020000 	.word	0x40020000

08002b54 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002b7e:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <DMA_SetConfig+0x7c>)
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	221c      	movs	r2, #28
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <DMA_SetConfig+0x7c>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d108      	bne.n	8002bb6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb4:	e007      	b.n	8002bc6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	60da      	str	r2, [r3, #12]
}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	40020000 	.word	0x40020000

08002bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	23ff      	movs	r3, #255	@ 0xff
 8002be4:	4013      	ands	r3, r2
 8002be6:	3b08      	subs	r3, #8
 8002be8:	2114      	movs	r1, #20
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7fd fa8c 	bl	8000108 <__udivsi3>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002bfc:	4694      	mov	ip, r2
 8002bfe:	4463      	add	r3, ip
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	001a      	movs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	221c      	movs	r2, #28
 8002c12:	4013      	ands	r3, r2
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b004      	add	sp, #16
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	10008200 	.word	0x10008200
 8002c28:	40020880 	.word	0x40020880

08002c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	22ff      	movs	r2, #255	@ 0xff
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c42:	4694      	mov	ip, r2
 8002c44:	4463      	add	r3, ip
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	001a      	movs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	1000823f 	.word	0x1000823f
 8002c70:	40020940 	.word	0x40020940

08002c74 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c82:	e14d      	b.n	8002f20 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4091      	lsls	r1, r2
 8002c8e:	000a      	movs	r2, r1
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d100      	bne.n	8002c9c <HAL_GPIO_Init+0x28>
 8002c9a:	e13e      	b.n	8002f1a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x38>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d125      	bne.n	8002cf8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	58d3      	ldr	r3, [r2, r3]
 8002cb8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2107      	movs	r1, #7
 8002cdc:	400b      	ands	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	0013      	movs	r3, r2
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	6979      	ldr	r1, [r7, #20]
 8002cf6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	409a      	lsls	r2, r3
 8002d06:	0013      	movs	r3, r2
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	401a      	ands	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	0013      	movs	r3, r2
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d00b      	beq.n	8002d4c <HAL_GPIO_Init+0xd8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d007      	beq.n	8002d4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d40:	2b11      	cmp	r3, #17
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b12      	cmp	r3, #18
 8002d4a:	d130      	bne.n	8002dae <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	0013      	movs	r3, r2
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4013      	ands	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d82:	2201      	movs	r2, #1
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	409a      	lsls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	2201      	movs	r2, #1
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	0013      	movs	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d017      	beq.n	8002de6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	055b      	lsls	r3, r3, #21
 8002dee:	4013      	ands	r3, r2
 8002df0:	d100      	bne.n	8002df4 <HAL_GPIO_Init+0x180>
 8002df2:	e092      	b.n	8002f1a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002df4:	4a50      	ldr	r2, [pc, #320]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	589b      	ldr	r3, [r3, r2]
 8002e00:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2203      	movs	r2, #3
 8002e06:	4013      	ands	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	43da      	mvns	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	23a0      	movs	r3, #160	@ 0xa0
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x1d6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a45      	ldr	r2, [pc, #276]	@ (8002f3c <HAL_GPIO_Init+0x2c8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x1d2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a44      	ldr	r2, [pc, #272]	@ (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x1ce>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a43      	ldr	r2, [pc, #268]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x1ca>
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x1d8>
 8002e3e:	2306      	movs	r3, #6
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x1d8>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x1d8>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x1d8>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	2103      	movs	r1, #3
 8002e50:	400a      	ands	r2, r1
 8002e52:	00d2      	lsls	r2, r2, #3
 8002e54:	4093      	lsls	r3, r2
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e5c:	4936      	ldr	r1, [pc, #216]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3318      	adds	r3, #24
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002e6a:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	58d3      	ldr	r3, [r2, r3]
 8002e70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	4013      	ands	r3, r2
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002e90:	4929      	ldr	r1, [pc, #164]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e9a:	2384      	movs	r3, #132	@ 0x84
 8002e9c:	58d3      	ldr	r3, [r2, r3]
 8002e9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002ebe:	491e      	ldr	r1, [pc, #120]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002ec0:	2284      	movs	r2, #132	@ 0x84
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	035b      	lsls	r3, r3, #13
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002eea:	4b13      	ldr	r3, [pc, #76]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	039b      	lsls	r3, r3, #14
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	40da      	lsrs	r2, r3
 8002f28:	1e13      	subs	r3, r2, #0
 8002f2a:	d000      	beq.n	8002f2e <HAL_GPIO_Init+0x2ba>
 8002f2c:	e6aa      	b.n	8002c84 <HAL_GPIO_Init+0x10>
  }
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b006      	add	sp, #24
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021800 	.word	0x40021800
 8002f3c:	50000400 	.word	0x50000400
 8002f40:	50000800 	.word	0x50000800
 8002f44:	50001400 	.word	0x50001400

08002f48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002f56:	e0b4      	b.n	80030c2 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d100      	bne.n	8002f6c <HAL_GPIO_DeInit+0x24>
 8002f6a:	e0a7      	b.n	80030bc <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3318      	adds	r3, #24
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	589b      	ldr	r3, [r3, r2]
 8002f78:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	220f      	movs	r2, #15
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	23a0      	movs	r3, #160	@ 0xa0
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_DeInit+0x76>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a50      	ldr	r2, [pc, #320]	@ (80030dc <HAL_GPIO_DeInit+0x194>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_DeInit+0x72>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80030e0 <HAL_GPIO_DeInit+0x198>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_DeInit+0x6e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80030e4 <HAL_GPIO_DeInit+0x19c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_DeInit+0x6a>
 8002fae:	2305      	movs	r3, #5
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_DeInit+0x78>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e004      	b.n	8002fc0 <HAL_GPIO_DeInit+0x78>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_DeInit+0x78>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_GPIO_DeInit+0x78>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	00d2      	lsls	r2, r2, #3
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d136      	bne.n	800303e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	58d3      	ldr	r3, [r2, r3]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	43d2      	mvns	r2, r2
 8002fda:	493f      	ldr	r1, [pc, #252]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2280      	movs	r2, #128	@ 0x80
 8002fe0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002fe4:	2384      	movs	r3, #132	@ 0x84
 8002fe6:	58d3      	ldr	r3, [r2, r3]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	43d2      	mvns	r2, r2
 8002fec:	493a      	ldr	r1, [pc, #232]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2284      	movs	r2, #132	@ 0x84
 8002ff2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002ff4:	4b38      	ldr	r3, [pc, #224]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	4b36      	ldr	r3, [pc, #216]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003002:	4b35      	ldr	r3, [pc, #212]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43d9      	mvns	r1, r3
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 800300c:	400a      	ands	r2, r1
 800300e:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2203      	movs	r2, #3
 8003014:	4013      	ands	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	220f      	movs	r2, #15
 800301a:	409a      	lsls	r2, r3
 800301c:	0013      	movs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003020:	4a2d      	ldr	r2, [pc, #180]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3318      	adds	r3, #24
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	589a      	ldr	r2, [r3, r2]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	43d9      	mvns	r1, r3
 8003030:	4829      	ldr	r0, [pc, #164]	@ (80030d8 <HAL_GPIO_DeInit+0x190>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	400a      	ands	r2, r1
 8003038:	3318      	adds	r3, #24
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2103      	movs	r1, #3
 8003048:	4099      	lsls	r1, r3
 800304a:	000b      	movs	r3, r1
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	58d3      	ldr	r3, [r2, r3]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	2107      	movs	r1, #7
 8003062:	400a      	ands	r2, r1
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	210f      	movs	r1, #15
 8003068:	4091      	lsls	r1, r2
 800306a:	000a      	movs	r2, r1
 800306c:	43d1      	mvns	r1, r2
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	08d2      	lsrs	r2, r2, #3
 8003072:	4019      	ands	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	0052      	lsls	r2, r2, #1
 8003084:	2103      	movs	r1, #3
 8003086:	4091      	lsls	r1, r2
 8003088:	000a      	movs	r2, r1
 800308a:	43d2      	mvns	r2, r2
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2101      	movs	r1, #1
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4091      	lsls	r1, r2
 800309c:	000a      	movs	r2, r1
 800309e:	43d2      	mvns	r2, r2
 80030a0:	401a      	ands	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	0052      	lsls	r2, r2, #1
 80030ae:	2103      	movs	r1, #3
 80030b0:	4091      	lsls	r1, r2
 80030b2:	000a      	movs	r2, r1
 80030b4:	43d2      	mvns	r2, r2
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]
    }

    position++;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	40da      	lsrs	r2, r3
 80030c8:	1e13      	subs	r3, r2, #0
 80030ca:	d000      	beq.n	80030ce <HAL_GPIO_DeInit+0x186>
 80030cc:	e744      	b.n	8002f58 <HAL_GPIO_DeInit+0x10>
  }
}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b006      	add	sp, #24
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021800 	.word	0x40021800
 80030dc:	50000400 	.word	0x50000400
 80030e0:	50000800 	.word	0x50000800
 80030e4:	50001400 	.word	0x50001400

080030e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	000a      	movs	r2, r1
 80030f2:	1cbb      	adds	r3, r7, #2
 80030f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	1cba      	adds	r2, r7, #2
 80030fc:	8812      	ldrh	r2, [r2, #0]
 80030fe:	4013      	ands	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003102:	230f      	movs	r3, #15
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e003      	b.n	8003114 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	0002      	movs	r2, r0
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003130:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	1dba      	adds	r2, r7, #6
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	4013      	ands	r3, r2
 800313a:	d008      	beq.n	800314e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800313e:	1dba      	adds	r2, r7, #6
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003144:	1dbb      	adds	r3, r7, #6
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f815 	bl	8003178 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800314e:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	1dba      	adds	r2, r7, #6
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	4013      	ands	r3, r2
 8003158:	d008      	beq.n	800316c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800315c:	1dba      	adds	r2, r7, #6
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f810 	bl	800318c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021800 	.word	0x40021800

08003178 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	0002      	movs	r2, r0
 8003180:	1dbb      	adds	r3, r7, #6
 8003182:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003184:	46c0      	nop			@ (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	0002      	movs	r2, r0
 8003194:	1dbb      	adds	r3, r7, #6
 8003196:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1d0      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	d100      	bne.n	80031be <HAL_RCC_OscConfig+0x1e>
 80031bc:	e069      	b.n	8003292 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4bc8      	ldr	r3, [pc, #800]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2238      	movs	r2, #56	@ 0x38
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d105      	bne.n	80031da <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d15d      	bne.n	8003292 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1bc      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_OscConfig+0x56>
 80031e6:	4bbe      	ldr	r3, [pc, #760]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4bbd      	ldr	r3, [pc, #756]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	0249      	lsls	r1, r1, #9
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e020      	b.n	8003238 <HAL_RCC_OscConfig+0x98>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	23a0      	movs	r3, #160	@ 0xa0
 80031fc:	02db      	lsls	r3, r3, #11
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10e      	bne.n	8003220 <HAL_RCC_OscConfig+0x80>
 8003202:	4bb7      	ldr	r3, [pc, #732]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4bb6      	ldr	r3, [pc, #728]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	02c9      	lsls	r1, r1, #11
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	4bb3      	ldr	r3, [pc, #716]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4bb2      	ldr	r3, [pc, #712]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003216:	2180      	movs	r1, #128	@ 0x80
 8003218:	0249      	lsls	r1, r1, #9
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x98>
 8003220:	4baf      	ldr	r3, [pc, #700]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4bae      	ldr	r3, [pc, #696]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003226:	49af      	ldr	r1, [pc, #700]	@ (80034e4 <HAL_RCC_OscConfig+0x344>)
 8003228:	400a      	ands	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	4bac      	ldr	r3, [pc, #688]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4bab      	ldr	r3, [pc, #684]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003232:	49ad      	ldr	r1, [pc, #692]	@ (80034e8 <HAL_RCC_OscConfig+0x348>)
 8003234:	400a      	ands	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d014      	beq.n	800326a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd ff36 	bl	80010b0 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800324a:	f7fd ff31 	bl	80010b0 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b64      	cmp	r3, #100	@ 0x64
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e17b      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325c:	4ba0      	ldr	r3, [pc, #640]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	029b      	lsls	r3, r3, #10
 8003264:	4013      	ands	r3, r2
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0xaa>
 8003268:	e013      	b.n	8003292 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fd ff21 	bl	80010b0 <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003274:	f7fd ff1c 	bl	80010b0 <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e166      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003286:	4b96      	ldr	r3, [pc, #600]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	029b      	lsls	r3, r3, #10
 800328e:	4013      	ands	r3, r2
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_RCC_OscConfig+0xfe>
 800329c:	e086      	b.n	80033ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b90      	ldr	r3, [pc, #576]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2238      	movs	r2, #56	@ 0x38
 80032a4:	4013      	ands	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d12f      	bne.n	800330e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e14c      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b89      	ldr	r3, [pc, #548]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a8b      	ldr	r2, [pc, #556]	@ (80034ec <HAL_RCC_OscConfig+0x34c>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	021a      	lsls	r2, r3, #8
 80032ca:	4b85      	ldr	r3, [pc, #532]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032d6:	4b82      	ldr	r3, [pc, #520]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a85      	ldr	r2, [pc, #532]	@ (80034f0 <HAL_RCC_OscConfig+0x350>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	4b7e      	ldr	r3, [pc, #504]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80032ea:	4b7d      	ldr	r3, [pc, #500]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0adb      	lsrs	r3, r3, #11
 80032f0:	2207      	movs	r2, #7
 80032f2:	4013      	ands	r3, r2
 80032f4:	4a7f      	ldr	r2, [pc, #508]	@ (80034f4 <HAL_RCC_OscConfig+0x354>)
 80032f6:	40da      	lsrs	r2, r3
 80032f8:	4b7f      	ldr	r3, [pc, #508]	@ (80034f8 <HAL_RCC_OscConfig+0x358>)
 80032fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032fc:	4b7f      	ldr	r3, [pc, #508]	@ (80034fc <HAL_RCC_OscConfig+0x35c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0018      	movs	r0, r3
 8003302:	f7fd fe79 	bl	8000ff8 <HAL_InitTick>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d050      	beq.n	80033ac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e122      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d030      	beq.n	8003378 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003316:	4b72      	ldr	r3, [pc, #456]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a75      	ldr	r2, [pc, #468]	@ (80034f0 <HAL_RCC_OscConfig+0x350>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b6e      	ldr	r3, [pc, #440]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800332a:	4b6d      	ldr	r3, [pc, #436]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b6c      	ldr	r3, [pc, #432]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	0049      	lsls	r1, r1, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd feba 	bl	80010b0 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003342:	f7fd feb5 	bl	80010b0 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0ff      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b62      	ldr	r3, [pc, #392]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4013      	ands	r3, r2
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a61      	ldr	r2, [pc, #388]	@ (80034ec <HAL_RCC_OscConfig+0x34c>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	4b5b      	ldr	r3, [pc, #364]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	e019      	b.n	80033ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b58      	ldr	r3, [pc, #352]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800337e:	4960      	ldr	r1, [pc, #384]	@ (8003500 <HAL_RCC_OscConfig+0x360>)
 8003380:	400a      	ands	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fe94 	bl	80010b0 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800338e:	f7fd fe8f 	bl	80010b0 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0d9      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4013      	ands	r3, r2
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2208      	movs	r2, #8
 80033b2:	4013      	ands	r3, r2
 80033b4:	d042      	beq.n	800343c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2238      	movs	r2, #56	@ 0x38
 80033bc:	4013      	ands	r3, r2
 80033be:	2b18      	cmp	r3, #24
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d138      	bne.n	800343c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0c2      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80033d6:	4b42      	ldr	r3, [pc, #264]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80033d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033da:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80033dc:	2101      	movs	r1, #1
 80033de:	430a      	orrs	r2, r1
 80033e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fe65 	bl	80010b0 <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033ec:	f7fd fe60 	bl	80010b0 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0aa      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80033fe:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003402:	2202      	movs	r2, #2
 8003404:	4013      	ands	r3, r2
 8003406:	d0f1      	beq.n	80033ec <HAL_RCC_OscConfig+0x24c>
 8003408:	e018      	b.n	800343c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800340a:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800340c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800340e:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd fe4b 	bl	80010b0 <HAL_GetTick>
 800341a:	0003      	movs	r3, r0
 800341c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003420:	f7fd fe46 	bl	80010b0 <HAL_GetTick>
 8003424:	0002      	movs	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e090      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d1f1      	bne.n	8003420 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2204      	movs	r2, #4
 8003442:	4013      	ands	r3, r2
 8003444:	d100      	bne.n	8003448 <HAL_RCC_OscConfig+0x2a8>
 8003446:	e084      	b.n	8003552 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003450:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2238      	movs	r2, #56	@ 0x38
 8003456:	4013      	ands	r3, r2
 8003458:	2b20      	cmp	r3, #32
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d000      	beq.n	8003466 <HAL_RCC_OscConfig+0x2c6>
 8003464:	e075      	b.n	8003552 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e074      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d106      	bne.n	8003480 <HAL_RCC_OscConfig+0x2e0>
 8003472:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003474:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003478:	2101      	movs	r1, #1
 800347a:	430a      	orrs	r2, r1
 800347c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800347e:	e01c      	b.n	80034ba <HAL_RCC_OscConfig+0x31a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b05      	cmp	r3, #5
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x302>
 8003488:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800348a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800348c:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800348e:	2104      	movs	r1, #4
 8003490:	430a      	orrs	r2, r1
 8003492:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 8003496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003498:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 800349a:	2101      	movs	r1, #1
 800349c:	430a      	orrs	r2, r1
 800349e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_OscConfig+0x31a>
 80034a2:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80034a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	438a      	bics	r2, r1
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ae:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80034b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034b2:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_OscConfig+0x340>)
 80034b4:	2104      	movs	r1, #4
 80034b6:	438a      	bics	r2, r1
 80034b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d028      	beq.n	8003514 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fdf5 	bl	80010b0 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80034ca:	e01d      	b.n	8003508 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fdf0 	bl	80010b0 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003504 <HAL_RCC_OscConfig+0x364>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d915      	bls.n	8003508 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e039      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	fffeffff 	.word	0xfffeffff
 80034e8:	fffbffff 	.word	0xfffbffff
 80034ec:	ffff80ff 	.word	0xffff80ff
 80034f0:	ffffc7ff 	.word	0xffffc7ff
 80034f4:	02dc6c00 	.word	0x02dc6c00
 80034f8:	20000004 	.word	0x20000004
 80034fc:	2000000c 	.word	0x2000000c
 8003500:	fffffeff 	.word	0xfffffeff
 8003504:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003508:	4b14      	ldr	r3, [pc, #80]	@ (800355c <HAL_RCC_OscConfig+0x3bc>)
 800350a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350c:	2202      	movs	r2, #2
 800350e:	4013      	ands	r3, r2
 8003510:	d0dc      	beq.n	80034cc <HAL_RCC_OscConfig+0x32c>
 8003512:	e013      	b.n	800353c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fd fdcc 	bl	80010b0 <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fd fdc7 	bl	80010b0 <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <HAL_RCC_OscConfig+0x3c0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e010      	b.n	8003554 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_OscConfig+0x3bc>)
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800353c:	230f      	movs	r3, #15
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_OscConfig+0x3bc>)
 8003548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800354a:	4b04      	ldr	r3, [pc, #16]	@ (800355c <HAL_RCC_OscConfig+0x3bc>)
 800354c:	4905      	ldr	r1, [pc, #20]	@ (8003564 <HAL_RCC_OscConfig+0x3c4>)
 800354e:	400a      	ands	r2, r1
 8003550:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b006      	add	sp, #24
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000
 8003560:	00001388 	.word	0x00001388
 8003564:	efffffff 	.word	0xefffffff

08003568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0e9      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2207      	movs	r2, #7
 8003582:	4013      	ands	r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d91e      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b73      	ldr	r3, [pc, #460]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2207      	movs	r2, #7
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	4b70      	ldr	r3, [pc, #448]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800359c:	f7fd fd88 	bl	80010b0 <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035a4:	e009      	b.n	80035ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035a6:	f7fd fd83 	bl	80010b0 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	4a6a      	ldr	r2, [pc, #424]	@ (800375c <HAL_RCC_ClockConfig+0x1f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0ca      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035ba:	4b67      	ldr	r3, [pc, #412]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2207      	movs	r2, #7
 80035c0:	4013      	ands	r3, r2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1ee      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	d017      	beq.n	8003602 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2204      	movs	r2, #4
 80035d8:	4013      	ands	r3, r2
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035dc:	4b60      	ldr	r3, [pc, #384]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a60      	ldr	r2, [pc, #384]	@ (8003764 <HAL_RCC_ClockConfig+0x1fc>)
 80035e2:	401a      	ands	r2, r3
 80035e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 80035e6:	21b0      	movs	r1, #176	@ 0xb0
 80035e8:	0109      	lsls	r1, r1, #4
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003768 <HAL_RCC_ClockConfig+0x200>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b58      	ldr	r3, [pc, #352]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	d055      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800360c:	4b54      	ldr	r3, [pc, #336]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	221c      	movs	r2, #28
 8003612:	4393      	bics	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003628:	4b4d      	ldr	r3, [pc, #308]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	@ 0x80
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	4013      	ands	r3, r2
 8003632:	d11f      	bne.n	8003674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e08b      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4013      	ands	r3, r2
 800364a:	d113      	bne.n	8003674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e07f      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d106      	bne.n	8003666 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003658:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d108      	bne.n	8003674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e074      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003666:	4b3e      	ldr	r3, [pc, #248]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	2202      	movs	r2, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e06d      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003674:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2207      	movs	r2, #7
 800367a:	4393      	bics	r3, r2
 800367c:	0019      	movs	r1, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fd fd12 	bl	80010b0 <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003690:	e009      	b.n	80036a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003692:	f7fd fd0d 	bl	80010b0 <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	4a2f      	ldr	r2, [pc, #188]	@ (800375c <HAL_RCC_ClockConfig+0x1f4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e054      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2238      	movs	r2, #56	@ 0x38
 80036ac:	401a      	ands	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1ec      	bne.n	8003692 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b8:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2207      	movs	r2, #7
 80036be:	4013      	ands	r3, r2
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d21e      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2207      	movs	r2, #7
 80036cc:	4393      	bics	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036d8:	f7fd fcea 	bl	80010b0 <HAL_GetTick>
 80036dc:	0003      	movs	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036e0:	e009      	b.n	80036f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036e2:	f7fd fce5 	bl	80010b0 <HAL_GetTick>
 80036e6:	0002      	movs	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_RCC_ClockConfig+0x1f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e02c      	b.n	8003750 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036f6:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2207      	movs	r2, #7
 80036fc:	4013      	ands	r3, r2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d1ee      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2204      	movs	r2, #4
 800370a:	4013      	ands	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800370e:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4a16      	ldr	r2, [pc, #88]	@ (800376c <HAL_RCC_ClockConfig+0x204>)
 8003714:	4013      	ands	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003722:	f000 f82b 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8003726:	0001      	movs	r1, r0
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCC_ClockConfig+0x1f8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	220f      	movs	r2, #15
 8003730:	401a      	ands	r2, r3
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <HAL_RCC_ClockConfig+0x208>)
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	58d3      	ldr	r3, [r2, r3]
 8003738:	221f      	movs	r2, #31
 800373a:	4013      	ands	r3, r2
 800373c:	000a      	movs	r2, r1
 800373e:	40da      	lsrs	r2, r3
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <HAL_RCC_ClockConfig+0x20c>)
 8003742:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_RCC_ClockConfig+0x210>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0018      	movs	r0, r3
 800374a:	f7fd fc55 	bl	8000ff8 <HAL_InitTick>
 800374e:	0003      	movs	r3, r0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	b004      	add	sp, #16
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40022000 	.word	0x40022000
 800375c:	00001388 	.word	0x00001388
 8003760:	40021000 	.word	0x40021000
 8003764:	ffff84ff 	.word	0xffff84ff
 8003768:	fffff0ff 	.word	0xfffff0ff
 800376c:	ffff8fff 	.word	0xffff8fff
 8003770:	08004fb8 	.word	0x08004fb8
 8003774:	20000004 	.word	0x20000004
 8003778:	2000000c 	.word	0x2000000c

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003782:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2238      	movs	r2, #56	@ 0x38
 8003788:	4013      	ands	r3, r2
 800378a:	d10f      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x78>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0adb      	lsrs	r3, r3, #11
 8003792:	2207      	movs	r2, #7
 8003794:	4013      	ands	r3, r2
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	4815      	ldr	r0, [pc, #84]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80037a2:	f7fc fcb1 	bl	8000108 <__udivsi3>
 80037a6:	0003      	movs	r3, r0
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	e01e      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2238      	movs	r2, #56	@ 0x38
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d102      	bne.n	80037be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037b8:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x80>)
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2238      	movs	r2, #56	@ 0x38
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d103      	bne.n	80037d2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	e00b      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2238      	movs	r2, #56	@ 0x38
 80037d8:	4013      	ands	r3, r2
 80037da:	2b18      	cmp	r3, #24
 80037dc:	d103      	bne.n	80037e6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037de:	23fa      	movs	r3, #250	@ 0xfa
 80037e0:	01db      	lsls	r3, r3, #7
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	e001      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80037ea:	687b      	ldr	r3, [r7, #4]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	02dc6c00 	.word	0x02dc6c00
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003808:	2313      	movs	r3, #19
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003810:	2312      	movs	r3, #18
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	@ 0x80
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	4013      	ands	r3, r2
 8003822:	d100      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003824:	e079      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2011      	movs	r0, #17
 8003828:	183b      	adds	r3, r7, r0
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b64      	ldr	r3, [pc, #400]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	4013      	ands	r3, r2
 8003838:	d110      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4b61      	ldr	r3, [pc, #388]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800383c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800383e:	4b60      	ldr	r3, [pc, #384]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003840:	2180      	movs	r1, #128	@ 0x80
 8003842:	0549      	lsls	r1, r1, #21
 8003844:	430a      	orrs	r2, r1
 8003846:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003848:	4b5d      	ldr	r3, [pc, #372]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800384a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	055b      	lsls	r3, r3, #21
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	183b      	adds	r3, r7, r0
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800385c:	4b58      	ldr	r3, [pc, #352]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800385e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003860:	23c0      	movs	r3, #192	@ 0xc0
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4013      	ands	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d019      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d014      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003878:	4b51      	ldr	r3, [pc, #324]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800387a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387c:	4a51      	ldr	r2, [pc, #324]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800387e:	4013      	ands	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	4b4f      	ldr	r3, [pc, #316]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003886:	4b4e      	ldr	r3, [pc, #312]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003888:	2180      	movs	r1, #128	@ 0x80
 800388a:	0249      	lsls	r1, r1, #9
 800388c:	430a      	orrs	r2, r1
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003890:	4b4b      	ldr	r3, [pc, #300]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003894:	4b4a      	ldr	r3, [pc, #296]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003896:	494c      	ldr	r1, [pc, #304]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003898:	400a      	ands	r2, r1
 800389a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800389c:	4b48      	ldr	r3, [pc, #288]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2201      	movs	r2, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	d016      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fd fc01 	bl	80010b0 <HAL_GetTick>
 80038ae:	0003      	movs	r3, r0
 80038b0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80038b2:	e00c      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fbfc 	bl	80010b0 <HAL_GetTick>
 80038b8:	0002      	movs	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	4a43      	ldr	r2, [pc, #268]	@ (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d904      	bls.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80038c4:	2313      	movs	r3, #19
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2203      	movs	r2, #3
 80038ca:	701a      	strb	r2, [r3, #0]
          break;
 80038cc:	e004      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80038ce:	4b3c      	ldr	r3, [pc, #240]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d0ed      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80038d8:	2313      	movs	r3, #19
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e2:	4b37      	ldr	r3, [pc, #220]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e6:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038f2:	430a      	orrs	r2, r1
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038f6:	e005      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	2312      	movs	r3, #18
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2213      	movs	r2, #19
 80038fe:	18ba      	adds	r2, r7, r2
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003904:	2311      	movs	r3, #17
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b2c      	ldr	r3, [pc, #176]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003912:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003914:	492e      	ldr	r1, [pc, #184]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	400a      	ands	r2, r1
 8003918:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003924:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	2203      	movs	r2, #3
 800392a:	4393      	bics	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	4b23      	ldr	r3, [pc, #140]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003934:	430a      	orrs	r2, r1
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2240      	movs	r2, #64	@ 0x40
 800393e:	4013      	ands	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003942:	4b1f      	ldr	r3, [pc, #124]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003948:	4013      	ands	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003952:	430a      	orrs	r2, r1
 8003954:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	01db      	lsls	r3, r3, #7
 800395e:	4013      	ands	r3, r2
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003962:	4b17      	ldr	r3, [pc, #92]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	0899      	lsrs	r1, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	4b14      	ldr	r3, [pc, #80]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003970:	430a      	orrs	r2, r1
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4013      	ands	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003986:	4013      	ands	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003990:	430a      	orrs	r2, r1
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	da09      	bge.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800399c:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	22e0      	movs	r2, #224	@ 0xe0
 80039a2:	4393      	bics	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
  }
  return status;
 80039b0:	2312      	movs	r3, #18
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	781b      	ldrb	r3, [r3, #0]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	40021000 	.word	0x40021000
 80039c4:	fffffcff 	.word	0xfffffcff
 80039c8:	fffeffff 	.word	0xfffeffff
 80039cc:	00001388 	.word	0x00001388
 80039d0:	efffffff 	.word	0xefffffff
 80039d4:	ffffcfff 	.word	0xffffcfff
 80039d8:	ffff3fff 	.word	0xffff3fff

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e04a      	b.n	8003a84 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	223d      	movs	r2, #61	@ 0x3d
 80039f2:	5c9b      	ldrb	r3, [r3, r2]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	223c      	movs	r2, #60	@ 0x3c
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7fd f88f 	bl	8000b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	223d      	movs	r2, #61	@ 0x3d
 8003a0e:	2102      	movs	r1, #2
 8003a10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f000 fdab 	bl	8004578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2248      	movs	r2, #72	@ 0x48
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	223e      	movs	r2, #62	@ 0x3e
 8003a2e:	2101      	movs	r1, #1
 8003a30:	5499      	strb	r1, [r3, r2]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	223f      	movs	r2, #63	@ 0x3f
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2240      	movs	r2, #64	@ 0x40
 8003a3e:	2101      	movs	r1, #1
 8003a40:	5499      	strb	r1, [r3, r2]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2241      	movs	r2, #65	@ 0x41
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2242      	movs	r2, #66	@ 0x42
 8003a4e:	2101      	movs	r1, #1
 8003a50:	5499      	strb	r1, [r3, r2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2243      	movs	r2, #67	@ 0x43
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2244      	movs	r2, #68	@ 0x44
 8003a5e:	2101      	movs	r1, #1
 8003a60:	5499      	strb	r1, [r3, r2]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2245      	movs	r2, #69	@ 0x45
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2246      	movs	r2, #70	@ 0x46
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2247      	movs	r2, #71	@ 0x47
 8003a76:	2101      	movs	r1, #1
 8003a78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	223d      	movs	r2, #61	@ 0x3d
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	223d      	movs	r2, #61	@ 0x3d
 8003a98:	2102      	movs	r1, #2
 8003a9a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a27      	ldr	r2, [pc, #156]	@ (8003b40 <HAL_TIM_Base_DeInit+0xb4>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_TIM_Base_DeInit+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a25      	ldr	r2, [pc, #148]	@ (8003b44 <HAL_TIM_Base_DeInit+0xb8>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_Base_DeInit+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fd f8e0 	bl	8000c8c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2248      	movs	r2, #72	@ 0x48
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	223e      	movs	r2, #62	@ 0x3e
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5499      	strb	r1, [r3, r2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	223f      	movs	r2, #63	@ 0x3f
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2240      	movs	r2, #64	@ 0x40
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5499      	strb	r1, [r3, r2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2241      	movs	r2, #65	@ 0x41
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2242      	movs	r2, #66	@ 0x42
 8003af8:	2100      	movs	r1, #0
 8003afa:	5499      	strb	r1, [r3, r2]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2243      	movs	r2, #67	@ 0x43
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2244      	movs	r2, #68	@ 0x44
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2245      	movs	r2, #69	@ 0x45
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2246      	movs	r2, #70	@ 0x46
 8003b18:	2100      	movs	r1, #0
 8003b1a:	5499      	strb	r1, [r3, r2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2247      	movs	r2, #71	@ 0x47
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	223d      	movs	r2, #61	@ 0x3d
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	223c      	movs	r2, #60	@ 0x3c
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	00001111 	.word	0x00001111
 8003b44:	00000444 	.word	0x00000444

08003b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	223d      	movs	r2, #61	@ 0x3d
 8003b54:	5c9b      	ldrb	r3, [r3, r2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e02f      	b.n	8003bc0 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	223d      	movs	r2, #61	@ 0x3d
 8003b64:	2102      	movs	r1, #2
 8003b66:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a16      	ldr	r2, [pc, #88]	@ (8003bc8 <HAL_TIM_Base_Start+0x80>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d004      	beq.n	8003b7c <HAL_TIM_Base_Start+0x34>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <HAL_TIM_Base_Start+0x84>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d116      	bne.n	8003baa <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <HAL_TIM_Base_Start+0x88>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d016      	beq.n	8003bbc <HAL_TIM_Base_Start+0x74>
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	025b      	lsls	r3, r3, #9
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d011      	beq.n	8003bbc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	e008      	b.n	8003bbc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b004      	add	sp, #16
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	00010007 	.word	0x00010007

08003bd4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <HAL_TIM_Base_Stop+0x44>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <HAL_TIM_Base_Stop+0x30>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <HAL_TIM_Base_Stop+0x48>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_Base_Stop+0x30>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2101      	movs	r1, #1
 8003c00:	438a      	bics	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	223d      	movs	r2, #61	@ 0x3d
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b002      	add	sp, #8
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	00001111 	.word	0x00001111
 8003c1c:	00000444 	.word	0x00000444

08003c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223d      	movs	r2, #61	@ 0x3d
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d001      	beq.n	8003c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e037      	b.n	8003ca8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	223d      	movs	r2, #61	@ 0x3d
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a16      	ldr	r2, [pc, #88]	@ (8003cb0 <HAL_TIM_Base_Start_IT+0x90>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x44>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <HAL_TIM_Base_Start_IT+0x94>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d116      	bne.n	8003c92 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	4a13      	ldr	r2, [pc, #76]	@ (8003cb8 <HAL_TIM_Base_Start_IT+0x98>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d016      	beq.n	8003ca4 <HAL_TIM_Base_Start_IT+0x84>
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	2380      	movs	r3, #128	@ 0x80
 8003c7a:	025b      	lsls	r3, r3, #9
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d011      	beq.n	8003ca4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	e008      	b.n	8003ca4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e000      	b.n	8003ca6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	00010007 	.word	0x00010007

08003cbc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <HAL_TIM_Base_Stop_IT+0x54>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <HAL_TIM_Base_Stop_IT+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8003d14 <HAL_TIM_Base_Stop_IT+0x58>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_Base_Stop_IT+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	223d      	movs	r2, #61	@ 0x3d
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	00001111 	.word	0x00001111
 8003d14:	00000444 	.word	0x00000444

08003d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e04a      	b.n	8003dc0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223d      	movs	r2, #61	@ 0x3d
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	223c      	movs	r2, #60	@ 0x3c
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 f841 	bl	8003dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	223d      	movs	r2, #61	@ 0x3d
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	0019      	movs	r1, r3
 8003d58:	0010      	movs	r0, r2
 8003d5a:	f000 fc0d 	bl	8004578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2248      	movs	r2, #72	@ 0x48
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223e      	movs	r2, #62	@ 0x3e
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223f      	movs	r2, #63	@ 0x3f
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2240      	movs	r2, #64	@ 0x40
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2241      	movs	r2, #65	@ 0x41
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2242      	movs	r2, #66	@ 0x42
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2243      	movs	r2, #67	@ 0x43
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2244      	movs	r2, #68	@ 0x44
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2245      	movs	r2, #69	@ 0x45
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2246      	movs	r2, #70	@ 0x46
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2247      	movs	r2, #71	@ 0x47
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	223d      	movs	r2, #61	@ 0x3d
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dd0:	46c0      	nop			@ (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d108      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x22>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223e      	movs	r2, #62	@ 0x3e
 8003dec:	5c9b      	ldrb	r3, [r3, r2]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	1e5a      	subs	r2, r3, #1
 8003df4:	4193      	sbcs	r3, r2
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e037      	b.n	8003e6a <HAL_TIM_PWM_Start+0x92>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d108      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x3a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	223f      	movs	r2, #63	@ 0x3f
 8003e04:	5c9b      	ldrb	r3, [r3, r2]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	4193      	sbcs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e02b      	b.n	8003e6a <HAL_TIM_PWM_Start+0x92>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d108      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x52>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2240      	movs	r2, #64	@ 0x40
 8003e1c:	5c9b      	ldrb	r3, [r3, r2]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	1e5a      	subs	r2, r3, #1
 8003e24:	4193      	sbcs	r3, r2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e01f      	b.n	8003e6a <HAL_TIM_PWM_Start+0x92>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d108      	bne.n	8003e42 <HAL_TIM_PWM_Start+0x6a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2241      	movs	r2, #65	@ 0x41
 8003e34:	5c9b      	ldrb	r3, [r3, r2]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	4193      	sbcs	r3, r2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e013      	b.n	8003e6a <HAL_TIM_PWM_Start+0x92>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d108      	bne.n	8003e5a <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2242      	movs	r2, #66	@ 0x42
 8003e4c:	5c9b      	ldrb	r3, [r3, r2]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	1e5a      	subs	r2, r3, #1
 8003e54:	4193      	sbcs	r3, r2
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e007      	b.n	8003e6a <HAL_TIM_PWM_Start+0x92>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2243      	movs	r2, #67	@ 0x43
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	4193      	sbcs	r3, r2
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e07b      	b.n	8003f6a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0xaa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223e      	movs	r2, #62	@ 0x3e
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	5499      	strb	r1, [r3, r2]
 8003e80:	e023      	b.n	8003eca <HAL_TIM_PWM_Start+0xf2>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xba>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	223f      	movs	r2, #63	@ 0x3f
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	5499      	strb	r1, [r3, r2]
 8003e90:	e01b      	b.n	8003eca <HAL_TIM_PWM_Start+0xf2>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xca>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2240      	movs	r2, #64	@ 0x40
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	5499      	strb	r1, [r3, r2]
 8003ea0:	e013      	b.n	8003eca <HAL_TIM_PWM_Start+0xf2>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xda>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2241      	movs	r2, #65	@ 0x41
 8003eac:	2102      	movs	r1, #2
 8003eae:	5499      	strb	r1, [r3, r2]
 8003eb0:	e00b      	b.n	8003eca <HAL_TIM_PWM_Start+0xf2>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xea>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2242      	movs	r2, #66	@ 0x42
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	5499      	strb	r1, [r3, r2]
 8003ec0:	e003      	b.n	8003eca <HAL_TIM_PWM_Start+0xf2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2243      	movs	r2, #67	@ 0x43
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 fef4 	bl	8004cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a25      	ldr	r2, [pc, #148]	@ (8003f74 <HAL_TIM_PWM_Start+0x19c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x11e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <HAL_TIM_PWM_Start+0x1a0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIM_PWM_Start+0x11e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	@ (8003f7c <HAL_TIM_PWM_Start+0x1a4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_Start+0x122>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_TIM_PWM_Start+0x124>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2180      	movs	r1, #128	@ 0x80
 8003f0c:	0209      	lsls	r1, r1, #8
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a17      	ldr	r2, [pc, #92]	@ (8003f74 <HAL_TIM_PWM_Start+0x19c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIM_PWM_Start+0x14e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_TIM_PWM_Start+0x1a8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d116      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <HAL_TIM_PWM_Start+0x1ac>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d016      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18e>
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d011      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e000      	b.n	8003f68 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f66:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40000400 	.word	0x40000400
 8003f84:	00010007 	.word	0x00010007

08003f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d021      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2202      	movs	r2, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d01d      	beq.n	8003fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	4252      	negs	r2, r2
 8003fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 faba 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e007      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 faad 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 fab9 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d01e      	beq.n	800403a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2205      	movs	r2, #5
 8004002:	4252      	negs	r2, r2
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	23c0      	movs	r3, #192	@ 0xc0
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4013      	ands	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 fa93 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 8004022:	e007      	b.n	8004034 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 fa86 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	0018      	movs	r0, r3
 8004030:	f000 fa92 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2208      	movs	r2, #8
 800403e:	4013      	ands	r3, r2
 8004040:	d021      	beq.n	8004086 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2208      	movs	r2, #8
 8004046:	4013      	ands	r3, r2
 8004048:	d01d      	beq.n	8004086 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2209      	movs	r2, #9
 8004050:	4252      	negs	r2, r2
 8004052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2204      	movs	r2, #4
 8004058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2203      	movs	r2, #3
 8004062:	4013      	ands	r3, r2
 8004064:	d004      	beq.n	8004070 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fa6d 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 800406e:	e007      	b.n	8004080 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0018      	movs	r0, r3
 8004074:	f000 fa60 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 fa6c 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2210      	movs	r2, #16
 800408a:	4013      	ands	r3, r2
 800408c:	d022      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2210      	movs	r2, #16
 8004092:	4013      	ands	r3, r2
 8004094:	d01e      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2211      	movs	r2, #17
 800409c:	4252      	negs	r2, r2
 800409e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2208      	movs	r2, #8
 80040a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	23c0      	movs	r3, #192	@ 0xc0
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4013      	ands	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fa46 	bl	8004548 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e007      	b.n	80040ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 fa39 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 fa45 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2201      	movs	r2, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	d00c      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d008      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2202      	movs	r2, #2
 80040ea:	4252      	negs	r2, r2
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fc fe19 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2280      	movs	r2, #128	@ 0x80
 80040fa:	4013      	ands	r3, r2
 80040fc:	d00c      	beq.n	8004118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2280      	movs	r2, #128	@ 0x80
 8004102:	4013      	ands	r3, r2
 8004104:	d008      	beq.n	8004118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2281      	movs	r2, #129	@ 0x81
 800410c:	4252      	negs	r2, r2
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 ff08 	bl	8004f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4013      	ands	r3, r2
 8004120:	d00b      	beq.n	800413a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2280      	movs	r2, #128	@ 0x80
 8004126:	4013      	ands	r3, r2
 8004128:	d007      	beq.n	800413a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	@ (8004188 <HAL_TIM_IRQHandler+0x200>)
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 feff 	bl	8004f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2240      	movs	r2, #64	@ 0x40
 800413e:	4013      	ands	r3, r2
 8004140:	d00c      	beq.n	800415c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2240      	movs	r2, #64	@ 0x40
 8004146:	4013      	ands	r3, r2
 8004148:	d008      	beq.n	800415c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2241      	movs	r2, #65	@ 0x41
 8004150:	4252      	negs	r2, r2
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fa06 	bl	8004568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2220      	movs	r2, #32
 8004160:	4013      	ands	r3, r2
 8004162:	d00c      	beq.n	800417e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	4013      	ands	r3, r2
 800416a:	d008      	beq.n	800417e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2221      	movs	r2, #33	@ 0x21
 8004172:	4252      	negs	r2, r2
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 fecd 	bl	8004f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b004      	add	sp, #16
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	fffffeff 	.word	0xfffffeff

0800418c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2317      	movs	r3, #23
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	223c      	movs	r2, #60	@ 0x3c
 80041a4:	5c9b      	ldrb	r3, [r3, r2]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0e5      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	223c      	movs	r2, #60	@ 0x3c
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b14      	cmp	r3, #20
 80041ba:	d900      	bls.n	80041be <HAL_TIM_PWM_ConfigChannel+0x32>
 80041bc:	e0d1      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	009a      	lsls	r2, r3, #2
 80041c2:	4b70      	ldr	r3, [pc, #448]	@ (8004384 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fa3c 	bl	8004650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2108      	movs	r1, #8
 80041e4:	430a      	orrs	r2, r1
 80041e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2104      	movs	r1, #4
 80041f4:	438a      	bics	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	619a      	str	r2, [r3, #24]
      break;
 800420a:	e0af      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f000 fa9b 	bl	8004750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2180      	movs	r1, #128	@ 0x80
 8004226:	0109      	lsls	r1, r1, #4
 8004228:	430a      	orrs	r2, r1
 800422a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4954      	ldr	r1, [pc, #336]	@ (8004388 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004238:	400a      	ands	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6999      	ldr	r1, [r3, #24]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	619a      	str	r2, [r3, #24]
      break;
 8004250:	e08c      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f000 faf6 	bl	800484c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2108      	movs	r1, #8
 800426c:	430a      	orrs	r2, r1
 800426e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2104      	movs	r1, #4
 800427c:	438a      	bics	r2, r1
 800427e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69d9      	ldr	r1, [r3, #28]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	61da      	str	r2, [r3, #28]
      break;
 8004292:	e06b      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f000 fb57 	bl	8004950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2180      	movs	r1, #128	@ 0x80
 80042ae:	0109      	lsls	r1, r1, #4
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4932      	ldr	r1, [pc, #200]	@ (8004388 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69d9      	ldr	r1, [r3, #28]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	61da      	str	r2, [r3, #28]
      break;
 80042d8:	e048      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0011      	movs	r1, r2
 80042e2:	0018      	movs	r0, r3
 80042e4:	f000 fb98 	bl	8004a18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2108      	movs	r1, #8
 80042f4:	430a      	orrs	r2, r1
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2104      	movs	r1, #4
 8004304:	438a      	bics	r2, r1
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800431a:	e027      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	0011      	movs	r1, r2
 8004324:	0018      	movs	r0, r3
 8004326:	f000 fbd1 	bl	8004acc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2180      	movs	r1, #128	@ 0x80
 8004336:	0109      	lsls	r1, r1, #4
 8004338:	430a      	orrs	r2, r1
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4910      	ldr	r1, [pc, #64]	@ (8004388 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004348:	400a      	ands	r2, r1
 800434a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	021a      	lsls	r2, r3, #8
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004360:	e004      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004362:	2317      	movs	r3, #23
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
      break;
 800436a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	223c      	movs	r2, #60	@ 0x3c
 8004370:	2100      	movs	r1, #0
 8004372:	5499      	strb	r1, [r3, r2]

  return status;
 8004374:	2317      	movs	r3, #23
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	781b      	ldrb	r3, [r3, #0]
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b006      	add	sp, #24
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	08004ff8 	.word	0x08004ff8
 8004388:	fffffbff 	.word	0xfffffbff

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	230f      	movs	r3, #15
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223c      	movs	r2, #60	@ 0x3c
 80043a2:	5c9b      	ldrb	r3, [r3, r2]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_ConfigClockSource+0x20>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e0bc      	b.n	8004526 <HAL_TIM_ConfigClockSource+0x19a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	223c      	movs	r2, #60	@ 0x3c
 80043b0:	2101      	movs	r1, #1
 80043b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223d      	movs	r2, #61	@ 0x3d
 80043b8:	2102      	movs	r1, #2
 80043ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a5a      	ldr	r2, [pc, #360]	@ (8004530 <HAL_TIM_ConfigClockSource+0x1a4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a59      	ldr	r2, [pc, #356]	@ (8004534 <HAL_TIM_ConfigClockSource+0x1a8>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2280      	movs	r2, #128	@ 0x80
 80043e2:	0192      	lsls	r2, r2, #6
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d040      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xde>
 80043e8:	2280      	movs	r2, #128	@ 0x80
 80043ea:	0192      	lsls	r2, r2, #6
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d900      	bls.n	80043f2 <HAL_TIM_ConfigClockSource+0x66>
 80043f0:	e088      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	0152      	lsls	r2, r2, #5
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d100      	bne.n	80043fc <HAL_TIM_ConfigClockSource+0x70>
 80043fa:	e088      	b.n	800450e <HAL_TIM_ConfigClockSource+0x182>
 80043fc:	2280      	movs	r2, #128	@ 0x80
 80043fe:	0152      	lsls	r2, r2, #5
 8004400:	4293      	cmp	r3, r2
 8004402:	d900      	bls.n	8004406 <HAL_TIM_ConfigClockSource+0x7a>
 8004404:	e07e      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 8004406:	2b70      	cmp	r3, #112	@ 0x70
 8004408:	d018      	beq.n	800443c <HAL_TIM_ConfigClockSource+0xb0>
 800440a:	d900      	bls.n	800440e <HAL_TIM_ConfigClockSource+0x82>
 800440c:	e07a      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 800440e:	2b60      	cmp	r3, #96	@ 0x60
 8004410:	d04f      	beq.n	80044b2 <HAL_TIM_ConfigClockSource+0x126>
 8004412:	d900      	bls.n	8004416 <HAL_TIM_ConfigClockSource+0x8a>
 8004414:	e076      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 8004416:	2b50      	cmp	r3, #80	@ 0x50
 8004418:	d03b      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x106>
 800441a:	d900      	bls.n	800441e <HAL_TIM_ConfigClockSource+0x92>
 800441c:	e072      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d057      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0x146>
 8004422:	d900      	bls.n	8004426 <HAL_TIM_ConfigClockSource+0x9a>
 8004424:	e06e      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 8004426:	2b30      	cmp	r3, #48	@ 0x30
 8004428:	d063      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x166>
 800442a:	d86b      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d060      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x166>
 8004430:	d868      	bhi.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d05d      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x166>
 8004436:	2b10      	cmp	r3, #16
 8004438:	d05b      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0x166>
 800443a:	e063      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800444c:	f000 fc18 	bl	8004c80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2277      	movs	r2, #119	@ 0x77
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
      break;
 8004468:	e052      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447a:	f000 fc01 	bl	8004c80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2180      	movs	r1, #128	@ 0x80
 800448a:	01c9      	lsls	r1, r1, #7
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
      break;
 8004490:	e03e      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449e:	001a      	movs	r2, r3
 80044a0:	f000 fb72 	bl	8004b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2150      	movs	r1, #80	@ 0x50
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 fbcc 	bl	8004c48 <TIM_ITRx_SetConfig>
      break;
 80044b0:	e02e      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044be:	001a      	movs	r2, r3
 80044c0:	f000 fb90 	bl	8004be4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2160      	movs	r1, #96	@ 0x60
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fbbc 	bl	8004c48 <TIM_ITRx_SetConfig>
      break;
 80044d0:	e01e      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044de:	001a      	movs	r2, r3
 80044e0:	f000 fb52 	bl	8004b88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2140      	movs	r1, #64	@ 0x40
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 fbac 	bl	8004c48 <TIM_ITRx_SetConfig>
      break;
 80044f0:	e00e      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0019      	movs	r1, r3
 80044fc:	0010      	movs	r0, r2
 80044fe:	f000 fba3 	bl	8004c48 <TIM_ITRx_SetConfig>
      break;
 8004502:	e005      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004504:	230f      	movs	r3, #15
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
      break;
 800450c:	e000      	b.n	8004510 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800450e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	223d      	movs	r2, #61	@ 0x3d
 8004514:	2101      	movs	r1, #1
 8004516:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	223c      	movs	r2, #60	@ 0x3c
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

  return status;
 8004520:	230f      	movs	r3, #15
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	ffceff88 	.word	0xffceff88
 8004534:	ffff00ff 	.word	0xffff00ff

08004538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}

08004578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <TIM_Base_SetConfig+0xc0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x20>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <TIM_Base_SetConfig+0xc4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2270      	movs	r2, #112	@ 0x70
 800459c:	4393      	bics	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <TIM_Base_SetConfig+0xc0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <TIM_Base_SetConfig+0x5a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a21      	ldr	r2, [pc, #132]	@ (800463c <TIM_Base_SetConfig+0xc4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_Base_SetConfig+0x5a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <TIM_Base_SetConfig+0xc8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_Base_SetConfig+0x5a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004644 <TIM_Base_SetConfig+0xcc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_Base_SetConfig+0x5a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004648 <TIM_Base_SetConfig+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d108      	bne.n	80045e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <TIM_Base_SetConfig+0xd4>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2280      	movs	r2, #128	@ 0x80
 80045e8:	4393      	bics	r3, r2
 80045ea:	001a      	movs	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a0a      	ldr	r2, [pc, #40]	@ (8004638 <TIM_Base_SetConfig+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0xaa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a0b      	ldr	r2, [pc, #44]	@ (8004644 <TIM_Base_SetConfig+0xcc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0xaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a0a      	ldr	r2, [pc, #40]	@ (8004648 <TIM_Base_SetConfig+0xd0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d103      	bne.n	800462a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	615a      	str	r2, [r3, #20]
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	b004      	add	sp, #16
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400
 8004640:	40002000 	.word	0x40002000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800
 800464c:	fffffcff 	.word	0xfffffcff

08004650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	2201      	movs	r2, #1
 8004666:	4393      	bics	r3, r2
 8004668:	001a      	movs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a2e      	ldr	r2, [pc, #184]	@ (8004738 <TIM_OC1_SetConfig+0xe8>)
 800467e:	4013      	ands	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2203      	movs	r2, #3
 8004686:	4393      	bics	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2202      	movs	r2, #2
 8004698:	4393      	bics	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a24      	ldr	r2, [pc, #144]	@ (800473c <TIM_OC1_SetConfig+0xec>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_OC1_SetConfig+0x6e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <TIM_OC1_SetConfig+0xf0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC1_SetConfig+0x6e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <TIM_OC1_SetConfig+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2208      	movs	r2, #8
 80046c2:	4393      	bics	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2204      	movs	r2, #4
 80046d4:	4393      	bics	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <TIM_OC1_SetConfig+0xec>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_OC1_SetConfig+0xa0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a17      	ldr	r2, [pc, #92]	@ (8004740 <TIM_OC1_SetConfig+0xf0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC1_SetConfig+0xa0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a16      	ldr	r2, [pc, #88]	@ (8004744 <TIM_OC1_SetConfig+0xf4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <TIM_OC1_SetConfig+0xf8>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4a14      	ldr	r2, [pc, #80]	@ (800474c <TIM_OC1_SetConfig+0xfc>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	fffeff8f 	.word	0xfffeff8f
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800
 8004748:	fffffeff 	.word	0xfffffeff
 800474c:	fffffdff 	.word	0xfffffdff

08004750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	2210      	movs	r2, #16
 8004766:	4393      	bics	r3, r2
 8004768:	001a      	movs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a2c      	ldr	r2, [pc, #176]	@ (8004830 <TIM_OC2_SetConfig+0xe0>)
 800477e:	4013      	ands	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a2b      	ldr	r2, [pc, #172]	@ (8004834 <TIM_OC2_SetConfig+0xe4>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2220      	movs	r2, #32
 800479a:	4393      	bics	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a22      	ldr	r2, [pc, #136]	@ (8004838 <TIM_OC2_SetConfig+0xe8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	4393      	bics	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2240      	movs	r2, #64	@ 0x40
 80047ca:	4393      	bics	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <TIM_OC2_SetConfig+0xe8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_OC2_SetConfig+0x96>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a18      	ldr	r2, [pc, #96]	@ (800483c <TIM_OC2_SetConfig+0xec>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_OC2_SetConfig+0x96>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <TIM_OC2_SetConfig+0xf0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d113      	bne.n	800480e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <TIM_OC2_SetConfig+0xf4>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <TIM_OC2_SetConfig+0xf8>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b006      	add	sp, #24
 800482e:	bd80      	pop	{r7, pc}
 8004830:	feff8fff 	.word	0xfeff8fff
 8004834:	fffffcff 	.word	0xfffffcff
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800
 8004844:	fffffbff 	.word	0xfffffbff
 8004848:	fffff7ff 	.word	0xfffff7ff

0800484c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4a31      	ldr	r2, [pc, #196]	@ (8004928 <TIM_OC3_SetConfig+0xdc>)
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a2d      	ldr	r2, [pc, #180]	@ (800492c <TIM_OC3_SetConfig+0xe0>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2203      	movs	r2, #3
 8004880:	4393      	bics	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4a27      	ldr	r2, [pc, #156]	@ (8004930 <TIM_OC3_SetConfig+0xe4>)
 8004892:	4013      	ands	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a23      	ldr	r2, [pc, #140]	@ (8004934 <TIM_OC3_SetConfig+0xe8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10d      	bne.n	80048c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4a22      	ldr	r2, [pc, #136]	@ (8004938 <TIM_OC3_SetConfig+0xec>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <TIM_OC3_SetConfig+0xf0>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <TIM_OC3_SetConfig+0xe8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_OC3_SetConfig+0x92>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004940 <TIM_OC3_SetConfig+0xf4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_OC3_SetConfig+0x92>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <TIM_OC3_SetConfig+0xf8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d113      	bne.n	8004906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <TIM_OC3_SetConfig+0xfc>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4a18      	ldr	r2, [pc, #96]	@ (800494c <TIM_OC3_SetConfig+0x100>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	46c0      	nop			@ (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b006      	add	sp, #24
 8004926:	bd80      	pop	{r7, pc}
 8004928:	fffffeff 	.word	0xfffffeff
 800492c:	fffeff8f 	.word	0xfffeff8f
 8004930:	fffffdff 	.word	0xfffffdff
 8004934:	40012c00 	.word	0x40012c00
 8004938:	fffff7ff 	.word	0xfffff7ff
 800493c:	fffffbff 	.word	0xfffffbff
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800
 8004948:	ffffefff 	.word	0xffffefff
 800494c:	ffffdfff 	.word	0xffffdfff

08004950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4a24      	ldr	r2, [pc, #144]	@ (80049f8 <TIM_OC4_SetConfig+0xa8>)
 8004966:	401a      	ands	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a20      	ldr	r2, [pc, #128]	@ (80049fc <TIM_OC4_SetConfig+0xac>)
 800497c:	4013      	ands	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a1f      	ldr	r2, [pc, #124]	@ (8004a00 <TIM_OC4_SetConfig+0xb0>)
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <TIM_OC4_SetConfig+0xb4>)
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	031b      	lsls	r3, r3, #12
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	@ (8004a08 <TIM_OC4_SetConfig+0xb8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_OC4_SetConfig+0x70>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	@ (8004a0c <TIM_OC4_SetConfig+0xbc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC4_SetConfig+0x70>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <TIM_OC4_SetConfig+0xc0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d109      	bne.n	80049d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4a14      	ldr	r2, [pc, #80]	@ (8004a14 <TIM_OC4_SetConfig+0xc4>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	019b      	lsls	r3, r3, #6
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b006      	add	sp, #24
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	ffffefff 	.word	0xffffefff
 80049fc:	feff8fff 	.word	0xfeff8fff
 8004a00:	fffffcff 	.word	0xfffffcff
 8004a04:	ffffdfff 	.word	0xffffdfff
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	ffffbfff 	.word	0xffffbfff

08004a18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	@ (8004ab4 <TIM_OC5_SetConfig+0x9c>)
 8004a2e:	401a      	ands	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <TIM_OC5_SetConfig+0xa0>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <TIM_OC5_SetConfig+0xa4>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <TIM_OC5_SetConfig+0xa8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_OC5_SetConfig+0x66>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a14      	ldr	r2, [pc, #80]	@ (8004ac4 <TIM_OC5_SetConfig+0xac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_OC5_SetConfig+0x66>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a13      	ldr	r2, [pc, #76]	@ (8004ac8 <TIM_OC5_SetConfig+0xb0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d109      	bne.n	8004a92 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab4 <TIM_OC5_SetConfig+0x9c>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b006      	add	sp, #24
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	fffeffff 	.word	0xfffeffff
 8004ab8:	fffeff8f 	.word	0xfffeff8f
 8004abc:	fffdffff 	.word	0xfffdffff
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <TIM_OC6_SetConfig+0xa0>)
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <TIM_OC6_SetConfig+0xa4>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b74 <TIM_OC6_SetConfig+0xa8>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	051b      	lsls	r3, r3, #20
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <TIM_OC6_SetConfig+0xac>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_OC6_SetConfig+0x68>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a15      	ldr	r2, [pc, #84]	@ (8004b7c <TIM_OC6_SetConfig+0xb0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC6_SetConfig+0x68>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <TIM_OC6_SetConfig+0xb4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d109      	bne.n	8004b48 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <TIM_OC6_SetConfig+0xb8>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b006      	add	sp, #24
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	ffefffff 	.word	0xffefffff
 8004b70:	feff8fff 	.word	0xfeff8fff
 8004b74:	ffdfffff 	.word	0xffdfffff
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800
 8004b84:	fffbffff 	.word	0xfffbffff

08004b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	22f0      	movs	r2, #240	@ 0xf0
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	220a      	movs	r2, #10
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	46c0      	nop			@ (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b006      	add	sp, #24
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	4393      	bics	r3, r2
 8004bfe:	001a      	movs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <TIM_TI2_ConfigInputStage+0x60>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	22a0      	movs	r2, #160	@ 0xa0
 8004c20:	4393      	bics	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b006      	add	sp, #24
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	ffff0fff 	.word	0xffff0fff

08004c48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <TIM_ITRx_SetConfig+0x34>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	2207      	movs	r2, #7
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	609a      	str	r2, [r3, #8]
}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	ffcfff8f 	.word	0xffcfff8f

08004c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <TIM_ETR_SetConfig+0x3c>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	46c0      	nop			@ (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	ffff00ff 	.word	0xffff00ff

08004cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	221f      	movs	r2, #31
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	0013      	movs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	43d2      	mvns	r2, r2
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	211f      	movs	r1, #31
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4099      	lsls	r1, r3
 8004cf6:	000b      	movs	r3, r1
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b006      	add	sp, #24
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	223c      	movs	r2, #60	@ 0x3c
 8004d16:	5c9b      	ldrb	r3, [r3, r2]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e04a      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	223c      	movs	r2, #60	@ 0x3c
 8004d24:	2101      	movs	r1, #1
 8004d26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	223d      	movs	r2, #61	@ 0x3d
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2270      	movs	r2, #112	@ 0x70
 8004d60:	4393      	bics	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a10      	ldr	r2, [pc, #64]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2280      	movs	r2, #128	@ 0x80
 8004d8e:	4393      	bics	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	223d      	movs	r2, #61	@ 0x3d
 8004da8:	2101      	movs	r1, #1
 8004daa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	223c      	movs	r2, #60	@ 0x3c
 8004db0:	2100      	movs	r1, #0
 8004db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	ff0fffff 	.word	0xff0fffff
 8004dc8:	40000400 	.word	0x40000400

08004dcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	223c      	movs	r2, #60	@ 0x3c
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e079      	b.n	8004edc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223c      	movs	r2, #60	@ 0x3c
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	22ff      	movs	r2, #255	@ 0xff
 8004df4:	4393      	bics	r3, r2
 8004df6:	001a      	movs	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a38      	ldr	r2, [pc, #224]	@ (8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004e04:	401a      	ands	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a35      	ldr	r2, [pc, #212]	@ (8004ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004e12:	401a      	ands	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4a33      	ldr	r2, [pc, #204]	@ (8004eec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004e20:	401a      	ands	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a30      	ldr	r2, [pc, #192]	@ (8004ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004e2e:	401a      	ands	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004e3c:	401a      	ands	r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004e58:	401a      	ands	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a25      	ldr	r2, [pc, #148]	@ (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d106      	bne.n	8004e7c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a24      	ldr	r2, [pc, #144]	@ (8004f04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e72:	401a      	ands	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1f      	ldr	r2, [pc, #124]	@ (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d121      	bne.n	8004eca <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	051b      	lsls	r3, r3, #20
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004ea8:	401a      	ands	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a12      	ldr	r2, [pc, #72]	@ (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d106      	bne.n	8004eca <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	223c      	movs	r2, #60	@ 0x3c
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b004      	add	sp, #16
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	fffffcff 	.word	0xfffffcff
 8004ee8:	fffffbff 	.word	0xfffffbff
 8004eec:	fffff7ff 	.word	0xfffff7ff
 8004ef0:	ffffefff 	.word	0xffffefff
 8004ef4:	ffffdfff 	.word	0xffffdfff
 8004ef8:	ffffbfff 	.word	0xffffbfff
 8004efc:	fff0ffff 	.word	0xfff0ffff
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	efffffff 	.word	0xefffffff
 8004f08:	ff0fffff 	.word	0xff0fffff
 8004f0c:	feffffff 	.word	0xfeffffff
 8004f10:	fdffffff 	.word	0xfdffffff
 8004f14:	dfffffff 	.word	0xdfffffff

08004f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f20:	46c0      	nop			@ (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f40:	46c0      	nop			@ (mov r8, r8)
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b002      	add	sp, #8
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <memset>:
 8004f48:	0003      	movs	r3, r0
 8004f4a:	1882      	adds	r2, r0, r2
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	4c0c      	ldr	r4, [pc, #48]	@ (8004f90 <__libc_init_array+0x38>)
 8004f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f94 <__libc_init_array+0x3c>)
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	2600      	movs	r6, #0
 8004f6a:	f000 f819 	bl	8004fa0 <_init>
 8004f6e:	4c0a      	ldr	r4, [pc, #40]	@ (8004f98 <__libc_init_array+0x40>)
 8004f70:	4d0a      	ldr	r5, [pc, #40]	@ (8004f9c <__libc_init_array+0x44>)
 8004f72:	1b64      	subs	r4, r4, r5
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	00b3      	lsls	r3, r6, #2
 8004f7e:	58eb      	ldr	r3, [r5, r3]
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	00b3      	lsls	r3, r6, #2
 8004f88:	58eb      	ldr	r3, [r5, r3]
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	0800504c 	.word	0x0800504c
 8004f94:	0800504c 	.word	0x0800504c
 8004f98:	08005050 	.word	0x08005050
 8004f9c:	0800504c 	.word	0x0800504c

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
