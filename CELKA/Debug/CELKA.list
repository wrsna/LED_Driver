
CELKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004d1c  08004d1c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d1c  08004d1c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004d24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000010  08004d34  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004d34  00006230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d165  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fa  00000000  00000000  0001319d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00015598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a15  00000000  00000000  000162b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001454f  00000000  00000000  00016ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107d5  00000000  00000000  0002b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fe6c  00000000  00000000  0003b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb85d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  000bb8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000be6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c70 	.word	0x08004c70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004c70 	.word	0x08004c70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 fcf2 	bl	8004c18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000234:	4b38      	ldr	r3, [pc, #224]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000236:	4a39      	ldr	r2, [pc, #228]	@ (800031c <MX_ADC1_Init+0xfc>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800023a:	4b37      	ldr	r3, [pc, #220]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800023c:	22c0      	movs	r2, #192	@ 0xc0
 800023e:	0612      	lsls	r2, r2, #24
 8000240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000242:	4b35      	ldr	r3, [pc, #212]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b33      	ldr	r3, [pc, #204]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800024e:	4b32      	ldr	r3, [pc, #200]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000250:	2280      	movs	r2, #128	@ 0x80
 8000252:	0392      	lsls	r2, r2, #14
 8000254:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000256:	4b30      	ldr	r3, [pc, #192]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000258:	2208      	movs	r2, #8
 800025a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800025c:	4b2e      	ldr	r3, [pc, #184]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000262:	4b2d      	ldr	r3, [pc, #180]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000268:	4b2b      	ldr	r3, [pc, #172]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800026e:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000270:	2202      	movs	r2, #2
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b28      	ldr	r3, [pc, #160]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000276:	2220      	movs	r2, #32
 8000278:	2100      	movs	r1, #0
 800027a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800027c:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800027e:	2298      	movs	r2, #152	@ 0x98
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000284:	4b24      	ldr	r3, [pc, #144]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000286:	2280      	movs	r2, #128	@ 0x80
 8000288:	00d2      	lsls	r2, r2, #3
 800028a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800028c:	4b22      	ldr	r3, [pc, #136]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800028e:	222c      	movs	r2, #44	@ 0x2c
 8000290:	2101      	movs	r1, #1
 8000292:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000294:	4b20      	ldr	r3, [pc, #128]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000296:	2200      	movs	r2, #0
 8000298:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_7CYCLES_5;
 800029a:	4b1f      	ldr	r3, [pc, #124]	@ (8000318 <MX_ADC1_Init+0xf8>)
 800029c:	2202      	movs	r2, #2
 800029e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_7CYCLES_5;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <MX_ADC1_Init+0xf8>)
 80002a2:	2202      	movs	r2, #2
 80002a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80002a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000318 <MX_ADC1_Init+0xf8>)
 80002a8:	223c      	movs	r2, #60	@ 0x3c
 80002aa:	2100      	movs	r1, #0
 80002ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <MX_ADC1_Init+0xf8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_ADC1_Init+0xf8>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f87c 	bl	80013b4 <HAL_ADC_Init>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 fa24 	bl	800070c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <MX_ADC1_Init+0x100>)
 80002c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d6:	1d3a      	adds	r2, r7, #4
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_ADC1_Init+0xf8>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fbbb 	bl	8001a58 <HAL_ADC_ConfigChannel>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80002e6:	f000 fa11 	bl	800070c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <MX_ADC1_Init+0x104>)
 80002ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2204      	movs	r2, #4
 80002f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <MX_ADC1_Init+0x108>)
 80002fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	1d3a      	adds	r2, r7, #4
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_ADC1_Init+0xf8>)
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fba8 	bl	8001a58 <HAL_ADC_ConfigChannel>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 800030c:	f000 f9fe 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b004      	add	sp, #16
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000002c 	.word	0x2000002c
 800031c:	40012400 	.word	0x40012400
 8000320:	30001000 	.word	0x30001000
 8000324:	20000100 	.word	0x20000100
 8000328:	7fffff04 	.word	0x7fffff04

0800032c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b091      	sub	sp, #68	@ 0x44
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000334:	232c      	movs	r3, #44	@ 0x2c
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	0018      	movs	r0, r3
 800033a:	2314      	movs	r3, #20
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f004 fc6a 	bl	8004c18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	2410      	movs	r4, #16
 8000346:	193b      	adds	r3, r7, r4
 8000348:	0018      	movs	r0, r3
 800034a:	231c      	movs	r3, #28
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f004 fc62 	bl	8004c18 <memset>
  if(adcHandle->Instance==ADC1)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a38      	ldr	r2, [pc, #224]	@ (800043c <HAL_ADC_MspInit+0x110>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d16a      	bne.n	8000434 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2280      	movs	r2, #128	@ 0x80
 8000362:	01d2      	lsls	r2, r2, #7
 8000364:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	f003 f8ae 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000378:	f000 f9c8 	bl	800070c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800037c:	4b30      	ldr	r3, [pc, #192]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 800037e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000380:	4b2f      	ldr	r3, [pc, #188]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 8000382:	2180      	movs	r1, #128	@ 0x80
 8000384:	0349      	lsls	r1, r1, #13
 8000386:	430a      	orrs	r2, r1
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40
 800038a:	4b2d      	ldr	r3, [pc, #180]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 800038c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800038e:	2380      	movs	r3, #128	@ 0x80
 8000390:	035b      	lsls	r3, r3, #13
 8000392:	4013      	ands	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b29      	ldr	r3, [pc, #164]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 800039a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800039c:	4b28      	ldr	r3, [pc, #160]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 800039e:	2101      	movs	r1, #1
 80003a0:	430a      	orrs	r2, r1
 80003a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80003a4:	4b26      	ldr	r3, [pc, #152]	@ (8000440 <HAL_ADC_MspInit+0x114>)
 80003a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003a8:	2201      	movs	r2, #1
 80003aa:	4013      	ands	r3, r2
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_BAT_Pin|ADC1_TEMP_Pin;
 80003b0:	212c      	movs	r1, #44	@ 0x2c
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2288      	movs	r2, #136	@ 0x88
 80003b6:	0152      	lsls	r2, r2, #5
 80003b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2203      	movs	r2, #3
 80003be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	187a      	adds	r2, r7, r1
 80003c8:	23a0      	movs	r3, #160	@ 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 faf6 	bl	80029c0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA8);
 80003d4:	23c0      	movs	r3, #192	@ 0xc0
 80003d6:	039b      	lsls	r3, r3, #14
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fe65 	bl	80010a8 <HAL_SYSCFG_SetPinBinding>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003e0:	4a19      	ldr	r2, [pc, #100]	@ (8000448 <HAL_ADC_MspInit+0x11c>)
 80003e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80003e4:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003e6:	2205      	movs	r2, #5
 80003e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003ea:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	0092      	lsls	r2, r2, #2
 8000402:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 8000406:	2280      	movs	r2, #128	@ 0x80
 8000408:	0112      	lsls	r2, r2, #4
 800040a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800040c:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 800040e:	2220      	movs	r2, #32
 8000410:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000418:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 800041a:	0018      	movs	r0, r3
 800041c:	f001 ffa2 	bl	8002364 <HAL_DMA_Init>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000424:	f000 f972 	bl	800070c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a06      	ldr	r2, [pc, #24]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 800042c:	651a      	str	r2, [r3, #80]	@ 0x50
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <HAL_ADC_MspInit+0x118>)
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b011      	add	sp, #68	@ 0x44
 800043a:	bd90      	pop	{r4, r7, pc}
 800043c:	40012400 	.word	0x40012400
 8000440:	40021000 	.word	0x40021000
 8000444:	20000090 	.word	0x20000090
 8000448:	40020008 	.word	0x40020008

0800044c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <HAL_ADC_MspDeInit+0x40>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d112      	bne.n	8000484 <HAL_ADC_MspDeInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_ADC_MspDeInit+0x44>)
 8000460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <HAL_ADC_MspDeInit+0x44>)
 8000464:	490b      	ldr	r1, [pc, #44]	@ (8000494 <HAL_ADC_MspDeInit+0x48>)
 8000466:	400a      	ands	r2, r1
 8000468:	641a      	str	r2, [r3, #64]	@ 0x40

    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    HAL_GPIO_DeInit(GPIOA, ADC1_BAT_Pin|ADC1_TEMP_Pin);
 800046a:	2388      	movs	r3, #136	@ 0x88
 800046c:	015a      	lsls	r2, r3, #5
 800046e:	23a0      	movs	r3, #160	@ 0xa0
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fc0d 	bl	8002c94 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fffa 	bl	8002478 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	ffefffff 	.word	0xffefffff

08000498 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

	}
*/


	if(hlamp.status == LAMP_ON && hlamp.ADC_Results[TEMP_LOCATION] >= TEMP_TH)
 80004a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d10d      	bne.n	80004c4 <HAL_ADC_ConvCpltCallback+0x2c>
 80004a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	4a1b      	ldr	r2, [pc, #108]	@ (800051c <HAL_ADC_ConvCpltCallback+0x84>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d908      	bls.n	80004c4 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 80004b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <HAL_ADC_ConvCpltCallback+0x88>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2296      	movs	r2, #150	@ 0x96
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	641a      	str	r2, [r3, #64]	@ 0x40
		hlamp.helth = LAMP_TEMP_ERR;
 80004bc:	4b16      	ldr	r3, [pc, #88]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004be:	2202      	movs	r2, #2
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	e024      	b.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
	}
	else if (hlamp.status == LAMP_ON && hlamp.ADC_Results[BATT_LOCATION] <= BATT_TH)
 80004c4:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d10d      	bne.n	80004e8 <HAL_ADC_ConvCpltCallback+0x50>
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <HAL_ADC_ConvCpltCallback+0x8c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d808      	bhi.n	80004e8 <HAL_ADC_ConvCpltCallback+0x50>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_ADC_ConvCpltCallback+0x88>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2296      	movs	r2, #150	@ 0x96
 80004dc:	0052      	lsls	r2, r2, #1
 80004de:	641a      	str	r2, [r3, #64]	@ 0x40
		hlamp.helth = LAMP_BATT_ERR;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	709a      	strb	r2, [r3, #2]
 80004e6:	e012      	b.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
	}
	else if(hlamp.status == LAMP_ON && hlamp.ADC_Results[TEMP_LOCATION] < TEMP_HIST && hlamp.ADC_Results[BATT_LOCATION] > BATT_HIST)
 80004e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10e      	bne.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	23e1      	movs	r3, #225	@ 0xe1
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d208      	bcs.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <HAL_ADC_ConvCpltCallback+0x90>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d903      	bls.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
	{
		hlamp.helth = LAMP_OK;
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <HAL_ADC_ConvCpltCallback+0x80>)
 8000508:	2200      	movs	r2, #0
 800050a:	709a      	strb	r2, [r3, #2]
	}

}
 800050c:	e7ff      	b.n	800050e <HAL_ADC_ConvCpltCallback+0x76>
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	2000021c 	.word	0x2000021c
 800051c:	00000739 	.word	0x00000739
 8000520:	200000ec 	.word	0x200000ec
 8000524:	0000073a 	.word	0x0000073a
 8000528:	0000076c 	.word	0x0000076c

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <MX_DMA_Init+0x38>)
 8000534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <MX_DMA_Init+0x38>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	639a      	str	r2, [r3, #56]	@ 0x38
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <MX_DMA_Init+0x38>)
 8000540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2009      	movs	r0, #9
 8000550:	f001 fec6 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000554:	2009      	movs	r0, #9
 8000556:	f001 fed8 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b089      	sub	sp, #36	@ 0x24
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	240c      	movs	r4, #12
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2314      	movs	r3, #20
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f004 fb4d 	bl	8004c18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <MX_GPIO_Init+0x70>)
 8000580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_GPIO_Init+0x70>)
 8000584:	2102      	movs	r1, #2
 8000586:	430a      	orrs	r2, r1
 8000588:	635a      	str	r2, [r3, #52]	@ 0x34
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_GPIO_Init+0x70>)
 800058c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800058e:	2202      	movs	r2, #2
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_GPIO_Init+0x70>)
 8000598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_GPIO_Init+0x70>)
 800059c:	2101      	movs	r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <MX_GPIO_Init+0x70>)
 80005a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a6:	2201      	movs	r2, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2201      	movs	r2, #1
 80005c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005c2:	193a      	adds	r2, r7, r4
 80005c4:	23a0      	movs	r3, #160	@ 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 f9f8 	bl	80029c0 <HAL_GPIO_Init>

}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b009      	add	sp, #36	@ 0x24
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


    extern LAMP_HandleTypedef hlamp;
    hlamp.ADC_Results[TEMP_LOCATION] = 0;
 80005e0:	4b22      	ldr	r3, [pc, #136]	@ (800066c <main+0x90>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    hlamp.ADC_Results[BATT_LOCATION] = 4095;
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <main+0x90>)
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <main+0x94>)
 80005ea:	60da      	str	r2, [r3, #12]
	hlamp.status = LAMP_OFF;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <main+0x90>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	hlamp.setup  = LAMP_SETUP_OFF;
 80005f2:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <main+0x90>)
 80005f4:	2203      	movs	r2, #3
 80005f6:	705a      	strb	r2, [r3, #1]
	hlamp.button = 0;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <main+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	70da      	strb	r2, [r3, #3]
	hlamp.helth  = LAMP_OK;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <main+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	709a      	strb	r2, [r3, #2]
	hlamp.pressed = FALSE;
 8000604:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0x90>)
 8000606:	2200      	movs	r2, #0
 8000608:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fccf 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f835 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000612:	f7ff ffa9 	bl	8000568 <MX_GPIO_Init>

   MX_TIM1_Init();
 8000616:	f000 f8f3 	bl	8000800 <MX_TIM1_Init>

 #ifdef IWDG_
   MX_IWDG_Init();
 #endif

   MX_TIM16_Init();
 800061a:	f000 fa45 	bl	8000aa8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */



   if(HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <main+0x98>)
 8000620:	0018      	movs	r0, r3
 8000622:	f003 f965 	bl	80038f0 <HAL_TIM_Base_Start_IT>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <main+0x52>
   {
	   Error_Handler();
 800062a:	f000 f86f 	bl	800070c <Error_Handler>
   }
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <main+0x9c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	641a      	str	r2, [r3, #64]	@ 0x40

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <main+0x9c>)
 8000638:	210c      	movs	r1, #12
 800063a:	0018      	movs	r0, r3
 800063c:	f003 fa34 	bl	8003aa8 <HAL_TIM_PWM_Start>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <main+0x6c>
	{
		Error_Handler();
 8000644:	f000 f862 	bl	800070c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(hlamp.pressed == TRUE)
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <main+0x90>)
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1fb      	bne.n	8000648 <main+0x6c>
	  {

		  hlamp.button++;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <main+0x90>)
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	3301      	adds	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b04      	ldr	r3, [pc, #16]	@ (800066c <main+0x90>)
 800065a:	70da      	strb	r2, [r3, #3]
		  hlamp.pressed = FALSE;
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <main+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	711a      	strb	r2, [r3, #4]

		  Lamp_Start();
 8000662:	f000 fbb7 	bl	8000dd4 <Lamp_Start>
		  Lamp_SetPower();
 8000666:	f000 fbf1 	bl	8000e4c <Lamp_SetPower>
	  if(hlamp.pressed == TRUE)
 800066a:	e7ed      	b.n	8000648 <main+0x6c>
 800066c:	2000021c 	.word	0x2000021c
 8000670:	00000fff 	.word	0x00000fff
 8000674:	200001d0 	.word	0x200001d0
 8000678:	200000ec 	.word	0x200000ec

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b08d      	sub	sp, #52	@ 0x34
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2414      	movs	r4, #20
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	231c      	movs	r3, #28
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f004 fac3 	bl	8004c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f004 fabc 	bl	8004c18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	220a      	movs	r2, #10
 80006a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0152      	lsls	r2, r2, #5
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2240      	movs	r2, #64	@ 0x40
 80006ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2201      	movs	r2, #1
 80006c0:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 fbd3 	bl	8002e70 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80006ce:	f000 f81d 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	003b      	movs	r3, r7
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	003b      	movs	r3, r7
 80006f2:	2100      	movs	r1, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 fd9f 	bl	8003238 <HAL_RCC_ClockConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006fe:	f000 f805 	bl	800070c <Error_Handler>
  }
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b00d      	add	sp, #52	@ 0x34
 8000708:	bd90      	pop	{r4, r7, pc}
	...

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8000714:	4b02      	ldr	r3, [pc, #8]	@ (8000720 <Error_Handler+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2264      	movs	r2, #100	@ 0x64
 800071a:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x10>
 8000720:	200000ec 	.word	0x200000ec

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x44>)
 800072c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_MspInit+0x44>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	641a      	str	r2, [r3, #64]	@ 0x40
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x44>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x44>)
 8000744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_MspInit+0x44>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	430a      	orrs	r2, r1
 800074e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_MspInit+0x44>)
 8000752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	e7fd      	b.n	8000770 <NMI_Handler+0x4>

08000774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	e7fd      	b.n	8000778 <HardFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 fc6c 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <DMA1_Channel1_IRQHandler+0x14>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 ffc8 	bl	800273c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000090 	.word	0x20000090

080007b8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <TIM14_IRQHandler+0x14>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fa4a 	bl	8003c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000184 	.word	0x20000184

080007d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <TIM16_IRQHandler+0x14>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f003 fa3e 	bl	8003c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	200001d0 	.word	0x200001d0

080007e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <SystemInit+0x14>)
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	0512      	lsls	r2, r2, #20
 80007f2:	609a      	str	r2, [r3, #8]
#endif
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	2360      	movs	r3, #96	@ 0x60
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	0018      	movs	r0, r3
 800080c:	2310      	movs	r3, #16
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f004 fa01 	bl	8004c18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	2354      	movs	r3, #84	@ 0x54
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	0018      	movs	r0, r3
 800081c:	230c      	movs	r3, #12
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f004 f9f9 	bl	8004c18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	2338      	movs	r3, #56	@ 0x38
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	231c      	movs	r3, #28
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 f9f1 	bl	8004c18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	2334      	movs	r3, #52	@ 0x34
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f004 f9ea 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000844:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000846:	4a55      	ldr	r2, [pc, #340]	@ (800099c <MX_TIM1_Init+0x19c>)
 8000848:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 800084a:	4b53      	ldr	r3, [pc, #332]	@ (8000998 <MX_TIM1_Init+0x198>)
 800084c:	2213      	movs	r2, #19
 800084e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000856:	4b50      	ldr	r3, [pc, #320]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000858:	4a51      	ldr	r2, [pc, #324]	@ (80009a0 <MX_TIM1_Init+0x1a0>)
 800085a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b4e      	ldr	r3, [pc, #312]	@ (8000998 <MX_TIM1_Init+0x198>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000862:	4b4d      	ldr	r3, [pc, #308]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000868:	4b4b      	ldr	r3, [pc, #300]	@ (8000998 <MX_TIM1_Init+0x198>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000870:	0018      	movs	r0, r3
 8000872:	f002 ff1b 	bl	80036ac <HAL_TIM_Base_Init>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800087a:	f7ff ff47 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	2160      	movs	r1, #96	@ 0x60
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	0152      	lsls	r2, r2, #5
 8000886:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000888:	187a      	adds	r2, r7, r1
 800088a:	4b43      	ldr	r3, [pc, #268]	@ (8000998 <MX_TIM1_Init+0x198>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f003 fbe4 	bl	800405c <HAL_TIM_ConfigClockSource>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000898:	f7ff ff38 	bl	800070c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089c:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <MX_TIM1_Init+0x198>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f003 f8a2 	bl	80039e8 <HAL_TIM_PWM_Init>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008a8:	f7ff ff30 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2154      	movs	r1, #84	@ 0x54
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c0:	187a      	adds	r2, r7, r1
 80008c2:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <MX_TIM1_Init+0x198>)
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f004 f886 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80008d0:	f7ff ff1c 	bl	800070c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2138      	movs	r1, #56	@ 0x38
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2260      	movs	r2, #96	@ 0x60
 80008da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	22f4      	movs	r2, #244	@ 0xf4
 80008e0:	32ff      	adds	r2, #255	@ 0xff
 80008e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fc:	1879      	adds	r1, r7, r1
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000900:	220c      	movs	r2, #12
 8000902:	0018      	movs	r0, r3
 8000904:	f003 faaa 	bl	8003e5c <HAL_TIM_PWM_ConfigChannel>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800090c:	f7ff fefe 	bl	800070c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000910:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4922      	ldr	r1, [pc, #136]	@ (80009a4 <MX_TIM1_Init+0x1a4>)
 800091c:	400a      	ands	r2, r1
 800091e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2280      	movs	r2, #128	@ 0x80
 8000942:	0192      	lsls	r2, r2, #6
 8000944:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	0492      	lsls	r2, r2, #18
 800095e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000972:	1d3a      	adds	r2, r7, #4
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f004 f88f 	bl	8004a9c <HAL_TIMEx_ConfigBreakDeadTime>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8000982:	f7ff fec3 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <MX_TIM1_Init+0x198>)
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f925 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b01c      	add	sp, #112	@ 0x70
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	200000ec 	.word	0x200000ec
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	000003e7 	.word	0x000003e7
 80009a4:	fffff7ff 	.word	0xfffff7ff

080009a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	2310      	movs	r3, #16
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	0018      	movs	r0, r3
 80009b4:	2310      	movs	r3, #16
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f004 f92d 	bl	8004c18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	230c      	movs	r3, #12
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f004 f926 	bl	8004c18 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009ce:	4a1f      	ldr	r2, [pc, #124]	@ (8000a4c <MX_TIM3_Init+0xa4>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12000;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a50 <MX_TIM3_Init+0xa8>)
 80009d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <MX_TIM3_Init+0xac>)
 80009e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 fe5a 	bl	80036ac <HAL_TIM_Base_Init>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009fc:	f7ff fe86 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	2110      	movs	r1, #16
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	0152      	lsls	r2, r2, #5
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f003 fb23 	bl	800405c <HAL_TIM_ConfigClockSource>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a1a:	f7ff fe77 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2220      	movs	r2, #32
 8000a22:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2a:	1d3a      	adds	r2, r7, #4
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_TIM3_Init+0xa0>)
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f003 ffd1 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a3a:	f7ff fe67 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b008      	add	sp, #32
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000138 	.word	0x20000138
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	00002ee0 	.word	0x00002ee0
 8000a54:	00007530 	.word	0x00007530

08000a58 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <MX_TIM14_Init+0x44>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12000;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a64:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <MX_TIM14_Init+0x48>)
 8000a66:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <MX_TIM14_Init+0x4c>)
 8000a72:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <MX_TIM14_Init+0x40>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fe12 	bl	80036ac <HAL_TIM_Base_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a8c:	f7ff fe3e 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	20000184 	.word	0x20000184
 8000a9c:	40002000 	.word	0x40002000
 8000aa0:	00002ee0 	.word	0x00002ee0
 8000aa4:	00001388 	.word	0x00001388

08000aa8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000aac:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <MX_TIM16_Init+0x4c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1200;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ab4:	2296      	movs	r2, #150	@ 0x96
 8000ab6:	00d2      	lsls	r2, r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ac2:	2264      	movs	r2, #100	@ 0x64
 8000ac4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <MX_TIM16_Init+0x48>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fde6 	bl	80036ac <HAL_TIM_Base_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000ae4:	f7ff fe12 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	200001d0 	.word	0x200001d0
 8000af4:	40014400 	.word	0x40014400

08000af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc4 <HAL_TIM_Base_MspInit+0xcc>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10e      	bne.n	8000b28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	0109      	lsls	r1, r1, #4
 8000b14:	430a      	orrs	r2, r1
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b18:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1c:	2380      	movs	r3, #128	@ 0x80
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	4013      	ands	r3, r2
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000b26:	e048      	b.n	8000bba <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <HAL_TIM_Base_MspInit+0xd4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10c      	bne.n	8000b4c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b32:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b36:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b38:	2102      	movs	r1, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b42:	2202      	movs	r2, #2
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
}
 8000b4a:	e036      	b.n	8000bba <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM14)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd0 <HAL_TIM_Base_MspInit+0xd8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d116      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	0209      	lsls	r1, r1, #8
 8000b60:	430a      	orrs	r2, r1
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2013      	movs	r0, #19
 8000b78:	f001 fbb2 	bl	80022e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b7c:	2013      	movs	r0, #19
 8000b7e:	f001 fbc4 	bl	800230a <HAL_NVIC_EnableIRQ>
}
 8000b82:	e01a      	b.n	8000bba <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM16)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d115      	bne.n	8000bba <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd0>)
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2015      	movs	r0, #21
 8000bb0:	f001 fb96 	bl	80022e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000bb4:	2015      	movs	r0, #21
 8000bb6:	f001 fba8 	bl	800230a <HAL_NVIC_EnableIRQ>
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b006      	add	sp, #24
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40000400 	.word	0x40000400
 8000bd0:	40002000 	.word	0x40002000
 8000bd4:	40014400 	.word	0x40014400

08000bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	240c      	movs	r4, #12
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f004 f814 	bl	8004c18 <memset>
  if(timHandle->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a16      	ldr	r2, [pc, #88]	@ (8000c50 <HAL_TIM_MspPostInit+0x78>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d126      	bne.n	8000c48 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_TIM_MspPostInit+0x7c>)
 8000bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_TIM_MspPostInit+0x7c>)
 8000c00:	2102      	movs	r1, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c06:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <HAL_TIM_MspPostInit+0x7c>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_PWM_Pin;
 8000c12:	0021      	movs	r1, r4
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2280      	movs	r2, #128	@ 0x80
 8000c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2201      	movs	r2, #1
 8000c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_TIM_MspPostInit+0x80>)
 8000c36:	0019      	movs	r1, r3
 8000c38:	0010      	movs	r0, r2
 8000c3a:	f001 fec1 	bl	80029c0 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 8000c3e:	23c0      	movs	r3, #192	@ 0xc0
 8000c40:	029b      	lsls	r3, r3, #10
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fa30 	bl	80010a8 <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b009      	add	sp, #36	@ 0x24
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	40021000 	.word	0x40021000
 8000c58:	50000400 	.word	0x50000400

08000c5c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <HAL_TIM_Base_MspDeInit+0x7c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000c74:	491a      	ldr	r1, [pc, #104]	@ (8000ce0 <HAL_TIM_Base_MspDeInit+0x84>)
 8000c76:	400a      	ands	r2, r1
 8000c78:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspDeInit 1 */

  /* USER CODE END TIM16_MspDeInit 1 */
  }
}
 8000c7a:	e028      	b.n	8000cce <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <HAL_TIM_Base_MspDeInit+0x88>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	438a      	bics	r2, r1
 8000c90:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000c92:	e01c      	b.n	8000cce <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM14)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a13      	ldr	r2, [pc, #76]	@ (8000ce8 <HAL_TIM_Base_MspDeInit+0x8c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d109      	bne.n	8000cb2 <HAL_TIM_Base_MspDeInit+0x56>
    __HAL_RCC_TIM14_CLK_DISABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000ca4:	4911      	ldr	r1, [pc, #68]	@ (8000cec <HAL_TIM_Base_MspDeInit+0x90>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8000caa:	2013      	movs	r0, #19
 8000cac:	f001 fb3d 	bl	800232a <HAL_NVIC_DisableIRQ>
}
 8000cb0:	e00d      	b.n	8000cce <HAL_TIM_Base_MspDeInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf0 <HAL_TIM_Base_MspDeInit+0x94>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d108      	bne.n	8000cce <HAL_TIM_Base_MspDeInit+0x72>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_TIM_Base_MspDeInit+0x80>)
 8000cc2:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <HAL_TIM_Base_MspDeInit+0x98>)
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM16_IRQn);
 8000cc8:	2015      	movs	r0, #21
 8000cca:	f001 fb2e 	bl	800232a <HAL_NVIC_DisableIRQ>
}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	fffff7ff 	.word	0xfffff7ff
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40002000 	.word	0x40002000
 8000cec:	ffff7fff 	.word	0xffff7fff
 8000cf0:	40014400 	.word	0x40014400
 8000cf4:	fffdffff 	.word	0xfffdffff

08000cf8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	static GPIO_PinState button 	= GPIO_PIN_SET;
	static GPIO_PinState buttonOld = GPIO_PIN_SET;

	if(htim->Instance == TIM14)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10b      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		hlamp.setup = LAMP_SETUP_OFF;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	705a      	strb	r2, [r3, #1]


		if(HAL_TIM_Base_Stop(htim) != HAL_OK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fdc6 	bl	80038a4 <HAL_TIM_Base_Stop>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d022      	beq.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			Error_Handler();
 8000d1c:	f7ff fcf6 	bl	800070c <Error_Handler>

#ifdef IWDG_
	  HAL_IWDG_Refresh(&hiwdg);
#endif
	}
}
 8000d20:	e01f      	b.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if(htim->Instance == TIM16)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d11a      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  button = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	019a      	lsls	r2, r3, #6
 8000d30:	23a0      	movs	r3, #160	@ 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 f87c 	bl	8002e34 <HAL_GPIO_ReadPin>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	001a      	movs	r2, r3
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d42:	701a      	strb	r2, [r3, #0]
	  if(buttonOld == GPIO_PIN_SET && button == GPIO_PIN_RESET)
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d106      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x62>
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x62>
		  hlamp.pressed = TRUE;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	711a      	strb	r2, [r3, #4]
	  buttonOld = button;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	40002000 	.word	0x40002000
 8000d70:	2000021c 	.word	0x2000021c
 8000d74:	40014400 	.word	0x40014400
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000005 	.word	0x20000005

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fd30 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d8a:	e003      	b.n	8000d94 <LoopCopyDataInit>

08000d8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d92:	3104      	adds	r1, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d94:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d9c:	d3f6      	bcc.n	8000d8c <CopyDataInit>
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000da0:	e002      	b.n	8000da8 <LoopFillZerobss>

08000da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000da4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da6:	3204      	adds	r2, #4

08000da8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <LoopForever+0x16>)
  cmp r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dac:	d3f9      	bcc.n	8000da2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000dae:	f003 ff3b 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fc13 	bl	80005dc <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000dbc:	08004d24 	.word	0x08004d24
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dc4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000dc8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000dcc:	20000230 	.word	0x20000230

08000dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>
	...

08000dd4 <Lamp_Start>:

LAMP_HandleTypedef hlamp;


void Lamp_Start(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

	if(hlamp.status == LAMP_OFF)
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <Lamp_Start+0x64>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d127      	bne.n	8000e30 <Lamp_Start+0x5c>
	{
		hlamp.status = LAMP_ON;
 8000de0:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <Lamp_Start+0x64>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]

	    MX_DMA_Init();
 8000de6:	f7ff fba1 	bl	800052c <MX_DMA_Init>
		MX_ADC1_Init();
 8000dea:	f7ff fa19 	bl	8000220 <MX_ADC1_Init>
	    MX_TIM14_Init();
 8000dee:	f7ff fe33 	bl	8000a58 <MX_TIM14_Init>
	    MX_TIM3_Init();
 8000df2:	f7ff fdd9 	bl	80009a8 <MX_TIM3_Init>

		// start 5s setup timer
		if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <Lamp_Start+0x68>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 fd79 	bl	80038f0 <HAL_TIM_Base_Start_IT>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <Lamp_Start+0x32>
		{
			Error_Handler();
 8000e02:	f7ff fc83 	bl	800070c <Error_Handler>
		}


		hlamp.setup = LAMP_SETUP_ON;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <Lamp_Start+0x64>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	705a      	strb	r2, [r3, #1]

		// start adc timer
		if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <Lamp_Start+0x6c>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f002 fd02 	bl	8003818 <HAL_TIM_Base_Start>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d001      	beq.n	8000e1c <Lamp_Start+0x48>
		{
			Error_Handler();
 8000e18:	f7ff fc78 	bl	800070c <Error_Handler>
		}



		if(HAL_ADC_Start_DMA(&hadc1, hlamp.ADC_Results, 2) != HAL_OK)
 8000e1c:	4909      	ldr	r1, [pc, #36]	@ (8000e44 <Lamp_Start+0x70>)
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <Lamp_Start+0x74>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fd08 	bl	8001838 <HAL_ADC_Start_DMA>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <Lamp_Start+0x5c>
		{
			Error_Handler();
 8000e2c:	f7ff fc6e 	bl	800070c <Error_Handler>
		//hlamp.helth = LAMP_OK;
		//__HAL_TIM_SET_COUNTER(&htim3, 29990);

	}

}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	2000021c 	.word	0x2000021c
 8000e3c:	20000184 	.word	0x20000184
 8000e40:	20000138 	.word	0x20000138
 8000e44:	20000224 	.word	0x20000224
 8000e48:	2000002c 	.word	0x2000002c

08000e4c <Lamp_SetPower>:


void Lamp_SetPower(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

	if(hlamp.setup == LAMP_SETUP_ON)
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d12b      	bne.n	8000eb0 <Lamp_SetPower+0x64>
	{
		switch(hlamp.button)
 8000e58:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000e5a:	78db      	ldrb	r3, [r3, #3]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d011      	beq.n	8000e84 <Lamp_SetPower+0x38>
 8000e60:	dc16      	bgt.n	8000e90 <Lamp_SetPower+0x44>
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d002      	beq.n	8000e6c <Lamp_SetPower+0x20>
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d006      	beq.n	8000e78 <Lamp_SetPower+0x2c>
 8000e6a:	e011      	b.n	8000e90 <Lamp_SetPower+0x44>
		{
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2296      	movs	r2, #150	@ 0x96
 8000e72:	0052      	lsls	r2, r2, #1
 8000e74:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000e76:	e027      	b.n	8000ec8 <Lamp_SetPower+0x7c>
		case 2:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 600);
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2296      	movs	r2, #150	@ 0x96
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000e82:	e021      	b.n	8000ec8 <Lamp_SetPower+0x7c>
		case 3:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	22fa      	movs	r2, #250	@ 0xfa
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000e8e:	e01b      	b.n	8000ec8 <Lamp_SetPower+0x7c>
		default:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2200      	movs	r2, #0
 8000e96:	641a      	str	r2, [r3, #64]	@ 0x40
		    Lamp_DeInit();
 8000e98:	f000 f82a 	bl	8000ef0 <Lamp_DeInit>

		    hlamp.button = 0;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	70da      	strb	r2, [r3, #3]
		    hlamp.status = LAMP_OFF;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
		    hlamp.setup = LAMP_SETUP_OFF;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000eaa:	2203      	movs	r2, #3
 8000eac:	705a      	strb	r2, [r3, #1]
			break;
 8000eae:	e00b      	b.n	8000ec8 <Lamp_SetPower+0x7c>

	}
	// turn off lamp
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40

		Lamp_DeInit();
 8000eb8:	f000 f81a 	bl	8000ef0 <Lamp_DeInit>
		hlamp.status = LAMP_OFF;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		hlamp.button = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	70da      	strb	r2, [r3, #3]
	}

	//forcee low state (batt, Temp)
	if((hlamp.helth != LAMP_OK) && (hlamp.status != LAMP_OFF))
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000eca:	789b      	ldrb	r3, [r3, #2]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <Lamp_SetPower+0x96>
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <Lamp_SetPower+0x9c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <Lamp_SetPower+0x96>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <Lamp_SetPower+0xa0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2296      	movs	r2, #150	@ 0x96
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000021c 	.word	0x2000021c
 8000eec:	200000ec 	.word	0x200000ec

08000ef0 <Lamp_DeInit>:

void Lamp_DeInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	//#############ADC_Deinit################################
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <Lamp_DeInit+0x7c>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fd2c 	bl	8001954 <HAL_ADC_Stop_DMA>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <Lamp_DeInit+0x14>
	{
		Error_Handler();
 8000f00:	f7ff fc04 	bl	800070c <Error_Handler>
	}


	if(HAL_ADC_DeInit(&hadc1) != HAL_OK)
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <Lamp_DeInit+0x7c>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fbfa 	bl	8001700 <HAL_ADC_DeInit>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <Lamp_DeInit+0x24>
	{
		Error_Handler();
 8000f10:	f7ff fbfc 	bl	800070c <Error_Handler>
	}

	if(HAL_DMA_DeInit(&hdma_adc1)!=HAL_OK)
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <Lamp_DeInit+0x80>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f001 faae 	bl	8002478 <HAL_DMA_DeInit>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <Lamp_DeInit+0x34>
	{
			Error_Handler();
 8000f20:	f7ff fbf4 	bl	800070c <Error_Handler>
	//#######################################################



	//###########5sTIM_Deinit################################
	if(HAL_TIM_Base_Stop_IT(&htim14) != HAL_OK)
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <Lamp_DeInit+0x84>)
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 fd30 	bl	800398c <HAL_TIM_Base_Stop_IT>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <Lamp_DeInit+0x44>
	{
		Error_Handler();
 8000f30:	f7ff fbec 	bl	800070c <Error_Handler>
	}

	if(HAL_TIM_Base_DeInit(&htim14) != HAL_OK)
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <Lamp_DeInit+0x84>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 fc10 	bl	800375c <HAL_TIM_Base_DeInit>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <Lamp_DeInit+0x54>
	{
		Error_Handler();
 8000f40:	f7ff fbe4 	bl	800070c <Error_Handler>




	//###########ADC_Triger_Deinit##########################
	if(HAL_TIM_Base_Stop(&htim3) != HAL_OK)
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <Lamp_DeInit+0x88>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f002 fcac 	bl	80038a4 <HAL_TIM_Base_Stop>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <Lamp_DeInit+0x64>
	{
		Error_Handler();
 8000f50:	f7ff fbdc 	bl	800070c <Error_Handler>
	}
	if(HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <Lamp_DeInit+0x88>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 fc00 	bl	800375c <HAL_TIM_Base_DeInit>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <Lamp_DeInit+0x74>
	{
		Error_Handler();
 8000f60:	f7ff fbd4 	bl	800070c <Error_Handler>
	}
	//######################################################

}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	2000002c 	.word	0x2000002c
 8000f70:	20000090 	.word	0x20000090
 8000f74:	20000184 	.word	0x20000184
 8000f78:	20000138 	.word	0x20000138

08000f7c <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	0c12      	lsrs	r2, r2, #16
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	401a      	ands	r2, r3
 8000f90:	0011      	movs	r1, r2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	0c1a      	lsrs	r2, r3, #16
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	40010000 	.word	0x40010000

08000fac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f80f 	bl	8000fdc <HAL_InitTick>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e001      	b.n	8000fce <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fca:	f7ff fbab 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000fec:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_InitTick+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d02b      	beq.n	800104c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <HAL_InitTick+0x8c>)
 8000ff6:	681c      	ldr	r4, [r3, #0]
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_InitTick+0x88>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	23fa      	movs	r3, #250	@ 0xfa
 8001000:	0098      	lsls	r0, r3, #2
 8001002:	f7ff f881 	bl	8000108 <__udivsi3>
 8001006:	0003      	movs	r3, r0
 8001008:	0019      	movs	r1, r3
 800100a:	0020      	movs	r0, r4
 800100c:	f7ff f87c 	bl	8000108 <__udivsi3>
 8001010:	0003      	movs	r3, r0
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f999 	bl	800234a <HAL_SYSTICK_Config>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d112      	bne.n	8001042 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d80a      	bhi.n	8001038 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f001 f958 	bl	80022e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_InitTick+0x90>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e00d      	b.n	8001054 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e008      	b.n	8001054 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	230f      	movs	r3, #15
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e003      	b.n	8001054 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104c:	230f      	movs	r3, #15
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b005      	add	sp, #20
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <HAL_IncTick+0x1c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x20>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	18d2      	adds	r2, r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	@ (8001090 <HAL_IncTick+0x20>)
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	2000000c 	.word	0x2000000c
 8001090:	2000022c 	.word	0x2000022c

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b02      	ldr	r3, [pc, #8]	@ (80010a4 <HAL_GetTick+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	2000022c 	.word	0x2000022c

080010a8 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff ff62 	bl	8000f7c <LL_SYSCFG_ConfigPinMux>
}
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010d0:	401a      	ands	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	ff3fffff 	.word	0xff3fffff

080010e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	23c0      	movs	r3, #192	@ 0xc0
 80010f6:	041b      	lsls	r3, r3, #16
 80010f8:	4013      	ands	r3, r2
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	2104      	movs	r1, #4
 8001116:	400a      	ands	r2, r1
 8001118:	2107      	movs	r1, #7
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	43d2      	mvns	r2, r2
 8001120:	401a      	ands	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2104      	movs	r1, #4
 8001126:	400b      	ands	r3, r1
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4099      	lsls	r1, r3
 800112c:	000b      	movs	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	2104      	movs	r1, #4
 800114e:	400a      	ands	r2, r1
 8001150:	2107      	movs	r1, #7
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2104      	movs	r1, #4
 800115c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800115e:	40da      	lsrs	r2, r3
 8001160:	0013      	movs	r3, r2
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	23c0      	movs	r3, #192	@ 0xc0
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d101      	bne.n	8001182 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001182:	2300      	movs	r3, #0
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	211f      	movs	r1, #31
 80011a0:	400a      	ands	r2, r1
 80011a2:	210f      	movs	r1, #15
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	0e9b      	lsrs	r3, r3, #26
 80011b0:	210f      	movs	r1, #15
 80011b2:	4019      	ands	r1, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	201f      	movs	r0, #31
 80011b8:	4003      	ands	r3, r0
 80011ba:	4099      	lsls	r1, r3
 80011bc:	000b      	movs	r3, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b004      	add	sp, #16
 80011ca:	bd80      	pop	{r7, pc}

080011cc <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	0a5b      	lsrs	r3, r3, #9
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	0252      	lsls	r2, r2, #9
 8001200:	0a52      	lsrs	r2, r2, #9
 8001202:	43d2      	mvns	r2, r2
 8001204:	401a      	ands	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	0212      	lsls	r2, r2, #8
 8001228:	43d2      	mvns	r2, r2
 800122a:	401a      	ands	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	400b      	ands	r3, r1
 8001234:	4904      	ldr	r1, [pc, #16]	@ (8001248 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001236:	400b      	ands	r3, r1
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	7fffff00 	.word	0x7fffff00

0800124c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <LL_ADC_EnableInternalRegulator+0x24>)
 800125a:	4013      	ands	r3, r2
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	0552      	lsls	r2, r2, #21
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	6fffffe8 	.word	0x6fffffe8

08001274 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a03      	ldr	r2, [pc, #12]	@ (8001290 <LL_ADC_DisableInternalRegulator+0x1c>)
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}
 8001290:	6fffffe8 	.word	0x6fffffe8

08001294 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	401a      	ands	r2, r3
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	055b      	lsls	r3, r3, #21
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <LL_ADC_Enable+0x20>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	2201      	movs	r2, #1
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	7fffffe8 	.word	0x7fffffe8

080012e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <LL_ADC_Disable+0x20>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	2202      	movs	r2, #2
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	7fffffe8 	.word	0x7fffffe8

08001304 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <LL_ADC_IsEnabled+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_IsEnabled+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}

08001326 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d101      	bne.n	800133e <LL_ADC_IsDisableOngoing+0x18>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_IsDisableOngoing+0x1a>
 800133e:	2300      	movs	r3, #0
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <LL_ADC_REG_StartConversion+0x20>)
 8001356:	4013      	ands	r3, r2
 8001358:	2204      	movs	r2, #4
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	7fffffe8 	.word	0x7fffffe8

0800136c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <LL_ADC_REG_StopConversion+0x20>)
 800137a:	4013      	ands	r3, r2
 800137c:	2210      	movs	r2, #16
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	7fffffe8 	.word	0x7fffffe8

08001390 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	231f      	movs	r3, #31
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e17e      	b.n	80016d8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7fe ffa1 	bl	800032c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2254      	movs	r2, #84	@ 0x54
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff49 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d114      	bne.n	8001430 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff1e 	bl	800124c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001410:	4bb3      	ldr	r3, [pc, #716]	@ (80016e0 <HAL_ADC_Init+0x32c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	49b3      	ldr	r1, [pc, #716]	@ (80016e4 <HAL_ADC_Init+0x330>)
 8001416:	0018      	movs	r0, r3
 8001418:	f7fe fe76 	bl	8000108 <__udivsi3>
 800141c:	0003      	movs	r3, r0
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001422:	e002      	b.n	800142a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3b01      	subs	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f9      	bne.n	8001424 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ff2d 	bl	8001294 <LL_ADC_IsInternalRegulatorEnabled>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d10f      	bne.n	800145e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	2210      	movs	r2, #16
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2201      	movs	r2, #1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001456:	231f      	movs	r3, #31
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff ff94 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	2210      	movs	r2, #16
 8001472:	4013      	ands	r3, r2
 8001474:	d000      	beq.n	8001478 <HAL_ADC_Init+0xc4>
 8001476:	e122      	b.n	80016be <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d000      	beq.n	8001480 <HAL_ADC_Init+0xcc>
 800147e:	e11e      	b.n	80016be <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	4a98      	ldr	r2, [pc, #608]	@ (80016e8 <HAL_ADC_Init+0x334>)
 8001486:	4013      	ands	r3, r2
 8001488:	2202      	movs	r2, #2
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff ff35 	bl	8001304 <LL_ADC_IsEnabled>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d000      	beq.n	80014a0 <HAL_ADC_Init+0xec>
 800149e:	e0ad      	b.n	80015fc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e1b      	ldrb	r3, [r3, #24]
 80014a8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e5b      	ldrb	r3, [r3, #25]
 80014b0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e9b      	ldrb	r3, [r3, #26]
 80014b8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_ADC_Init+0x116>
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	e000      	b.n	80014cc <HAL_ADC_Init+0x118>
 80014ca:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da04      	bge.n	80014e6 <HAL_ADC_Init+0x132>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	e001      	b.n	80014ea <HAL_ADC_Init+0x136>
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80014ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	212c      	movs	r1, #44	@ 0x2c
 80014f0:	5c5b      	ldrb	r3, [r3, r1]
 80014f2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014f4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d115      	bne.n	8001532 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7e9b      	ldrb	r3, [r3, #26]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	2280      	movs	r2, #128	@ 0x80
 8001512:	0252      	lsls	r2, r2, #9
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e00b      	b.n	8001532 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	2220      	movs	r2, #32
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	2201      	movs	r2, #1
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800153e:	23e0      	movs	r3, #224	@ 0xe0
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001548:	4313      	orrs	r3, r2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	4a65      	ldr	r2, [pc, #404]	@ (80016ec <HAL_ADC_Init+0x338>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0f9b      	lsrs	r3, r3, #30
 800156c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001572:	4313      	orrs	r3, r2
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	223c      	movs	r2, #60	@ 0x3c
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d111      	bne.n	80015a8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0f9b      	lsrs	r3, r3, #30
 800158a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001590:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001596:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800159c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	2201      	movs	r2, #1
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	4a50      	ldr	r2, [pc, #320]	@ (80016f0 <HAL_ADC_Init+0x33c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	23c0      	movs	r3, #192	@ 0xc0
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d018      	beq.n	80015fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d012      	beq.n	80015fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	429a      	cmp	r2, r3
 80015e0:	d00c      	beq.n	80015fc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015e2:	4b44      	ldr	r3, [pc, #272]	@ (80016f4 <HAL_ADC_Init+0x340>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <HAL_ADC_Init+0x344>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	23f0      	movs	r3, #240	@ 0xf0
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	401a      	ands	r2, r3
 80015f6:	4b3f      	ldr	r3, [pc, #252]	@ (80016f4 <HAL_ADC_Init+0x340>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001604:	001a      	movs	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	f7ff fd7b 	bl	8001102 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001614:	4939      	ldr	r1, [pc, #228]	@ (80016fc <HAL_ADC_Init+0x348>)
 8001616:	001a      	movs	r2, r3
 8001618:	f7ff fd73 	bl	8001102 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2110      	movs	r1, #16
 8001630:	4249      	negs	r1, r1
 8001632:	430a      	orrs	r2, r1
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
 8001636:	e018      	b.n	800166a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	2380      	movs	r3, #128	@ 0x80
 800163e:	039b      	lsls	r3, r3, #14
 8001640:	429a      	cmp	r2, r3
 8001642:	d112      	bne.n	800166a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	221c      	movs	r2, #28
 8001654:	4013      	ands	r3, r2
 8001656:	2210      	movs	r2, #16
 8001658:	4252      	negs	r2, r2
 800165a:	409a      	lsls	r2, r3
 800165c:	0011      	movs	r1, r2
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2100      	movs	r1, #0
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fd63 	bl	800113c <LL_ADC_GetSamplingTimeCommonChannels>
 8001676:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800167c:	429a      	cmp	r2, r3
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	2203      	movs	r2, #3
 800168c:	4393      	bics	r3, r2
 800168e:	2201      	movs	r2, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001696:	e01c      	b.n	80016d2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	2212      	movs	r2, #18
 800169e:	4393      	bics	r3, r2
 80016a0:	2210      	movs	r2, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	2201      	movs	r2, #1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80016b4:	231f      	movs	r3, #31
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016bc:	e009      	b.n	80016d2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	2210      	movs	r2, #16
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d2:	231f      	movs	r3, #31
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b008      	add	sp, #32
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	00030d40 	.word	0x00030d40
 80016e8:	fffffefd 	.word	0xfffffefd
 80016ec:	ffde0201 	.word	0xffde0201
 80016f0:	1ffffc02 	.word	0x1ffffc02
 80016f4:	40012708 	.word	0x40012708
 80016f8:	ffc3ffff 	.word	0xffc3ffff
 80016fc:	7fffff04 	.word	0x7fffff04

08001700 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e081      	b.n	8001816 <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	2202      	movs	r2, #2
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800171e:	250f      	movs	r5, #15
 8001720:	197c      	adds	r4, r7, r5
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fb6d 	bl	8001e04 <ADC_ConversionStop>
 800172a:	0003      	movs	r3, r0
 800172c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800172e:	197b      	adds	r3, r7, r5
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d112      	bne.n	800175c <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001736:	197c      	adds	r4, r7, r5
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 fc1c 	bl	8001f78 <ADC_Disable>
 8001740:	0003      	movs	r3, r0
 8001742:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001744:	197b      	adds	r3, r7, r5
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff fd8c 	bl	8001274 <LL_ADC_DisableInternalRegulator>
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */

  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	492e      	ldr	r1, [pc, #184]	@ (8001820 <HAL_ADC_DeInit+0x120>)
 8001768:	400a      	ands	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <HAL_ADC_DeInit+0x124>)
 8001772:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH  | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	492a      	ldr	r1, [pc, #168]	@ (8001828 <HAL_ADC_DeInit+0x128>)
 8001780:	400a      	ands	r2, r1
 8001782:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	0892      	lsrs	r2, r2, #2
 8001792:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2107      	movs	r1, #7
 80017a0:	438a      	bics	r2, r1
 80017a2:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	491f      	ldr	r1, [pc, #124]	@ (800182c <HAL_ADC_DeInit+0x12c>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	491b      	ldr	r1, [pc, #108]	@ (800182c <HAL_ADC_DeInit+0x12c>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4917      	ldr	r1, [pc, #92]	@ (800182c <HAL_ADC_DeInit+0x12c>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <HAL_ADC_DeInit+0x130>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_ADC_DeInit+0x130>)
 80017e8:	4912      	ldr	r1, [pc, #72]	@ (8001834 <HAL_ADC_DeInit+0x134>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe fe2b 	bl	800044c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2254      	movs	r2, #84	@ 0x54
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bdb0      	pop	{r4, r5, r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	fffffc60 	.word	0xfffffc60
 8001824:	0000039f 	.word	0x0000039f
 8001828:	831e0200 	.word	0x831e0200
 800182c:	f000f000 	.word	0xf000f000
 8001830:	40012708 	.word	0x40012708
 8001834:	ff03ffff 	.word	0xff03ffff

08001838 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fda1 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d16c      	bne.n	800192c <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2254      	movs	r2, #84	@ 0x54
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_ADC_Start_DMA+0x28>
 800185c:	2302      	movs	r3, #2
 800185e:	e06c      	b.n	800193a <HAL_ADC_Start_DMA+0x102>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2254      	movs	r2, #84	@ 0x54
 8001864:	2101      	movs	r1, #1
 8001866:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d113      	bne.n	800189c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff fd43 	bl	8001304 <LL_ADC_IsEnabled>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d004      	beq.n	800188c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff fd2a 	bl	80012e0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800189c:	2517      	movs	r5, #23
 800189e:	197c      	adds	r4, r7, r5
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f000 faea 	bl	8001e7c <ADC_Enable>
 80018a8:	0003      	movs	r3, r0
 80018aa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ac:	002c      	movs	r4, r5
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d13e      	bne.n	8001934 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <HAL_ADC_Start_DMA+0x10c>)
 80018bc:	4013      	ands	r3, r2
 80018be:	2280      	movs	r2, #128	@ 0x80
 80018c0:	0052      	lsls	r2, r2, #1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <HAL_ADC_Start_DMA+0x110>)
 80018d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018da:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <HAL_ADC_Start_DMA+0x114>)
 80018dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001950 <HAL_ADC_Start_DMA+0x118>)
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	221c      	movs	r2, #28
 80018ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2254      	movs	r2, #84	@ 0x54
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2110      	movs	r1, #16
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3340      	adds	r3, #64	@ 0x40
 8001910:	0019      	movs	r1, r3
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	193c      	adds	r4, r7, r4
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f000 fe26 	bl	8002568 <HAL_DMA_Start_IT>
 800191c:	0003      	movs	r3, r0
 800191e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fd0f 	bl	8001348 <LL_ADC_REG_StartConversion>
 800192a:	e003      	b.n	8001934 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800192c:	2317      	movs	r3, #23
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001934:	2317      	movs	r3, #23
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b006      	add	sp, #24
 8001940:	bdb0      	pop	{r4, r5, r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	fffff0fe 	.word	0xfffff0fe
 8001948:	08002029 	.word	0x08002029
 800194c:	080020f1 	.word	0x080020f1
 8001950:	0800210f 	.word	0x0800210f

08001954 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2254      	movs	r2, #84	@ 0x54
 8001960:	5c9b      	ldrb	r3, [r3, r2]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ADC_Stop_DMA+0x16>
 8001966:	2302      	movs	r3, #2
 8001968:	e05f      	b.n	8001a2a <HAL_ADC_Stop_DMA+0xd6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2254      	movs	r2, #84	@ 0x54
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001972:	250f      	movs	r5, #15
 8001974:	197c      	adds	r4, r7, r5
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fa43 	bl	8001e04 <ADC_ConversionStop>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001982:	0029      	movs	r1, r5
 8001984:	187b      	adds	r3, r7, r1
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d147      	bne.n	8001a1c <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001990:	2225      	movs	r2, #37	@ 0x25
 8001992:	5c9b      	ldrb	r3, [r3, r2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d112      	bne.n	80019c0 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199e:	000d      	movs	r5, r1
 80019a0:	187c      	adds	r4, r7, r1
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 fe68 	bl	8002678 <HAL_DMA_Abort>
 80019a8:	0003      	movs	r3, r0
 80019aa:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	2240      	movs	r2, #64	@ 0x40
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2110      	movs	r1, #16
 80019cc:	438a      	bics	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80019d0:	220f      	movs	r2, #15
 80019d2:	18bb      	adds	r3, r7, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80019da:	18bc      	adds	r4, r7, r2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 faca 	bl	8001f78 <ADC_Disable>
 80019e4:	0003      	movs	r3, r0
 80019e6:	7023      	strb	r3, [r4, #0]
 80019e8:	e003      	b.n	80019f2 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fac3 	bl	8001f78 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	4a0c      	ldr	r2, [pc, #48]	@ (8001a34 <HAL_ADC_Stop_DMA+0xe0>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	2201      	movs	r2, #1
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2101      	movs	r1, #1
 8001a18:	438a      	bics	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2254      	movs	r2, #84	@ 0x54
 8001a20:	2100      	movs	r1, #0
 8001a22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b004      	add	sp, #16
 8001a30:	bdb0      	pop	{r4, r5, r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	fffffefe 	.word	0xfffffefe

08001a38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a62:	2317      	movs	r3, #23
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2254      	movs	r2, #84	@ 0x54
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x24>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e1be      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x3a2>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2254      	movs	r2, #84	@ 0x54
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fc81 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d000      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0x3c>
 8001a92:	e1a1      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d100      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x46>
 8001a9c:	e152      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d004      	beq.n	8001ab4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aae:	4ac2      	ldr	r2, [pc, #776]	@ (8001db8 <HAL_ADC_ConfigChannel+0x360>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d108      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0019      	movs	r1, r3
 8001abe:	0010      	movs	r0, r2
 8001ac0:	f7ff fb84 	bl	80011cc <LL_ADC_REG_SetSequencerChAdd>
 8001ac4:	e0ed      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	211f      	movs	r1, #31
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	4099      	lsls	r1, r3
 8001ad6:	000b      	movs	r3, r1
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	0a5b      	lsrs	r3, r3, #9
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x9c>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	221f      	movs	r2, #31
 8001af0:	4013      	ands	r3, r2
 8001af2:	e0bc      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d000      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0xa8>
 8001afe:	e0b5      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x214>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0xb4>
 8001b0a:	e0ad      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x210>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2204      	movs	r2, #4
 8001b12:	4013      	ands	r3, r2
 8001b14:	d000      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0xc0>
 8001b16:	e0a5      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x20c>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d000      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0xcc>
 8001b22:	e09d      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x208>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d000      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0xd8>
 8001b2e:	e095      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x204>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	4013      	ands	r3, r2
 8001b38:	d000      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0xe4>
 8001b3a:	e08d      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x200>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2240      	movs	r2, #64	@ 0x40
 8001b42:	4013      	ands	r3, r2
 8001b44:	d000      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0xf0>
 8001b46:	e085      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x1fc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d000      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0xfc>
 8001b52:	e07d      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1f8>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d000      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x10a>
 8001b60:	e074      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1f4>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d000      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x118>
 8001b6e:	e06b      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1f0>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d000      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x126>
 8001b7c:	e062      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1ec>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4013      	ands	r3, r2
 8001b88:	d000      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x134>
 8001b8a:	e059      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1e8>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	4013      	ands	r3, r2
 8001b96:	d151      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1e4>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d149      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1e0>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	d141      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1dc>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d139      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1d8>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d131      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d4>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d129      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1d0>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	02db      	lsls	r3, r3, #11
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d121      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1cc>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	d119      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1c8>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	035b      	lsls	r3, r3, #13
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1c4>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	039b      	lsls	r3, r3, #14
 8001c00:	4013      	ands	r3, r2
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1c0>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	03db      	lsls	r3, r3, #15
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d001      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x1bc>
 8001c10:	2316      	movs	r3, #22
 8001c12:	e02c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c14:	2300      	movs	r3, #0
 8001c16:	e02a      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c18:	2315      	movs	r3, #21
 8001c1a:	e028      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c1c:	2314      	movs	r3, #20
 8001c1e:	e026      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c20:	2313      	movs	r3, #19
 8001c22:	e024      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c24:	2312      	movs	r3, #18
 8001c26:	e022      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c28:	2311      	movs	r3, #17
 8001c2a:	e020      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	e01e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c30:	230f      	movs	r3, #15
 8001c32:	e01c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c34:	230e      	movs	r3, #14
 8001c36:	e01a      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c38:	230d      	movs	r3, #13
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	e016      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c40:	230b      	movs	r3, #11
 8001c42:	e014      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c44:	230a      	movs	r3, #10
 8001c46:	e012      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c48:	2309      	movs	r3, #9
 8001c4a:	e010      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	e00e      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c50:	2307      	movs	r3, #7
 8001c52:	e00c      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c54:	2306      	movs	r3, #6
 8001c56:	e00a      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c58:	2305      	movs	r3, #5
 8001c5a:	e008      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e006      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e004      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x216>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	6852      	ldr	r2, [r2, #4]
 8001c72:	201f      	movs	r0, #31
 8001c74:	4002      	ands	r2, r0
 8001c76:	4093      	lsls	r3, r2
 8001c78:	000a      	movs	r2, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d808      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	f7ff fa75 	bl	800118c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	f7ff fab0 	bl	8001214 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db00      	blt.n	8001cbe <HAL_ADC_ConfigChannel+0x266>
 8001cbc:	e096      	b.n	8001dec <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fa11 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x368>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d123      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cdc:	d11e      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	0412      	lsls	r2, r2, #16
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	4a35      	ldr	r2, [pc, #212]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001ce8:	0019      	movs	r1, r3
 8001cea:	0010      	movs	r0, r2
 8001cec:	f7ff f9e8 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001cf0:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x36c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x370>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fa06 	bl	8000108 <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	001a      	movs	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	189b      	adds	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d0c:	e002      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f9      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d1a:	e067      	b.n	8001dec <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2a      	ldr	r2, [pc, #168]	@ (8001dcc <HAL_ADC_ConfigChannel+0x374>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d162      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	03db      	lsls	r3, r3, #15
 8001d2c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d2e:	d15d      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	03d2      	lsls	r2, r2, #15
 8001d36:	4313      	orrs	r3, r2
 8001d38:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f7ff f9bf 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001d42:	e053      	b.n	8001dec <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d54:	4a18      	ldr	r2, [pc, #96]	@ (8001db8 <HAL_ADC_ConfigChannel+0x360>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0019      	movs	r1, r3
 8001d64:	0010      	movs	r0, r2
 8001d66:	f7ff fa42 	bl	80011ee <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da3c      	bge.n	8001dec <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff f9b7 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x368>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d108      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x378>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001d90:	0019      	movs	r1, r3
 8001d92:	0010      	movs	r0, r2
 8001d94:	f7ff f994 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001d98:	e028      	b.n	8001dec <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <HAL_ADC_ConfigChannel+0x374>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d123      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x37c>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_ADC_ConfigChannel+0x364>)
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f7ff f986 	bl	80010c0 <LL_ADC_SetCommonPathInternalCh>
 8001db4:	e01a      	b.n	8001dec <HAL_ADC_ConfigChannel+0x394>
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	80000004 	.word	0x80000004
 8001dbc:	40012708 	.word	0x40012708
 8001dc0:	a4000200 	.word	0xa4000200
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	00030d40 	.word	0x00030d40
 8001dcc:	a8000400 	.word	0xa8000400
 8001dd0:	ff7fffff 	.word	0xff7fffff
 8001dd4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	2220      	movs	r2, #32
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001de4:	2317      	movs	r3, #23
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2254      	movs	r2, #84	@ 0x54
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001df4:	2317      	movs	r3, #23
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b006      	add	sp, #24
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)

08001e04 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fabd 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d02b      	beq.n	8001e72 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fa81 	bl	8001326 <LL_ADC_IsDisableOngoing>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d104      	bne.n	8001e32 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fa9d 	bl	800136c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e32:	f7ff f92f 	bl	8001094 <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e3a:	e014      	b.n	8001e66 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e3c:	f7ff f92a 	bl	8001094 <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d90d      	bls.n	8001e66 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4e:	2210      	movs	r2, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e006      	b.n	8001e74 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1e4      	bne.n	8001e3c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff fa39 	bl	8001304 <LL_ADC_IsEnabled>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d162      	bne.n	8001f5c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a32      	ldr	r2, [pc, #200]	@ (8001f68 <ADC_Enable+0xec>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e04f      	b.n	8001f5e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff f9fa 	bl	80012bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ec8:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <ADC_Enable+0xf0>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff f90c 	bl	80010e8 <LL_ADC_GetCommonPathInternalCh>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	2380      	movs	r3, #128	@ 0x80
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d00f      	beq.n	8001efa <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001eda:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <ADC_Enable+0xf4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4925      	ldr	r1, [pc, #148]	@ (8001f74 <ADC_Enable+0xf8>)
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7fe f911 	bl	8000108 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eec:	e002      	b.n	8001ef4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f9      	bne.n	8001eee <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7e5b      	ldrb	r3, [r3, #25]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d02c      	beq.n	8001f5c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f8c7 	bl	8001094 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f0a:	e020      	b.n	8001f4e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff f9f7 	bl	8001304 <LL_ADC_IsEnabled>
 8001f16:	1e03      	subs	r3, r0, #0
 8001f18:	d104      	bne.n	8001f24 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff f9cc 	bl	80012bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f24:	f7ff f8b6 	bl	8001094 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d90d      	bls.n	8001f4e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	2210      	movs	r2, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e007      	b.n	8001f5e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d1d7      	bne.n	8001f0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b004      	add	sp, #16
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	80000017 	.word	0x80000017
 8001f6c:	40012708 	.word	0x40012708
 8001f70:	20000000 	.word	0x20000000
 8001f74:	00030d40 	.word	0x00030d40

08001f78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff f9ce 	bl	8001326 <LL_ADC_IsDisableOngoing>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f7ff f9b6 	bl	8001304 <LL_ADC_IsEnabled>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d040      	beq.n	800201e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d13d      	bne.n	800201e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10d      	bne.n	8001fcc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff f993 	bl	80012e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fc2:	f7ff f867 	bl	8001094 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fca:	e022      	b.n	8002012 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e01b      	b.n	8002020 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fe8:	f7ff f854 	bl	8001094 <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d90d      	bls.n	8002012 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	2201      	movs	r2, #1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e006      	b.n	8002020 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d1e4      	bne.n	8001fe8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}

08002028 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	2250      	movs	r2, #80	@ 0x50
 800203c:	4013      	ands	r3, r2
 800203e:	d141      	bne.n	80020c4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	2280      	movs	r2, #128	@ 0x80
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff f889 	bl	800116a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d02e      	beq.n	80020ba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	7e9b      	ldrb	r3, [r3, #26]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d12a      	bne.n	80020ba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	2b08      	cmp	r3, #8
 8002070:	d123      	bne.n	80020ba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff f98a 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 800207c:	1e03      	subs	r3, r0, #0
 800207e:	d110      	bne.n	80020a2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	210c      	movs	r1, #12
 800208c:	438a      	bics	r2, r1
 800208e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	4a15      	ldr	r2, [pc, #84]	@ (80020ec <ADC_DMAConvCplt+0xc4>)
 8002096:	4013      	ands	r3, r2
 8002098:	2201      	movs	r2, #1
 800209a:	431a      	orrs	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a0:	e00b      	b.n	80020ba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a6:	2220      	movs	r2, #32
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b2:	2201      	movs	r2, #1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe f9eb 	bl	8000498 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020c2:	e00f      	b.n	80020e4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	2210      	movs	r2, #16
 80020ca:	4013      	ands	r3, r2
 80020cc:	d004      	beq.n	80020d8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fcb9 	bl	8001a48 <HAL_ADC_ErrorCallback>
}
 80020d6:	e005      	b.n	80020e4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	0010      	movs	r0, r2
 80020e2:	4798      	blx	r3
}
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	fffffefe 	.word	0xfffffefe

080020f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff fc99 	bl	8001a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}

0800210e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	2240      	movs	r2, #64	@ 0x40
 8002122:	431a      	orrs	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	2204      	movs	r2, #4
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff fc86 	bl	8001a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	0002      	movs	r2, r0
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b7f      	cmp	r3, #127	@ 0x7f
 8002156:	d809      	bhi.n	800216c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	231f      	movs	r3, #31
 8002160:	401a      	ands	r2, r3
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_EnableIRQ+0x30>)
 8002164:	2101      	movs	r1, #1
 8002166:	4091      	lsls	r1, r2
 8002168:	000a      	movs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800216c:	46c0      	nop			@ (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b7f      	cmp	r3, #127	@ 0x7f
 800218a:	d810      	bhi.n	80021ae <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	001a      	movs	r2, r3
 8002192:	231f      	movs	r3, #31
 8002194:	4013      	ands	r3, r2
 8002196:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <__NVIC_DisableIRQ+0x40>)
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80021a2:	f3bf 8f4f 	dsb	sy
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80021a8:	f3bf 8f6f 	isb	sy
}
 80021ac:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	0002      	movs	r2, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80021d0:	d828      	bhi.n	8002224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002290 <__NVIC_SetPriority+0xd4>)
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	33c0      	adds	r3, #192	@ 0xc0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	589b      	ldr	r3, [r3, r2]
 80021e2:	1dfa      	adds	r2, r7, #7
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	0011      	movs	r1, r2
 80021e8:	2203      	movs	r2, #3
 80021ea:	400a      	ands	r2, r1
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	21ff      	movs	r1, #255	@ 0xff
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	43d2      	mvns	r2, r2
 80021f6:	401a      	ands	r2, r3
 80021f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	22ff      	movs	r2, #255	@ 0xff
 8002200:	401a      	ands	r2, r3
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	2303      	movs	r3, #3
 800220a:	4003      	ands	r3, r0
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002210:	481f      	ldr	r0, [pc, #124]	@ (8002290 <__NVIC_SetPriority+0xd4>)
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	430a      	orrs	r2, r1
 800221c:	33c0      	adds	r3, #192	@ 0xc0
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002222:	e031      	b.n	8002288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002224:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <__NVIC_SetPriority+0xd8>)
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	0019      	movs	r1, r3
 800222c:	230f      	movs	r3, #15
 800222e:	400b      	ands	r3, r1
 8002230:	3b08      	subs	r3, #8
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3306      	adds	r3, #6
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1dfa      	adds	r2, r7, #7
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	0011      	movs	r1, r2
 8002244:	2203      	movs	r2, #3
 8002246:	400a      	ands	r2, r1
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	21ff      	movs	r1, #255	@ 0xff
 800224c:	4091      	lsls	r1, r2
 800224e:	000a      	movs	r2, r1
 8002250:	43d2      	mvns	r2, r2
 8002252:	401a      	ands	r2, r3
 8002254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	401a      	ands	r2, r3
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	2303      	movs	r3, #3
 8002266:	4003      	ands	r3, r0
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226c:	4809      	ldr	r0, [pc, #36]	@ (8002294 <__NVIC_SetPriority+0xd8>)
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	001c      	movs	r4, r3
 8002274:	230f      	movs	r3, #15
 8002276:	4023      	ands	r3, r4
 8002278:	3b08      	subs	r3, #8
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	430a      	orrs	r2, r1
 800227e:	3306      	adds	r3, #6
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	18c3      	adds	r3, r0, r3
 8002284:	3304      	adds	r3, #4
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b003      	add	sp, #12
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	045b      	lsls	r3, r3, #17
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d301      	bcc.n	80022b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ac:	2301      	movs	r3, #1
 80022ae:	e010      	b.n	80022d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <SysTick_Config+0x44>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	3a01      	subs	r2, #1
 80022b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b8:	2301      	movs	r3, #1
 80022ba:	425b      	negs	r3, r3
 80022bc:	2103      	movs	r1, #3
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff ff7c 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x44>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x44>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	210f      	movs	r1, #15
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	1c02      	adds	r2, r0, #0
 80022f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	0002      	movs	r2, r0
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b25b      	sxtb	r3, r3
 800231c:	0018      	movs	r0, r3
 800231e:	f7ff ff11 	bl	8002144 <__NVIC_EnableIRQ>
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	0002      	movs	r2, r0
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b25b      	sxtb	r3, r3
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff ff1b 	bl	8002178 <__NVIC_DisableIRQ>
}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff ff9f 	bl	8002298 <SysTick_Config>
 800235a:	0003      	movs	r3, r0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e077      	b.n	8002466 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3d      	ldr	r2, [pc, #244]	@ (8002470 <HAL_DMA_Init+0x10c>)
 800237c:	4694      	mov	ip, r2
 800237e:	4463      	add	r3, ip
 8002380:	2114      	movs	r1, #20
 8002382:	0018      	movs	r0, r3
 8002384:	f7fd fec0 	bl	8000108 <__udivsi3>
 8002388:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800238a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2225      	movs	r2, #37	@ 0x25
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4934      	ldr	r1, [pc, #208]	@ (8002474 <HAL_DMA_Init+0x110>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fa9d 	bl	8002920 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	01db      	lsls	r3, r3, #7
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d102      	bne.n	80023f8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	21ff      	movs	r1, #255	@ 0xff
 8002402:	400a      	ands	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800240e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d011      	beq.n	800243c <HAL_DMA_Init+0xd8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d80d      	bhi.n	800243c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 faa8 	bl	8002978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e008      	b.n	800244e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2225      	movs	r2, #37	@ 0x25
 8002458:	2101      	movs	r1, #1
 800245a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	@ 0x24
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	bffdfff8 	.word	0xbffdfff8
 8002474:	ffff800f 	.word	0xffff800f

08002478 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e066      	b.n	8002558 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	438a      	bics	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_DMA_DeInit+0xe8>)
 80024a0:	4694      	mov	ip, r2
 80024a2:	4463      	add	r3, ip
 80024a4:	2114      	movs	r1, #20
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7fd fe2e 	bl	8000108 <__udivsi3>
 80024ac:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80024ae:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80024bc:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_DMA_DeInit+0xec>)
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	221c      	movs	r2, #28
 80024c6:	4013      	ands	r3, r2
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_DMA_DeInit+0xec>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fa23 	bl	8002920 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024ea:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d010      	beq.n	8002516 <HAL_DMA_DeInit+0x9e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d80c      	bhi.n	8002516 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa3a 	bl	8002978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002514:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2225      	movs	r2, #37	@ 0x25
 800254a:	2100      	movs	r1, #0
 800254c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	@ 0x24
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	bffdfff8 	.word	0xbffdfff8
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2224      	movs	r2, #36	@ 0x24
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_DMA_Start_IT+0x24>
 8002588:	2302      	movs	r3, #2
 800258a:	e070      	b.n	800266e <HAL_DMA_Start_IT+0x106>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2225      	movs	r2, #37	@ 0x25
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d157      	bne.n	8002650 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2225      	movs	r2, #37	@ 0x25
 80025a4:	2102      	movs	r1, #2
 80025a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	438a      	bics	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f96b 	bl	80028a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	210e      	movs	r1, #14
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e00f      	b.n	8002604 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2104      	movs	r1, #4
 80025f0:	438a      	bics	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	210a      	movs	r1, #10
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	4013      	ands	r3, r2
 8002610:	d008      	beq.n	8002624 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	2180      	movs	r1, #128	@ 0x80
 800261e:	0049      	lsls	r1, r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	0049      	lsls	r1, r1, #1
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e007      	b.n	8002660 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002658:	2317      	movs	r3, #23
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

  return status;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b006      	add	sp, #24
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e050      	b.n	800272c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2225      	movs	r2, #37	@ 0x25
 800268e:	5c9b      	ldrb	r3, [r3, r2]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2204      	movs	r2, #4
 800269a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e041      	b.n	800272c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	210e      	movs	r1, #14
 80026b4:	438a      	bics	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	491c      	ldr	r1, [pc, #112]	@ (8002734 <HAL_DMA_Abort+0xbc>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	438a      	bics	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <HAL_DMA_Abort+0xc0>)
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	221c      	movs	r2, #28
 80026e2:	4013      	ands	r3, r2
 80026e4:	2201      	movs	r2, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_DMA_Abort+0xc0>)
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00c      	beq.n	800271a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270a:	490a      	ldr	r1, [pc, #40]	@ (8002734 <HAL_DMA_Abort+0xbc>)
 800270c:	400a      	ands	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002718:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2225      	movs	r2, #37	@ 0x25
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2224      	movs	r2, #36	@ 0x24
 8002726:	2100      	movs	r1, #0
 8002728:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	fffffeff 	.word	0xfffffeff
 8002738:	40020000 	.word	0x40020000

0800273c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002744:	4b55      	ldr	r3, [pc, #340]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	221c      	movs	r2, #28
 8002758:	4013      	ands	r3, r2
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	0013      	movs	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x7a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d023      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2220      	movs	r2, #32
 8002776:	4013      	ands	r3, r2
 8002778:	d107      	bne.n	800278a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2104      	movs	r1, #4
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800278a:	4b44      	ldr	r3, [pc, #272]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	221c      	movs	r2, #28
 8002794:	4013      	ands	r3, r2
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	4b40      	ldr	r3, [pc, #256]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <HAL_DMA_IRQHandler+0x6e>
 80027a8:	e073      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	0010      	movs	r0, r2
 80027b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027b4:	e06d      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	221c      	movs	r2, #28
 80027bc:	4013      	ands	r3, r2
 80027be:	2202      	movs	r2, #2
 80027c0:	409a      	lsls	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	d02e      	beq.n	8002828 <HAL_DMA_IRQHandler+0xec>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d02a      	beq.n	8002828 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	4013      	ands	r3, r2
 80027dc:	d10b      	bne.n	80027f6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	210a      	movs	r1, #10
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2225      	movs	r2, #37	@ 0x25
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	221c      	movs	r2, #28
 8002800:	4013      	ands	r3, r2
 8002802:	2202      	movs	r2, #2
 8002804:	409a      	lsls	r2, r3
 8002806:	4b25      	ldr	r3, [pc, #148]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03a      	beq.n	8002892 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	0010      	movs	r0, r2
 8002824:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002826:	e034      	b.n	8002892 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	221c      	movs	r2, #28
 800282e:	4013      	ands	r3, r2
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	d02b      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	d027      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	210e      	movs	r1, #14
 8002850:	438a      	bics	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	221c      	movs	r2, #28
 800285e:	4013      	ands	r3, r2
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_DMA_IRQHandler+0x160>)
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2225      	movs	r2, #37	@ 0x25
 8002874:	2101      	movs	r1, #1
 8002876:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	0010      	movs	r0, r2
 8002890:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	46c0      	nop			@ (mov r8, r8)
}
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020000 	.word	0x40020000

080028a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80028ca:	4b14      	ldr	r3, [pc, #80]	@ (800291c <DMA_SetConfig+0x7c>)
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	221c      	movs	r2, #28
 80028d4:	4013      	ands	r3, r2
 80028d6:	2201      	movs	r2, #1
 80028d8:	409a      	lsls	r2, r3
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <DMA_SetConfig+0x7c>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d108      	bne.n	8002902 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002900:	e007      	b.n	8002912 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	40020000 	.word	0x40020000

08002920 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	001a      	movs	r2, r3
 800292e:	23ff      	movs	r3, #255	@ 0xff
 8002930:	4013      	ands	r3, r2
 8002932:	3b08      	subs	r3, #8
 8002934:	2114      	movs	r1, #20
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fbe6 	bl	8000108 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002948:	4694      	mov	ip, r2
 800294a:	4463      	add	r3, ip
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	001a      	movs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002958:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	221c      	movs	r2, #28
 800295e:	4013      	ands	r3, r2
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}
 8002970:	10008200 	.word	0x10008200
 8002974:	40020880 	.word	0x40020880

08002978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	22ff      	movs	r2, #255	@ 0xff
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800298e:	4694      	mov	ip, r2
 8002990:	4463      	add	r3, ip
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	001a      	movs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a07      	ldr	r2, [pc, #28]	@ (80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80029b0:	46c0      	nop			@ (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	1000823f 	.word	0x1000823f
 80029bc:	40020940 	.word	0x40020940

080029c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029ce:	e14d      	b.n	8002c6c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4091      	lsls	r1, r2
 80029da:	000a      	movs	r2, r1
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d100      	bne.n	80029e8 <HAL_GPIO_Init+0x28>
 80029e6:	e13e      	b.n	8002c66 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x38>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d125      	bne.n	8002a44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	58d3      	ldr	r3, [r2, r3]
 8002a04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	409a      	lsls	r2, r3
 8002a12:	0013      	movs	r3, r2
 8002a14:	43da      	mvns	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	220f      	movs	r2, #15
 8002a22:	401a      	ands	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2107      	movs	r1, #7
 8002a28:	400b      	ands	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	0013      	movs	r3, r2
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	409a      	lsls	r2, r3
 8002a52:	0013      	movs	r3, r2
 8002a54:	43da      	mvns	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	401a      	ands	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d00b      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a8c:	2b11      	cmp	r3, #17
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b12      	cmp	r3, #18
 8002a96:	d130      	bne.n	8002afa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ace:	2201      	movs	r2, #1
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d017      	beq.n	8002b32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	0013      	movs	r3, r2
 8002b12:	43da      	mvns	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4013      	ands	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	055b      	lsls	r3, r3, #21
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d100      	bne.n	8002b40 <HAL_GPIO_Init+0x180>
 8002b3e:	e092      	b.n	8002c66 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3318      	adds	r3, #24
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4013      	ands	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	220f      	movs	r2, #15
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	23a0      	movs	r3, #160	@ 0xa0
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x1d6>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a45      	ldr	r2, [pc, #276]	@ (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x1d2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a44      	ldr	r2, [pc, #272]	@ (8002c8c <HAL_GPIO_Init+0x2cc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x1ce>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a43      	ldr	r2, [pc, #268]	@ (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x1ca>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x1d8>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x1d8>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x1d8>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x1d8>
 8002b96:	2300      	movs	r3, #0
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ba8:	4936      	ldr	r1, [pc, #216]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3318      	adds	r3, #24
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002bb6:	4a33      	ldr	r2, [pc, #204]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	58d3      	ldr	r3, [r2, r3]
 8002bbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002bdc:	4929      	ldr	r1, [pc, #164]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002bde:	2280      	movs	r2, #128	@ 0x80
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002be4:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002be6:	2384      	movs	r3, #132	@ 0x84
 8002be8:	58d3      	ldr	r3, [r2, r3]
 8002bea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	029b      	lsls	r3, r3, #10
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002c0a:	491e      	ldr	r1, [pc, #120]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002c0c:	2284      	movs	r2, #132	@ 0x84
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	035b      	lsls	r3, r3, #13
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002c36:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	039b      	lsls	r3, r3, #14
 8002c54:	4013      	ands	r3, r2
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002c60:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	40da      	lsrs	r2, r3
 8002c74:	1e13      	subs	r3, r2, #0
 8002c76:	d000      	beq.n	8002c7a <HAL_GPIO_Init+0x2ba>
 8002c78:	e6aa      	b.n	80029d0 <HAL_GPIO_Init+0x10>
  }
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b006      	add	sp, #24
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021800 	.word	0x40021800
 8002c88:	50000400 	.word	0x50000400
 8002c8c:	50000800 	.word	0x50000800
 8002c90:	50001400 	.word	0x50001400

08002c94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002ca2:	e0b4      	b.n	8002e0e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d100      	bne.n	8002cb8 <HAL_GPIO_DeInit+0x24>
 8002cb6:	e0a7      	b.n	8002e08 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8002cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3318      	adds	r3, #24
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	589b      	ldr	r3, [r3, r2]
 8002cc4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4013      	ands	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	220f      	movs	r2, #15
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	23a0      	movs	r3, #160	@ 0xa0
 8002cdc:	05db      	lsls	r3, r3, #23
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_DeInit+0x76>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	@ (8002e28 <HAL_GPIO_DeInit+0x194>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_DeInit+0x72>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	@ (8002e2c <HAL_GPIO_DeInit+0x198>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_DeInit+0x6e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e30 <HAL_GPIO_DeInit+0x19c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_DeInit+0x6a>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_DeInit+0x78>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_DeInit+0x78>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_DeInit+0x78>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_DeInit+0x78>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	2103      	movs	r1, #3
 8002d10:	400a      	ands	r2, r1
 8002d12:	00d2      	lsls	r2, r2, #3
 8002d14:	4093      	lsls	r3, r2
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d136      	bne.n	8002d8a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d1c:	4a41      	ldr	r2, [pc, #260]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	58d3      	ldr	r3, [r2, r3]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	43d2      	mvns	r2, r2
 8002d26:	493f      	ldr	r1, [pc, #252]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2280      	movs	r2, #128	@ 0x80
 8002d2c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d30:	2384      	movs	r3, #132	@ 0x84
 8002d32:	58d3      	ldr	r3, [r2, r3]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	43d2      	mvns	r2, r2
 8002d38:	493a      	ldr	r1, [pc, #232]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2284      	movs	r2, #132	@ 0x84
 8002d3e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002d40:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002d4e:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43d9      	mvns	r1, r3
 8002d56:	4b33      	ldr	r3, [pc, #204]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	4013      	ands	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	220f      	movs	r2, #15
 8002d66:	409a      	lsls	r2, r3
 8002d68:	0013      	movs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3318      	adds	r3, #24
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	589a      	ldr	r2, [r3, r2]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	4829      	ldr	r0, [pc, #164]	@ (8002e24 <HAL_GPIO_DeInit+0x190>)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	400a      	ands	r2, r1
 8002d84:	3318      	adds	r3, #24
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2103      	movs	r1, #3
 8002d94:	4099      	lsls	r1, r3
 8002d96:	000b      	movs	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	58d3      	ldr	r3, [r2, r3]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	2107      	movs	r1, #7
 8002dae:	400a      	ands	r2, r1
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	210f      	movs	r1, #15
 8002db4:	4091      	lsls	r1, r2
 8002db6:	000a      	movs	r2, r1
 8002db8:	43d1      	mvns	r1, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	08d2      	lsrs	r2, r2, #3
 8002dbe:	4019      	ands	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	0052      	lsls	r2, r2, #1
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4091      	lsls	r1, r2
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	43d2      	mvns	r2, r2
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2101      	movs	r1, #1
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4091      	lsls	r1, r2
 8002de8:	000a      	movs	r2, r1
 8002dea:	43d2      	mvns	r2, r2
 8002dec:	401a      	ands	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	0052      	lsls	r2, r2, #1
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	4091      	lsls	r1, r2
 8002dfe:	000a      	movs	r2, r1
 8002e00:	43d2      	mvns	r2, r2
 8002e02:	401a      	ands	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	40da      	lsrs	r2, r3
 8002e14:	1e13      	subs	r3, r2, #0
 8002e16:	d000      	beq.n	8002e1a <HAL_GPIO_DeInit+0x186>
 8002e18:	e744      	b.n	8002ca4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021800 	.word	0x40021800
 8002e28:	50000400 	.word	0x50000400
 8002e2c:	50000800 	.word	0x50000800
 8002e30:	50001400 	.word	0x50001400

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	1cbb      	adds	r3, r7, #2
 8002e40:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	1cba      	adds	r2, r7, #2
 8002e48:	8812      	ldrh	r2, [r2, #0]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4e:	230f      	movs	r3, #15
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e58:	230f      	movs	r3, #15
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002e60:	230f      	movs	r3, #15
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	781b      	ldrb	r3, [r3, #0]
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1d0      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1e>
 8002e8c:	e069      	b.n	8002f62 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8e:	4bc8      	ldr	r3, [pc, #800]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2238      	movs	r2, #56	@ 0x38
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d15d      	bne.n	8002f62 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1bc      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x56>
 8002eb6:	4bbe      	ldr	r3, [pc, #760]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4bbd      	ldr	r3, [pc, #756]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	0249      	lsls	r1, r1, #9
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e020      	b.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	23a0      	movs	r3, #160	@ 0xa0
 8002ecc:	02db      	lsls	r3, r3, #11
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x80>
 8002ed2:	4bb7      	ldr	r3, [pc, #732]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4bb6      	ldr	r3, [pc, #728]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	02c9      	lsls	r1, r1, #11
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	4bb3      	ldr	r3, [pc, #716]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4bb2      	ldr	r3, [pc, #712]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	0249      	lsls	r1, r1, #9
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002ef0:	4baf      	ldr	r3, [pc, #700]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4bae      	ldr	r3, [pc, #696]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ef6:	49af      	ldr	r1, [pc, #700]	@ (80031b4 <HAL_RCC_OscConfig+0x344>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	4bac      	ldr	r3, [pc, #688]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4bab      	ldr	r3, [pc, #684]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f02:	49ad      	ldr	r1, [pc, #692]	@ (80031b8 <HAL_RCC_OscConfig+0x348>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe f8c0 	bl	8001094 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f8bb 	bl	8001094 <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	@ 0x64
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e17b      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	4ba0      	ldr	r3, [pc, #640]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0xaa>
 8002f38:	e013      	b.n	8002f62 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f8ab 	bl	8001094 <HAL_GetTick>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f44:	f7fe f8a6 	bl	8001094 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e166      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f56:	4b96      	ldr	r3, [pc, #600]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2202      	movs	r2, #2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <HAL_RCC_OscConfig+0xfe>
 8002f6c:	e086      	b.n	800307c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6e:	4b90      	ldr	r3, [pc, #576]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2238      	movs	r2, #56	@ 0x38
 8002f74:	4013      	ands	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d12f      	bne.n	8002fde <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e14c      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a8b      	ldr	r2, [pc, #556]	@ (80031bc <HAL_RCC_OscConfig+0x34c>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	4b85      	ldr	r3, [pc, #532]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d112      	bne.n	8002fcc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fa6:	4b82      	ldr	r3, [pc, #520]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a85      	ldr	r2, [pc, #532]	@ (80031c0 <HAL_RCC_OscConfig+0x350>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fba:	4b7d      	ldr	r3, [pc, #500]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80031c4 <HAL_RCC_OscConfig+0x354>)
 8002fc6:	40da      	lsrs	r2, r3
 8002fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCC_OscConfig+0x358>)
 8002fca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fcc:	4b7f      	ldr	r3, [pc, #508]	@ (80031cc <HAL_RCC_OscConfig+0x35c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7fe f803 	bl	8000fdc <HAL_InitTick>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d050      	beq.n	800307c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e122      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d030      	beq.n	8003048 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fe6:	4b72      	ldr	r3, [pc, #456]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a75      	ldr	r2, [pc, #468]	@ (80031c0 <HAL_RCC_OscConfig+0x350>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	4b6e      	ldr	r3, [pc, #440]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003000:	2180      	movs	r1, #128	@ 0x80
 8003002:	0049      	lsls	r1, r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f844 	bl	8001094 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003012:	f7fe f83f 	bl	8001094 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e0ff      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4013      	ands	r3, r2
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b5f      	ldr	r3, [pc, #380]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a61      	ldr	r2, [pc, #388]	@ (80031bc <HAL_RCC_OscConfig+0x34c>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	4b5b      	ldr	r3, [pc, #364]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e019      	b.n	800307c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003048:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b58      	ldr	r3, [pc, #352]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 800304e:	4960      	ldr	r1, [pc, #384]	@ (80031d0 <HAL_RCC_OscConfig+0x360>)
 8003050:	400a      	ands	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f81e 	bl	8001094 <HAL_GetTick>
 8003058:	0003      	movs	r3, r0
 800305a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800305e:	f7fe f819 	bl	8001094 <HAL_GetTick>
 8003062:	0002      	movs	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0d9      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	4b4f      	ldr	r3, [pc, #316]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	@ 0x80
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4013      	ands	r3, r2
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2208      	movs	r2, #8
 8003082:	4013      	ands	r3, r2
 8003084:	d042      	beq.n	800310c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003086:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2238      	movs	r2, #56	@ 0x38
 800308c:	4013      	ands	r3, r2
 800308e:	2b18      	cmp	r3, #24
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d138      	bne.n	800310c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0c2      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030a6:	4b42      	ldr	r3, [pc, #264]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 80030a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030aa:	4b41      	ldr	r3, [pc, #260]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fd ffef 	bl	8001094 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030bc:	f7fd ffea 	bl	8001094 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0aa      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80030ce:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d0f1      	beq.n	80030bc <HAL_RCC_OscConfig+0x24c>
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030da:	4b35      	ldr	r3, [pc, #212]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 80030dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030de:	4b34      	ldr	r3, [pc, #208]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	438a      	bics	r2, r1
 80030e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd ffd5 	bl	8001094 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030f0:	f7fd ffd0 	bl	8001094 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e090      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003102:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d1f1      	bne.n	80030f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	d100      	bne.n	8003118 <HAL_RCC_OscConfig+0x2a8>
 8003116:	e084      	b.n	8003222 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003118:	230f      	movs	r3, #15
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2238      	movs	r2, #56	@ 0x38
 8003126:	4013      	ands	r3, r2
 8003128:	2b20      	cmp	r3, #32
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d000      	beq.n	8003136 <HAL_RCC_OscConfig+0x2c6>
 8003134:	e075      	b.n	8003222 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e074      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x2e0>
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003148:	2101      	movs	r1, #1
 800314a:	430a      	orrs	r2, r1
 800314c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x31a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x302>
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 800315a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800315c:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 800315e:	2104      	movs	r1, #4
 8003160:	430a      	orrs	r2, r1
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 800316a:	2101      	movs	r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x31a>
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003174:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003178:	2101      	movs	r1, #1
 800317a:	438a      	bics	r2, r1
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800317e:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003182:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_RCC_OscConfig+0x340>)
 8003184:	2104      	movs	r1, #4
 8003186:	438a      	bics	r2, r1
 8003188:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fd ff7f 	bl	8001094 <HAL_GetTick>
 8003196:	0003      	movs	r3, r0
 8003198:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fd ff7a 	bl	8001094 <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	4a0b      	ldr	r2, [pc, #44]	@ (80031d4 <HAL_RCC_OscConfig+0x364>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d915      	bls.n	80031d8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e039      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	fffeffff 	.word	0xfffeffff
 80031b8:	fffbffff 	.word	0xfffbffff
 80031bc:	ffff80ff 	.word	0xffff80ff
 80031c0:	ffffc7ff 	.word	0xffffc7ff
 80031c4:	02dc6c00 	.word	0x02dc6c00
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000008 	.word	0x20000008
 80031d0:	fffffeff 	.word	0xfffffeff
 80031d4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80031d8:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_RCC_OscConfig+0x3bc>)
 80031da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d0dc      	beq.n	800319c <HAL_RCC_OscConfig+0x32c>
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd ff56 	bl	8001094 <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd ff51 	bl	8001094 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <HAL_RCC_OscConfig+0x3c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e010      	b.n	8003224 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_OscConfig+0x3bc>)
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800320c:	230f      	movs	r3, #15
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_RCC_OscConfig+0x3bc>)
 8003218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <HAL_RCC_OscConfig+0x3bc>)
 800321c:	4905      	ldr	r1, [pc, #20]	@ (8003234 <HAL_RCC_OscConfig+0x3c4>)
 800321e:	400a      	ands	r2, r1
 8003220:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b006      	add	sp, #24
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	00001388 	.word	0x00001388
 8003234:	efffffff 	.word	0xefffffff

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0e9      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2207      	movs	r2, #7
 8003252:	4013      	ands	r3, r2
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d91e      	bls.n	8003298 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b73      	ldr	r3, [pc, #460]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2207      	movs	r2, #7
 8003260:	4393      	bics	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800326c:	f7fd ff12 	bl	8001094 <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003274:	e009      	b.n	800328a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003276:	f7fd ff0d 	bl	8001094 <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <HAL_RCC_ClockConfig+0x1f4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0ca      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800328a:	4b67      	ldr	r3, [pc, #412]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2207      	movs	r2, #7
 8003290:	4013      	ands	r3, r2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2202      	movs	r2, #2
 800329e:	4013      	ands	r3, r2
 80032a0:	d017      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2204      	movs	r2, #4
 80032a8:	4013      	ands	r3, r2
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032ac:	4b60      	ldr	r3, [pc, #384]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a60      	ldr	r2, [pc, #384]	@ (8003434 <HAL_RCC_ClockConfig+0x1fc>)
 80032b2:	401a      	ands	r2, r3
 80032b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032b6:	21b0      	movs	r1, #176	@ 0xb0
 80032b8:	0109      	lsls	r1, r1, #4
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032be:	4b5c      	ldr	r3, [pc, #368]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003438 <HAL_RCC_ClockConfig+0x200>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4b58      	ldr	r3, [pc, #352]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d055      	beq.n	8003388 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80032dc:	4b54      	ldr	r3, [pc, #336]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	221c      	movs	r2, #28
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b51      	ldr	r3, [pc, #324]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	4013      	ands	r3, r2
 8003302:	d11f      	bne.n	8003344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e08b      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003310:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4013      	ands	r3, r2
 800331a:	d113      	bne.n	8003344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e07f      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d106      	bne.n	8003336 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003328:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 800332a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e074      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003336:	4b3e      	ldr	r3, [pc, #248]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e06d      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003344:	4b3a      	ldr	r3, [pc, #232]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2207      	movs	r2, #7
 800334a:	4393      	bics	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4b37      	ldr	r3, [pc, #220]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003358:	f7fd fe9c 	bl	8001094 <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003360:	e009      	b.n	8003376 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003362:	f7fd fe97 	bl	8001094 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <HAL_RCC_ClockConfig+0x1f4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e054      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2e      	ldr	r3, [pc, #184]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2238      	movs	r2, #56	@ 0x38
 800337c:	401a      	ands	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	429a      	cmp	r2, r3
 8003386:	d1ec      	bne.n	8003362 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2207      	movs	r2, #7
 800338e:	4013      	ands	r3, r2
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d21e      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2207      	movs	r2, #7
 800339c:	4393      	bics	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	4b21      	ldr	r3, [pc, #132]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033a8:	f7fd fe74 	bl	8001094 <HAL_GetTick>
 80033ac:	0003      	movs	r3, r0
 80033ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b0:	e009      	b.n	80033c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033b2:	f7fd fe6f 	bl	8001094 <HAL_GetTick>
 80033b6:	0002      	movs	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <HAL_RCC_ClockConfig+0x1f4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e02c      	b.n	8003420 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033c6:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2207      	movs	r2, #7
 80033cc:	4013      	ands	r3, r2
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1ee      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	4013      	ands	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033de:	4b14      	ldr	r3, [pc, #80]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4a16      	ldr	r2, [pc, #88]	@ (800343c <HAL_RCC_ClockConfig+0x204>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80033f2:	f000 f82b 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033f6:	0001      	movs	r1, r0
 80033f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	220f      	movs	r2, #15
 8003400:	401a      	ands	r2, r3
 8003402:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_RCC_ClockConfig+0x208>)
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	58d3      	ldr	r3, [r2, r3]
 8003408:	221f      	movs	r2, #31
 800340a:	4013      	ands	r3, r2
 800340c:	000a      	movs	r2, r1
 800340e:	40da      	lsrs	r2, r3
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCC_ClockConfig+0x20c>)
 8003412:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_RCC_ClockConfig+0x210>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0018      	movs	r0, r3
 800341a:	f7fd fddf 	bl	8000fdc <HAL_InitTick>
 800341e:	0003      	movs	r3, r0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40022000 	.word	0x40022000
 800342c:	00001388 	.word	0x00001388
 8003430:	40021000 	.word	0x40021000
 8003434:	ffff84ff 	.word	0xffff84ff
 8003438:	fffff0ff 	.word	0xfffff0ff
 800343c:	ffff8fff 	.word	0xffff8fff
 8003440:	08004c88 	.word	0x08004c88
 8003444:	20000000 	.word	0x20000000
 8003448:	20000008 	.word	0x20000008

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003452:	4b1c      	ldr	r3, [pc, #112]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2238      	movs	r2, #56	@ 0x38
 8003458:	4013      	ands	r3, r2
 800345a:	d10f      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800345c:	4b19      	ldr	r3, [pc, #100]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x78>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0adb      	lsrs	r3, r3, #11
 8003462:	2207      	movs	r2, #7
 8003464:	4013      	ands	r3, r2
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	4815      	ldr	r0, [pc, #84]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003472:	f7fc fe49 	bl	8000108 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	e01e      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x78>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2238      	movs	r2, #56	@ 0x38
 8003482:	4013      	ands	r3, r2
 8003484:	2b08      	cmp	r3, #8
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003488:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x80>)
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e015      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2238      	movs	r2, #56	@ 0x38
 8003494:	4013      	ands	r3, r2
 8003496:	2b20      	cmp	r3, #32
 8003498:	d103      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x78>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2238      	movs	r2, #56	@ 0x38
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b18      	cmp	r3, #24
 80034ac:	d103      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80034ae:	23fa      	movs	r3, #250	@ 0xfa
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	e001      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80034ba:	687b      	ldr	r3, [r7, #4]
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	02dc6c00 	.word	0x02dc6c00
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80034d8:	2313      	movs	r3, #19
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e0:	2312      	movs	r3, #18
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	4013      	ands	r3, r2
 80034f2:	d100      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80034f4:	e079      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2011      	movs	r0, #17
 80034f8:	183b      	adds	r3, r7, r0
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b64      	ldr	r3, [pc, #400]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003500:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	055b      	lsls	r3, r3, #21
 8003506:	4013      	ands	r3, r2
 8003508:	d110      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b61      	ldr	r3, [pc, #388]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800350c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800350e:	4b60      	ldr	r3, [pc, #384]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0549      	lsls	r1, r1, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003518:	4b5d      	ldr	r3, [pc, #372]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800351a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	055b      	lsls	r3, r3, #21
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	183b      	adds	r3, r7, r0
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800352c:	4b58      	ldr	r3, [pc, #352]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800352e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003530:	23c0      	movs	r3, #192	@ 0xc0
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4013      	ands	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d019      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	d014      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003548:	4b51      	ldr	r3, [pc, #324]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800354a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354c:	4a51      	ldr	r2, [pc, #324]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003552:	4b4f      	ldr	r3, [pc, #316]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003556:	4b4e      	ldr	r3, [pc, #312]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003562:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003564:	4b4a      	ldr	r3, [pc, #296]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003566:	494c      	ldr	r1, [pc, #304]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003568:	400a      	ands	r2, r1
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800356c:	4b48      	ldr	r3, [pc, #288]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d016      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fd fd8b 	bl	8001094 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fd fd86 	bl	8001094 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	4a43      	ldr	r2, [pc, #268]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d904      	bls.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003594:	2313      	movs	r3, #19
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2203      	movs	r2, #3
 800359a:	701a      	strb	r2, [r3, #0]
          break;
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800359e:	4b3c      	ldr	r3, [pc, #240]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d0ed      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80035a8:	2313      	movs	r3, #19
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b2:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	4a37      	ldr	r2, [pc, #220]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	4b33      	ldr	r3, [pc, #204]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	2312      	movs	r3, #18
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2213      	movs	r2, #19
 80035ce:	18ba      	adds	r2, r7, r2
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d4:	2311      	movs	r3, #17
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035e4:	492e      	ldr	r1, [pc, #184]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	400a      	ands	r2, r1
 80035e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f4:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	2203      	movs	r2, #3
 80035fa:	4393      	bics	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003604:	430a      	orrs	r2, r1
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2240      	movs	r2, #64	@ 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003612:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	4a23      	ldr	r2, [pc, #140]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003622:	430a      	orrs	r2, r1
 8003624:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	01db      	lsls	r3, r3, #7
 800362e:	4013      	ands	r3, r2
 8003630:	d008      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003632:	4b17      	ldr	r3, [pc, #92]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	0899      	lsrs	r1, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003640:	430a      	orrs	r2, r1
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	4013      	ands	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003650:	4b0f      	ldr	r3, [pc, #60]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003660:	430a      	orrs	r2, r1
 8003662:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da09      	bge.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800366c:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	22e0      	movs	r2, #224	@ 0xe0
 8003672:	4393      	bics	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003680:	2312      	movs	r3, #18
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	781b      	ldrb	r3, [r3, #0]
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b006      	add	sp, #24
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	40021000 	.word	0x40021000
 8003694:	fffffcff 	.word	0xfffffcff
 8003698:	fffeffff 	.word	0xfffeffff
 800369c:	00001388 	.word	0x00001388
 80036a0:	efffffff 	.word	0xefffffff
 80036a4:	ffffcfff 	.word	0xffffcfff
 80036a8:	ffff3fff 	.word	0xffff3fff

080036ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e04a      	b.n	8003754 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223d      	movs	r2, #61	@ 0x3d
 80036c2:	5c9b      	ldrb	r3, [r3, r2]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	223c      	movs	r2, #60	@ 0x3c
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7fd fa0f 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	223d      	movs	r2, #61	@ 0x3d
 80036de:	2102      	movs	r1, #2
 80036e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	0019      	movs	r1, r3
 80036ec:	0010      	movs	r0, r2
 80036ee:	f000 fdab 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2248      	movs	r2, #72	@ 0x48
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223e      	movs	r2, #62	@ 0x3e
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223f      	movs	r2, #63	@ 0x3f
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2240      	movs	r2, #64	@ 0x40
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2241      	movs	r2, #65	@ 0x41
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2242      	movs	r2, #66	@ 0x42
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2243      	movs	r2, #67	@ 0x43
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2244      	movs	r2, #68	@ 0x44
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2245      	movs	r2, #69	@ 0x45
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2246      	movs	r2, #70	@ 0x46
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2247      	movs	r2, #71	@ 0x47
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223d      	movs	r2, #61	@ 0x3d
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	223d      	movs	r2, #61	@ 0x3d
 8003768:	2102      	movs	r1, #2
 800376a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <HAL_TIM_Base_DeInit+0xb4>)
 8003774:	4013      	ands	r3, r2
 8003776:	d10d      	bne.n	8003794 <HAL_TIM_Base_DeInit+0x38>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_TIM_Base_DeInit+0xb8>)
 8003780:	4013      	ands	r3, r2
 8003782:	d107      	bne.n	8003794 <HAL_TIM_Base_DeInit+0x38>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	438a      	bics	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f7fd fa60 	bl	8000c5c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2248      	movs	r2, #72	@ 0x48
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	223e      	movs	r2, #62	@ 0x3e
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	223f      	movs	r2, #63	@ 0x3f
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2241      	movs	r2, #65	@ 0x41
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2242      	movs	r2, #66	@ 0x42
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2243      	movs	r2, #67	@ 0x43
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2244      	movs	r2, #68	@ 0x44
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2245      	movs	r2, #69	@ 0x45
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2246      	movs	r2, #70	@ 0x46
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2247      	movs	r2, #71	@ 0x47
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	223d      	movs	r2, #61	@ 0x3d
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	223c      	movs	r2, #60	@ 0x3c
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	00001111 	.word	0x00001111
 8003814:	00000444 	.word	0x00000444

08003818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	223d      	movs	r2, #61	@ 0x3d
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02f      	b.n	8003890 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	223d      	movs	r2, #61	@ 0x3d
 8003834:	2102      	movs	r1, #2
 8003836:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <HAL_TIM_Base_Start+0x80>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIM_Base_Start+0x34>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_TIM_Base_Start+0x84>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d116      	bne.n	800387a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <HAL_TIM_Base_Start+0x88>)
 8003854:	4013      	ands	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d016      	beq.n	800388c <HAL_TIM_Base_Start+0x74>
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	429a      	cmp	r2, r3
 8003866:	d011      	beq.n	800388c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003878:	e008      	b.n	800388c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2101      	movs	r1, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e000      	b.n	800388e <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40000400 	.word	0x40000400
 80038a0:	00010007 	.word	0x00010007

080038a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a0d      	ldr	r2, [pc, #52]	@ (80038e8 <HAL_TIM_Base_Stop+0x44>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <HAL_TIM_Base_Stop+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a0b      	ldr	r2, [pc, #44]	@ (80038ec <HAL_TIM_Base_Stop+0x48>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_Base_Stop+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2101      	movs	r1, #1
 80038d0:	438a      	bics	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	223d      	movs	r2, #61	@ 0x3d
 80038d8:	2101      	movs	r1, #1
 80038da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	00001111 	.word	0x00001111
 80038ec:	00000444 	.word	0x00000444

080038f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	223d      	movs	r2, #61	@ 0x3d
 80038fc:	5c9b      	ldrb	r3, [r3, r2]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e037      	b.n	8003978 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	223d      	movs	r2, #61	@ 0x3d
 800390c:	2102      	movs	r1, #2
 800390e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	430a      	orrs	r2, r1
 800391e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <HAL_TIM_Base_Start_IT+0x90>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x44>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <HAL_TIM_Base_Start_IT+0x94>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d116      	bne.n	8003962 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <HAL_TIM_Base_Start_IT+0x98>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d016      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x84>
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	025b      	lsls	r3, r3, #9
 800394c:	429a      	cmp	r2, r3
 800394e:	d011      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	e008      	b.n	8003974 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e000      	b.n	8003976 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40000400 	.word	0x40000400
 8003988:	00010007 	.word	0x00010007

0800398c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <HAL_TIM_Base_Stop_IT+0x54>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	d10d      	bne.n	80039cc <HAL_TIM_Base_Stop_IT+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a0b      	ldr	r2, [pc, #44]	@ (80039e4 <HAL_TIM_Base_Stop_IT+0x58>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_Base_Stop_IT+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	223d      	movs	r2, #61	@ 0x3d
 80039d0:	2101      	movs	r1, #1
 80039d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	00001111 	.word	0x00001111
 80039e4:	00000444 	.word	0x00000444

080039e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e04a      	b.n	8003a90 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	223d      	movs	r2, #61	@ 0x3d
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223c      	movs	r2, #60	@ 0x3c
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f841 	bl	8003a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	223d      	movs	r2, #61	@ 0x3d
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	0019      	movs	r1, r3
 8003a28:	0010      	movs	r0, r2
 8003a2a:	f000 fc0d 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2248      	movs	r2, #72	@ 0x48
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223e      	movs	r2, #62	@ 0x3e
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223f      	movs	r2, #63	@ 0x3f
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2240      	movs	r2, #64	@ 0x40
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2241      	movs	r2, #65	@ 0x41
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2242      	movs	r2, #66	@ 0x42
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2243      	movs	r2, #67	@ 0x43
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2244      	movs	r2, #68	@ 0x44
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2245      	movs	r2, #69	@ 0x45
 8003a72:	2101      	movs	r1, #1
 8003a74:	5499      	strb	r1, [r3, r2]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2246      	movs	r2, #70	@ 0x46
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2247      	movs	r2, #71	@ 0x47
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	223d      	movs	r2, #61	@ 0x3d
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa0:	46c0      	nop			@ (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_TIM_PWM_Start+0x22>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223e      	movs	r2, #62	@ 0x3e
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	4193      	sbcs	r3, r2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	e037      	b.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d108      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x3a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	223f      	movs	r2, #63	@ 0x3f
 8003ad4:	5c9b      	ldrb	r3, [r3, r2]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	4193      	sbcs	r3, r2
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e02b      	b.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d108      	bne.n	8003afa <HAL_TIM_PWM_Start+0x52>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	5c9b      	ldrb	r3, [r3, r2]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	1e5a      	subs	r2, r3, #1
 8003af4:	4193      	sbcs	r3, r2
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e01f      	b.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b0c      	cmp	r3, #12
 8003afe:	d108      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x6a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2241      	movs	r2, #65	@ 0x41
 8003b04:	5c9b      	ldrb	r3, [r3, r2]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	1e5a      	subs	r2, r3, #1
 8003b0c:	4193      	sbcs	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e013      	b.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d108      	bne.n	8003b2a <HAL_TIM_PWM_Start+0x82>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2242      	movs	r2, #66	@ 0x42
 8003b1c:	5c9b      	ldrb	r3, [r3, r2]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	4193      	sbcs	r3, r2
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	e007      	b.n	8003b3a <HAL_TIM_PWM_Start+0x92>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2243      	movs	r2, #67	@ 0x43
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	4193      	sbcs	r3, r2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07b      	b.n	8003c3a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start+0xaa>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	223e      	movs	r2, #62	@ 0x3e
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	5499      	strb	r1, [r3, r2]
 8003b50:	e023      	b.n	8003b9a <HAL_TIM_PWM_Start+0xf2>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xba>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	223f      	movs	r2, #63	@ 0x3f
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	5499      	strb	r1, [r3, r2]
 8003b60:	e01b      	b.n	8003b9a <HAL_TIM_PWM_Start+0xf2>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xca>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	5499      	strb	r1, [r3, r2]
 8003b70:	e013      	b.n	8003b9a <HAL_TIM_PWM_Start+0xf2>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xda>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2241      	movs	r2, #65	@ 0x41
 8003b7c:	2102      	movs	r1, #2
 8003b7e:	5499      	strb	r1, [r3, r2]
 8003b80:	e00b      	b.n	8003b9a <HAL_TIM_PWM_Start+0xf2>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xea>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2242      	movs	r2, #66	@ 0x42
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	5499      	strb	r1, [r3, r2]
 8003b90:	e003      	b.n	8003b9a <HAL_TIM_PWM_Start+0xf2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2243      	movs	r2, #67	@ 0x43
 8003b96:	2102      	movs	r1, #2
 8003b98:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f000 fef4 	bl	8004990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a25      	ldr	r2, [pc, #148]	@ (8003c44 <HAL_TIM_PWM_Start+0x19c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x11e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <HAL_TIM_PWM_Start+0x1a0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x11e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	@ (8003c4c <HAL_TIM_PWM_Start+0x1a4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_PWM_Start+0x122>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_TIM_PWM_Start+0x124>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	0209      	lsls	r1, r1, #8
 8003bde:	430a      	orrs	r2, r1
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <HAL_TIM_PWM_Start+0x19c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIM_PWM_Start+0x14e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <HAL_TIM_PWM_Start+0x1a8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d116      	bne.n	8003c24 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_TIM_PWM_Start+0x1ac>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d016      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x18e>
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d011      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	e008      	b.n	8003c36 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e000      	b.n	8003c38 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	40000400 	.word	0x40000400
 8003c54:	00010007 	.word	0x00010007

08003c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	d021      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2203      	movs	r2, #3
 8003c86:	4252      	negs	r2, r2
 8003c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2203      	movs	r2, #3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 faba 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e007      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 faad 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 fab9 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d01e      	beq.n	8003d0a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	4252      	negs	r2, r2
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	23c0      	movs	r3, #192	@ 0xc0
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 fa93 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fa86 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 fa92 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d021      	beq.n	8003d56 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4013      	ands	r3, r2
 8003d18:	d01d      	beq.n	8003d56 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2209      	movs	r2, #9
 8003d20:	4252      	negs	r2, r2
 8003d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2204      	movs	r2, #4
 8003d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fa6d 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 fa60 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fa6c 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2210      	movs	r2, #16
 8003d62:	4013      	ands	r3, r2
 8003d64:	d01e      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2211      	movs	r2, #17
 8003d6c:	4252      	negs	r2, r2
 8003d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2208      	movs	r2, #8
 8003d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	23c0      	movs	r3, #192	@ 0xc0
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d004      	beq.n	8003d8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 fa46 	bl	8004218 <HAL_TIM_IC_CaptureCallback>
 8003d8c:	e007      	b.n	8003d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 fa39 	bl	8004208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fa45 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	d00c      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	d008      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	4252      	negs	r2, r2
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7fc ff99 	bl	8000cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2280      	movs	r2, #128	@ 0x80
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d00c      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2280      	movs	r2, #128	@ 0x80
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d008      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2281      	movs	r2, #129	@ 0x81
 8003ddc:	4252      	negs	r2, r2
 8003dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 ff08 	bl	8004bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2280      	movs	r2, #128	@ 0x80
 8003df6:	4013      	ands	r3, r2
 8003df8:	d007      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	@ (8003e58 <HAL_TIM_IRQHandler+0x200>)
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f000 feff 	bl	8004c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2240      	movs	r2, #64	@ 0x40
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d00c      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2240      	movs	r2, #64	@ 0x40
 8003e16:	4013      	ands	r3, r2
 8003e18:	d008      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2241      	movs	r2, #65	@ 0x41
 8003e20:	4252      	negs	r2, r2
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fa06 	bl	8004238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	4013      	ands	r3, r2
 8003e32:	d00c      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d008      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2221      	movs	r2, #33	@ 0x21
 8003e42:	4252      	negs	r2, r2
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 fecd 	bl	8004be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	fffffeff 	.word	0xfffffeff

08003e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2317      	movs	r3, #23
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	223c      	movs	r2, #60	@ 0x3c
 8003e74:	5c9b      	ldrb	r3, [r3, r2]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0e5      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	223c      	movs	r2, #60	@ 0x3c
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b14      	cmp	r3, #20
 8003e8a:	d900      	bls.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e8c:	e0d1      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	009a      	lsls	r2, r3, #2
 8003e92:	4b70      	ldr	r3, [pc, #448]	@ (8004054 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fa3c 	bl	8004320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6999      	ldr	r1, [r3, #24]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	619a      	str	r2, [r3, #24]
      break;
 8003eda:	e0af      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fa9b 	bl	8004420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	0109      	lsls	r1, r1, #4
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4954      	ldr	r1, [pc, #336]	@ (8004058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
      break;
 8003f20:	e08c      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 faf6 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2104      	movs	r1, #4
 8003f4c:	438a      	bics	r2, r1
 8003f4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69d9      	ldr	r1, [r3, #28]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	61da      	str	r2, [r3, #28]
      break;
 8003f62:	e06b      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	0011      	movs	r1, r2
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 fb57 	bl	8004620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2180      	movs	r1, #128	@ 0x80
 8003f7e:	0109      	lsls	r1, r1, #4
 8003f80:	430a      	orrs	r2, r1
 8003f82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4932      	ldr	r1, [pc, #200]	@ (8004058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f90:	400a      	ands	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69d9      	ldr	r1, [r3, #28]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	61da      	str	r2, [r3, #28]
      break;
 8003fa8:	e048      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fb98 	bl	80046e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2108      	movs	r1, #8
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2104      	movs	r1, #4
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fea:	e027      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fbd1 	bl	800479c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	@ 0x80
 8004006:	0109      	lsls	r1, r1, #4
 8004008:	430a      	orrs	r2, r1
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4910      	ldr	r1, [pc, #64]	@ (8004058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004018:	400a      	ands	r2, r1
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004030:	e004      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004032:	2317      	movs	r3, #23
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
      break;
 800403a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	223c      	movs	r2, #60	@ 0x3c
 8004040:	2100      	movs	r1, #0
 8004042:	5499      	strb	r1, [r3, r2]

  return status;
 8004044:	2317      	movs	r3, #23
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	781b      	ldrb	r3, [r3, #0]
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b006      	add	sp, #24
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	08004cc8 	.word	0x08004cc8
 8004058:	fffffbff 	.word	0xfffffbff

0800405c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	230f      	movs	r3, #15
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223c      	movs	r2, #60	@ 0x3c
 8004072:	5c9b      	ldrb	r3, [r3, r2]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIM_ConfigClockSource+0x20>
 8004078:	2302      	movs	r3, #2
 800407a:	e0bc      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x19a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223c      	movs	r2, #60	@ 0x3c
 8004080:	2101      	movs	r1, #1
 8004082:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223d      	movs	r2, #61	@ 0x3d
 8004088:	2102      	movs	r1, #2
 800408a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4a5a      	ldr	r2, [pc, #360]	@ (8004200 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004098:	4013      	ands	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a59      	ldr	r2, [pc, #356]	@ (8004204 <HAL_TIM_ConfigClockSource+0x1a8>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2280      	movs	r2, #128	@ 0x80
 80040b2:	0192      	lsls	r2, r2, #6
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xde>
 80040b8:	2280      	movs	r2, #128	@ 0x80
 80040ba:	0192      	lsls	r2, r2, #6
 80040bc:	4293      	cmp	r3, r2
 80040be:	d900      	bls.n	80040c2 <HAL_TIM_ConfigClockSource+0x66>
 80040c0:	e088      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	0152      	lsls	r2, r2, #5
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d100      	bne.n	80040cc <HAL_TIM_ConfigClockSource+0x70>
 80040ca:	e088      	b.n	80041de <HAL_TIM_ConfigClockSource+0x182>
 80040cc:	2280      	movs	r2, #128	@ 0x80
 80040ce:	0152      	lsls	r2, r2, #5
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d900      	bls.n	80040d6 <HAL_TIM_ConfigClockSource+0x7a>
 80040d4:	e07e      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040d6:	2b70      	cmp	r3, #112	@ 0x70
 80040d8:	d018      	beq.n	800410c <HAL_TIM_ConfigClockSource+0xb0>
 80040da:	d900      	bls.n	80040de <HAL_TIM_ConfigClockSource+0x82>
 80040dc:	e07a      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040de:	2b60      	cmp	r3, #96	@ 0x60
 80040e0:	d04f      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x126>
 80040e2:	d900      	bls.n	80040e6 <HAL_TIM_ConfigClockSource+0x8a>
 80040e4:	e076      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040e6:	2b50      	cmp	r3, #80	@ 0x50
 80040e8:	d03b      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x106>
 80040ea:	d900      	bls.n	80040ee <HAL_TIM_ConfigClockSource+0x92>
 80040ec:	e072      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040ee:	2b40      	cmp	r3, #64	@ 0x40
 80040f0:	d057      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x146>
 80040f2:	d900      	bls.n	80040f6 <HAL_TIM_ConfigClockSource+0x9a>
 80040f4:	e06e      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040f6:	2b30      	cmp	r3, #48	@ 0x30
 80040f8:	d063      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x166>
 80040fa:	d86b      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d060      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x166>
 8004100:	d868      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d05d      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x166>
 8004106:	2b10      	cmp	r3, #16
 8004108:	d05b      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x166>
 800410a:	e063      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800411c:	f000 fc18 	bl	8004950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2277      	movs	r2, #119	@ 0x77
 800412c:	4313      	orrs	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]
      break;
 8004138:	e052      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800414a:	f000 fc01 	bl	8004950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2180      	movs	r1, #128	@ 0x80
 800415a:	01c9      	lsls	r1, r1, #7
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
      break;
 8004160:	e03e      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	001a      	movs	r2, r3
 8004170:	f000 fb72 	bl	8004858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2150      	movs	r1, #80	@ 0x50
 800417a:	0018      	movs	r0, r3
 800417c:	f000 fbcc 	bl	8004918 <TIM_ITRx_SetConfig>
      break;
 8004180:	e02e      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800418e:	001a      	movs	r2, r3
 8004190:	f000 fb90 	bl	80048b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2160      	movs	r1, #96	@ 0x60
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fbbc 	bl	8004918 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e01e      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	001a      	movs	r2, r3
 80041b0:	f000 fb52 	bl	8004858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2140      	movs	r1, #64	@ 0x40
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fbac 	bl	8004918 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e00e      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0019      	movs	r1, r3
 80041cc:	0010      	movs	r0, r2
 80041ce:	f000 fba3 	bl	8004918 <TIM_ITRx_SetConfig>
      break;
 80041d2:	e005      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80041d4:	230f      	movs	r3, #15
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
      break;
 80041dc:	e000      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80041de:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	223d      	movs	r2, #61	@ 0x3d
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	223c      	movs	r2, #60	@ 0x3c
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

  return status;
 80041f0:	230f      	movs	r3, #15
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	781b      	ldrb	r3, [r3, #0]
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	ffceff88 	.word	0xffceff88
 8004204:	ffff00ff 	.word	0xffff00ff

08004208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004210:	46c0      	nop			@ (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a2b      	ldr	r2, [pc, #172]	@ (8004308 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x20>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2a      	ldr	r2, [pc, #168]	@ (800430c <TIM_Base_SetConfig+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2270      	movs	r2, #112	@ 0x70
 800426c:	4393      	bics	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <TIM_Base_SetConfig+0xc0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	@ (800430c <TIM_Base_SetConfig+0xc4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <TIM_Base_SetConfig+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <TIM_Base_SetConfig+0xcc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <TIM_Base_SetConfig+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <TIM_Base_SetConfig+0xd4>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2280      	movs	r2, #128	@ 0x80
 80042b8:	4393      	bics	r3, r2
 80042ba:	001a      	movs	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <TIM_Base_SetConfig+0xc0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_Base_SetConfig+0xaa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <TIM_Base_SetConfig+0xcc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0xaa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <TIM_Base_SetConfig+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d103      	bne.n	80042fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	615a      	str	r2, [r3, #20]
}
 8004300:	46c0      	nop			@ (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40002000 	.word	0x40002000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	fffffcff 	.word	0xfffffcff

08004320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	2201      	movs	r2, #1
 8004336:	4393      	bics	r3, r2
 8004338:	001a      	movs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a2e      	ldr	r2, [pc, #184]	@ (8004408 <TIM_OC1_SetConfig+0xe8>)
 800434e:	4013      	ands	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2203      	movs	r2, #3
 8004356:	4393      	bics	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2202      	movs	r2, #2
 8004368:	4393      	bics	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a24      	ldr	r2, [pc, #144]	@ (800440c <TIM_OC1_SetConfig+0xec>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <TIM_OC1_SetConfig+0x6e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <TIM_OC1_SetConfig+0xf0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC1_SetConfig+0x6e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a22      	ldr	r2, [pc, #136]	@ (8004414 <TIM_OC1_SetConfig+0xf4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10c      	bne.n	80043a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2208      	movs	r2, #8
 8004392:	4393      	bics	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2204      	movs	r2, #4
 80043a4:	4393      	bics	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <TIM_OC1_SetConfig+0xec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_OC1_SetConfig+0xa0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <TIM_OC1_SetConfig+0xf0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC1_SetConfig+0xa0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <TIM_OC1_SetConfig+0xf4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <TIM_OC1_SetConfig+0xf8>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4a14      	ldr	r2, [pc, #80]	@ (800441c <TIM_OC1_SetConfig+0xfc>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b006      	add	sp, #24
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	fffeff8f 	.word	0xfffeff8f
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	fffffeff 	.word	0xfffffeff
 800441c:	fffffdff 	.word	0xfffffdff

08004420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	2210      	movs	r2, #16
 8004436:	4393      	bics	r3, r2
 8004438:	001a      	movs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a2c      	ldr	r2, [pc, #176]	@ (8004500 <TIM_OC2_SetConfig+0xe0>)
 800444e:	4013      	ands	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a2b      	ldr	r2, [pc, #172]	@ (8004504 <TIM_OC2_SetConfig+0xe4>)
 8004456:	4013      	ands	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2220      	movs	r2, #32
 800446a:	4393      	bics	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <TIM_OC2_SetConfig+0xe8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10d      	bne.n	800449e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	4393      	bics	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	4393      	bics	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <TIM_OC2_SetConfig+0xe8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_OC2_SetConfig+0x96>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a18      	ldr	r2, [pc, #96]	@ (800450c <TIM_OC2_SetConfig+0xec>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_OC2_SetConfig+0x96>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <TIM_OC2_SetConfig+0xf0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d113      	bne.n	80044de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4a16      	ldr	r2, [pc, #88]	@ (8004514 <TIM_OC2_SetConfig+0xf4>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <TIM_OC2_SetConfig+0xf8>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	46c0      	nop			@ (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b006      	add	sp, #24
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	feff8fff 	.word	0xfeff8fff
 8004504:	fffffcff 	.word	0xfffffcff
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800
 8004514:	fffffbff 	.word	0xfffffbff
 8004518:	fffff7ff 	.word	0xfffff7ff

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4a31      	ldr	r2, [pc, #196]	@ (80045f8 <TIM_OC3_SetConfig+0xdc>)
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a2d      	ldr	r2, [pc, #180]	@ (80045fc <TIM_OC3_SetConfig+0xe0>)
 8004548:	4013      	ands	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2203      	movs	r2, #3
 8004550:	4393      	bics	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4a27      	ldr	r2, [pc, #156]	@ (8004600 <TIM_OC3_SetConfig+0xe4>)
 8004562:	4013      	ands	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <TIM_OC3_SetConfig+0xe8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10d      	bne.n	8004596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <TIM_OC3_SetConfig+0xec>)
 800457e:	4013      	ands	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4a1e      	ldr	r2, [pc, #120]	@ (800460c <TIM_OC3_SetConfig+0xf0>)
 8004592:	4013      	ands	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1a      	ldr	r2, [pc, #104]	@ (8004604 <TIM_OC3_SetConfig+0xe8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_OC3_SetConfig+0x92>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <TIM_OC3_SetConfig+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC3_SetConfig+0x92>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <TIM_OC3_SetConfig+0xf8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d113      	bne.n	80045d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4a19      	ldr	r2, [pc, #100]	@ (8004618 <TIM_OC3_SetConfig+0xfc>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <TIM_OC3_SetConfig+0x100>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	46c0      	nop			@ (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b006      	add	sp, #24
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	fffffeff 	.word	0xfffffeff
 80045fc:	fffeff8f 	.word	0xfffeff8f
 8004600:	fffffdff 	.word	0xfffffdff
 8004604:	40012c00 	.word	0x40012c00
 8004608:	fffff7ff 	.word	0xfffff7ff
 800460c:	fffffbff 	.word	0xfffffbff
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800
 8004618:	ffffefff 	.word	0xffffefff
 800461c:	ffffdfff 	.word	0xffffdfff

08004620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4a24      	ldr	r2, [pc, #144]	@ (80046c8 <TIM_OC4_SetConfig+0xa8>)
 8004636:	401a      	ands	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a20      	ldr	r2, [pc, #128]	@ (80046cc <TIM_OC4_SetConfig+0xac>)
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <TIM_OC4_SetConfig+0xb0>)
 8004654:	4013      	ands	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <TIM_OC4_SetConfig+0xb4>)
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <TIM_OC4_SetConfig+0xb8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC4_SetConfig+0x70>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <TIM_OC4_SetConfig+0xbc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC4_SetConfig+0x70>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <TIM_OC4_SetConfig+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <TIM_OC4_SetConfig+0xc4>)
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b006      	add	sp, #24
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	ffffefff 	.word	0xffffefff
 80046cc:	feff8fff 	.word	0xfeff8fff
 80046d0:	fffffcff 	.word	0xfffffcff
 80046d4:	ffffdfff 	.word	0xffffdfff
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800
 80046e4:	ffffbfff 	.word	0xffffbfff

080046e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <TIM_OC5_SetConfig+0x9c>)
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <TIM_OC5_SetConfig+0xa0>)
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4a19      	ldr	r2, [pc, #100]	@ (800478c <TIM_OC5_SetConfig+0xa4>)
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a15      	ldr	r2, [pc, #84]	@ (8004790 <TIM_OC5_SetConfig+0xa8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <TIM_OC5_SetConfig+0x66>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <TIM_OC5_SetConfig+0xac>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC5_SetConfig+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <TIM_OC5_SetConfig+0xb0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d109      	bne.n	8004762 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4a0c      	ldr	r2, [pc, #48]	@ (8004784 <TIM_OC5_SetConfig+0x9c>)
 8004752:	4013      	ands	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b006      	add	sp, #24
 8004782:	bd80      	pop	{r7, pc}
 8004784:	fffeffff 	.word	0xfffeffff
 8004788:	fffeff8f 	.word	0xfffeff8f
 800478c:	fffdffff 	.word	0xfffdffff
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4a22      	ldr	r2, [pc, #136]	@ (800483c <TIM_OC6_SetConfig+0xa0>)
 80047b2:	401a      	ands	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <TIM_OC6_SetConfig+0xa4>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4a1a      	ldr	r2, [pc, #104]	@ (8004844 <TIM_OC6_SetConfig+0xa8>)
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	051b      	lsls	r3, r3, #20
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a16      	ldr	r2, [pc, #88]	@ (8004848 <TIM_OC6_SetConfig+0xac>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_OC6_SetConfig+0x68>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a15      	ldr	r2, [pc, #84]	@ (800484c <TIM_OC6_SetConfig+0xb0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_OC6_SetConfig+0x68>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a14      	ldr	r2, [pc, #80]	@ (8004850 <TIM_OC6_SetConfig+0xb4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d109      	bne.n	8004818 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4a13      	ldr	r2, [pc, #76]	@ (8004854 <TIM_OC6_SetConfig+0xb8>)
 8004808:	4013      	ands	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b006      	add	sp, #24
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	ffefffff 	.word	0xffefffff
 8004840:	feff8fff 	.word	0xfeff8fff
 8004844:	ffdfffff 	.word	0xffdfffff
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40014400 	.word	0x40014400
 8004850:	40014800 	.word	0x40014800
 8004854:	fffbffff 	.word	0xfffbffff

08004858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	2201      	movs	r2, #1
 8004870:	4393      	bics	r3, r2
 8004872:	001a      	movs	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	22f0      	movs	r2, #240	@ 0xf0
 8004882:	4393      	bics	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	220a      	movs	r2, #10
 8004894:	4393      	bics	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b006      	add	sp, #24
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	2210      	movs	r2, #16
 80048cc:	4393      	bics	r3, r2
 80048ce:	001a      	movs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004914 <TIM_TI2_ConfigInputStage+0x60>)
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	031b      	lsls	r3, r3, #12
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	22a0      	movs	r2, #160	@ 0xa0
 80048f0:	4393      	bics	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b006      	add	sp, #24
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	ffff0fff 	.word	0xffff0fff

08004918 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a08      	ldr	r2, [pc, #32]	@ (800494c <TIM_ITRx_SetConfig+0x34>)
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	2207      	movs	r2, #7
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	46bd      	mov	sp, r7
 8004946:	b004      	add	sp, #16
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	ffcfff8f 	.word	0xffcfff8f

08004950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	4a09      	ldr	r2, [pc, #36]	@ (800498c <TIM_ETR_SetConfig+0x3c>)
 8004968:	4013      	ands	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	021a      	lsls	r2, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	431a      	orrs	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4313      	orrs	r3, r2
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	46c0      	nop			@ (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b006      	add	sp, #24
 800498a:	bd80      	pop	{r7, pc}
 800498c:	ffff00ff 	.word	0xffff00ff

08004990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	221f      	movs	r2, #31
 80049a0:	4013      	ands	r3, r2
 80049a2:	2201      	movs	r2, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	0013      	movs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	43d2      	mvns	r2, r2
 80049b2:	401a      	ands	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	211f      	movs	r1, #31
 80049c0:	400b      	ands	r3, r1
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4099      	lsls	r1, r3
 80049c6:	000b      	movs	r3, r1
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b006      	add	sp, #24
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223c      	movs	r2, #60	@ 0x3c
 80049e6:	5c9b      	ldrb	r3, [r3, r2]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e04a      	b.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	223c      	movs	r2, #60	@ 0x3c
 80049f4:	2101      	movs	r1, #1
 80049f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	223d      	movs	r2, #61	@ 0x3d
 80049fc:	2102      	movs	r1, #2
 80049fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1e      	ldr	r2, [pc, #120]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2270      	movs	r2, #112	@ 0x70
 8004a30:	4393      	bics	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a11      	ldr	r2, [pc, #68]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10c      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2280      	movs	r2, #128	@ 0x80
 8004a5e:	4393      	bics	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223d      	movs	r2, #61	@ 0x3d
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	223c      	movs	r2, #60	@ 0x3c
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b004      	add	sp, #16
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	ff0fffff 	.word	0xff0fffff
 8004a98:	40000400 	.word	0x40000400

08004a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	223c      	movs	r2, #60	@ 0x3c
 8004aae:	5c9b      	ldrb	r3, [r3, r2]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e079      	b.n	8004bac <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	223c      	movs	r2, #60	@ 0x3c
 8004abc:	2101      	movs	r1, #1
 8004abe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	22ff      	movs	r2, #255	@ 0xff
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a38      	ldr	r2, [pc, #224]	@ (8004bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a35      	ldr	r2, [pc, #212]	@ (8004bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a33      	ldr	r2, [pc, #204]	@ (8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004af0:	401a      	ands	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a30      	ldr	r2, [pc, #192]	@ (8004bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004afe:	401a      	ands	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a29      	ldr	r2, [pc, #164]	@ (8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004b28:	401a      	ands	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a25      	ldr	r2, [pc, #148]	@ (8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a24      	ldr	r2, [pc, #144]	@ (8004bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b42:	401a      	ands	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d121      	bne.n	8004b9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004b78:	401a      	ands	r2, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a12      	ldr	r2, [pc, #72]	@ (8004bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d106      	bne.n	8004b9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004b90:	401a      	ands	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	223c      	movs	r2, #60	@ 0x3c
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	0018      	movs	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b004      	add	sp, #16
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	fffffcff 	.word	0xfffffcff
 8004bb8:	fffffbff 	.word	0xfffffbff
 8004bbc:	fffff7ff 	.word	0xfffff7ff
 8004bc0:	ffffefff 	.word	0xffffefff
 8004bc4:	ffffdfff 	.word	0xffffdfff
 8004bc8:	ffffbfff 	.word	0xffffbfff
 8004bcc:	fff0ffff 	.word	0xfff0ffff
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	efffffff 	.word	0xefffffff
 8004bd8:	ff0fffff 	.word	0xff0fffff
 8004bdc:	feffffff 	.word	0xfeffffff
 8004be0:	fdffffff 	.word	0xfdffffff
 8004be4:	dfffffff 	.word	0xdfffffff

08004be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			@ (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <memset>:
 8004c18:	0003      	movs	r3, r0
 8004c1a:	1882      	adds	r2, r0, r2
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d100      	bne.n	8004c22 <memset+0xa>
 8004c20:	4770      	bx	lr
 8004c22:	7019      	strb	r1, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	e7f9      	b.n	8004c1c <memset+0x4>

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	4c0c      	ldr	r4, [pc, #48]	@ (8004c60 <__libc_init_array+0x38>)
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c64 <__libc_init_array+0x3c>)
 8004c30:	1b64      	subs	r4, r4, r5
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	2600      	movs	r6, #0
 8004c3a:	f000 f819 	bl	8004c70 <_init>
 8004c3e:	4c0a      	ldr	r4, [pc, #40]	@ (8004c68 <__libc_init_array+0x40>)
 8004c40:	4d0a      	ldr	r5, [pc, #40]	@ (8004c6c <__libc_init_array+0x44>)
 8004c42:	1b64      	subs	r4, r4, r5
 8004c44:	10a4      	asrs	r4, r4, #2
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	00b3      	lsls	r3, r6, #2
 8004c4e:	58eb      	ldr	r3, [r5, r3]
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	00b3      	lsls	r3, r6, #2
 8004c58:	58eb      	ldr	r3, [r5, r3]
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08004d1c 	.word	0x08004d1c
 8004c64:	08004d1c 	.word	0x08004d1c
 8004c68:	08004d20 	.word	0x08004d20
 8004c6c:	08004d1c 	.word	0x08004d1c

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
