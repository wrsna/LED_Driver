
CELKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080048d8  080048d8  000058d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800496c  0800496c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800496c  0800496c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004974  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08004980  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004980  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d641  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002368  00000000  00000000  00013675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000159e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  000166f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000141d9  00000000  00000000  00017103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa9e  00000000  00000000  0002b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f849  00000000  00000000  0003ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba5c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  000ba608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000bd468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048c0 	.word	0x080048c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080048c0 	.word	0x080048c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 fb1a 	bl	8004868 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000234:	4b2e      	ldr	r3, [pc, #184]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000236:	4a2f      	ldr	r2, [pc, #188]	@ (80002f4 <MX_ADC1_Init+0xd4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800023a:	4b2d      	ldr	r3, [pc, #180]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800023c:	22c0      	movs	r2, #192	@ 0xc0
 800023e:	0612      	lsls	r2, r2, #24
 8000240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000242:	4b2b      	ldr	r3, [pc, #172]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b29      	ldr	r3, [pc, #164]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b28      	ldr	r3, [pc, #160]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000254:	4b26      	ldr	r3, [pc, #152]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000256:	2204      	movs	r2, #4
 8000258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800025a:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800025c:	2200      	movs	r2, #0
 800025e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000260:	4b23      	ldr	r3, [pc, #140]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000262:	2200      	movs	r2, #0
 8000264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000266:	4b22      	ldr	r3, [pc, #136]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000268:	2200      	movs	r2, #0
 800026a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800026c:	4b20      	ldr	r3, [pc, #128]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800026e:	2201      	movs	r2, #1
 8000270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000272:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000274:	2220      	movs	r2, #32
 8000276:	2100      	movs	r1, #0
 8000278:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800027a:	4b1d      	ldr	r3, [pc, #116]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800027c:	2298      	movs	r2, #152	@ 0x98
 800027e:	00d2      	lsls	r2, r2, #3
 8000280:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000282:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000284:	2280      	movs	r2, #128	@ 0x80
 8000286:	00d2      	lsls	r2, r2, #3
 8000288:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028a:	4b19      	ldr	r3, [pc, #100]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800028c:	222c      	movs	r2, #44	@ 0x2c
 800028e:	2100      	movs	r1, #0
 8000290:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000292:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 8000294:	2200      	movs	r2, #0
 8000296:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 800029a:	2200      	movs	r2, #0
 800029c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800029e:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 80002a6:	223c      	movs	r2, #60	@ 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 ffdb 	bl	8001270 <HAL_ADC_Init>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80002be:	f000 f9e1 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4a0c      	ldr	r2, [pc, #48]	@ (80002f8 <MX_ADC1_Init+0xd8>)
 80002c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3a      	adds	r2, r7, #4
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <MX_ADC1_Init+0xd0>)
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 fbb6 	bl	8001a4c <HAL_ADC_ConfigChannel>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80002e4:	f000 f9ce 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b004      	add	sp, #16
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40012400 	.word	0x40012400
 80002f8:	30001000 	.word	0x30001000

080002fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b091      	sub	sp, #68	@ 0x44
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000304:	232c      	movs	r3, #44	@ 0x2c
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	0018      	movs	r0, r3
 800030a:	2314      	movs	r3, #20
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f004 faaa 	bl	8004868 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	2410      	movs	r4, #16
 8000316:	193b      	adds	r3, r7, r4
 8000318:	0018      	movs	r0, r3
 800031a:	231c      	movs	r3, #28
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f004 faa2 	bl	8004868 <memset>
  if(adcHandle->Instance==ADC1)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a27      	ldr	r2, [pc, #156]	@ (80003c8 <HAL_ADC_MspInit+0xcc>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d147      	bne.n	80003be <HAL_ADC_MspInit+0xc2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2280      	movs	r2, #128	@ 0x80
 8000332:	01d2      	lsls	r2, r2, #7
 8000334:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000336:	193b      	adds	r3, r7, r4
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	f002 fd62 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000348:	f000 f99c 	bl	8000684 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 800034e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 8000352:	2180      	movs	r1, #128	@ 0x80
 8000354:	0349      	lsls	r1, r1, #13
 8000356:	430a      	orrs	r2, r1
 8000358:	641a      	str	r2, [r3, #64]	@ 0x40
 800035a:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 800035c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800035e:	2380      	movs	r3, #128	@ 0x80
 8000360:	035b      	lsls	r3, r3, #13
 8000362:	4013      	ands	r3, r2
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 800036a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800036c:	4b17      	ldr	r3, [pc, #92]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 800036e:	2101      	movs	r1, #1
 8000370:	430a      	orrs	r2, r1
 8000372:	635a      	str	r2, [r3, #52]	@ 0x34
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_ADC_MspInit+0xd0>)
 8000376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_BAT_Pin|ADC1_TEMP_Pin;
 8000380:	212c      	movs	r1, #44	@ 0x2c
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2288      	movs	r2, #136	@ 0x88
 8000386:	0152      	lsls	r2, r2, #5
 8000388:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	2203      	movs	r2, #3
 800038e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	187a      	adds	r2, r7, r1
 8000398:	23a0      	movs	r3, #160	@ 0xa0
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	0011      	movs	r1, r2
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 ff6c 	bl	800227c <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA8);
 80003a4:	23c0      	movs	r3, #192	@ 0xc0
 80003a6:	039b      	lsls	r3, r3, #14
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fdcf 	bl	8000f4c <HAL_SYSCFG_SetPinBinding>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200c      	movs	r0, #12
 80003b4:	f001 ff20 	bl	80021f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003b8:	200c      	movs	r0, #12
 80003ba:	f001 ff32 	bl	8002222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b011      	add	sp, #68	@ 0x44
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	40012400 	.word	0x40012400
 80003cc:	40021000 	.word	0x40021000

080003d0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0b      	ldr	r2, [pc, #44]	@ (800040c <HAL_ADC_MspDeInit+0x3c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d110      	bne.n	8000404 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <HAL_ADC_MspDeInit+0x40>)
 80003e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <HAL_ADC_MspDeInit+0x40>)
 80003e8:	490a      	ldr	r1, [pc, #40]	@ (8000414 <HAL_ADC_MspDeInit+0x44>)
 80003ea:	400a      	ands	r2, r1
 80003ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /**ADC1 GPIO Configuration
    PA8     ------> ADC1_IN8
    PA12 [PA10]     ------> ADC1_IN12
    */
    HAL_GPIO_DeInit(GPIOA, ADC1_BAT_Pin|ADC1_TEMP_Pin);
 80003ee:	2388      	movs	r3, #136	@ 0x88
 80003f0:	015a      	lsls	r2, r3, #5
 80003f2:	23a0      	movs	r3, #160	@ 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f8a9 	bl	8002550 <HAL_GPIO_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 80003fe:	200c      	movs	r0, #12
 8000400:	f001 ff1f 	bl	8002242 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000404:	46c0      	nop			@ (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40012400 	.word	0x40012400
 8000410:	40021000 	.word	0x40021000
 8000414:	ffefffff 	.word	0xffefffff

08000418 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b087      	sub	sp, #28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000420:	240c      	movs	r4, #12
 8000422:	193b      	adds	r3, r7, r4
 8000424:	0018      	movs	r0, r3
 8000426:	230c      	movs	r3, #12
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f004 fa1c 	bl	8004868 <memset>
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000436:	193b      	adds	r3, r7, r4
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]

	  if(sConfig.Channel == ADC_CHANNEL_8)
 800043c:	193b      	adds	r3, r7, r4
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a22      	ldr	r2, [pc, #136]	@ (80004cc <HAL_ADC_ConvCpltCallback+0xb4>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d10a      	bne.n	800045c <HAL_ADC_ConvCpltCallback+0x44>
	  {
		  hlamp.ADC_Results[BATT_LOCATION] = HAL_ADC_GetValue(hadc);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	0018      	movs	r0, r3
 800044a:	f001 f9cb 	bl	80017e4 <HAL_ADC_GetValue>
 800044e:	0002      	movs	r2, r0
 8000450:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000452:	609a      	str	r2, [r3, #8]
		  sConfig.Channel = ADC_CHANNEL_12;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	4a1f      	ldr	r2, [pc, #124]	@ (80004d4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	e00a      	b.n	8000472 <HAL_ADC_ConvCpltCallback+0x5a>
	  }
	  else
	  {
		  hlamp.ADC_Results[TEMP_LOCATION] = HAL_ADC_GetValue(hadc);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	0018      	movs	r0, r3
 8000460:	f001 f9c0 	bl	80017e4 <HAL_ADC_GetValue>
 8000464:	0002      	movs	r2, r0
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000468:	605a      	str	r2, [r3, #4]
		  sConfig.Channel = ADC_CHANNEL_8;
 800046a:	230c      	movs	r3, #12
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	4a17      	ldr	r2, [pc, #92]	@ (80004cc <HAL_ADC_ConvCpltCallback+0xb4>)
 8000470:	601a      	str	r2, [r3, #0]
	  }

	  // check status and turn lamp off if overhit or batt low
	  if((hlamp.status == LAMP_ON) && ((hlamp.ADC_Results[TEMP_LOCATION] >= TEMP_TH) || (hlamp.ADC_Results[BATT_LOCATION] <= BATT_TH)))
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d118      	bne.n	80004ac <HAL_ADC_ConvCpltCallback+0x94>
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	4a16      	ldr	r2, [pc, #88]	@ (80004d8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d804      	bhi.n	800048e <HAL_ADC_ConvCpltCallback+0x76>
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a14      	ldr	r2, [pc, #80]	@ (80004dc <HAL_ADC_ConvCpltCallback+0xc4>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d80e      	bhi.n	80004ac <HAL_ADC_ConvCpltCallback+0x94>
	  {
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 800048e:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2296      	movs	r2, #150	@ 0x96
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	641a      	str	r2, [r3, #64]	@ 0x40
		 hlamp.helth = (hlamp.ADC_Results[TEMP_LOCATION] >= TEMP_TH) ? LAMP_TEMP_ERR : LAMP_BATT_ERR;
 8000498:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <HAL_ADC_ConvCpltCallback+0xc0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d901      	bls.n	80004a6 <HAL_ADC_ConvCpltCallback+0x8e>
 80004a2:	2202      	movs	r2, #2
 80004a4:	e000      	b.n	80004a8 <HAL_ADC_ConvCpltCallback+0x90>
 80004a6:	2201      	movs	r2, #1
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <HAL_ADC_ConvCpltCallback+0xb8>)
 80004aa:	709a      	strb	r2, [r3, #2]

	  }


	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fa      	adds	r2, r7, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fac9 	bl	8001a4c <HAL_ADC_ConfigChannel>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <HAL_ADC_ConvCpltCallback+0xaa>
	  {
		Error_Handler();
 80004be:	f000 f8e1 	bl	8000684 <Error_Handler>
	  }

		//HAL_ADC_Start_IT(hadc); ///!!!! trigger timer????
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b007      	add	sp, #28
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	20000100 	.word	0x20000100
 80004d0:	20000170 	.word	0x20000170
 80004d4:	30001000 	.word	0x30001000
 80004d8:	00000739 	.word	0x00000739
 80004dc:	0000073a 	.word	0x0000073a
 80004e0:	2000008c 	.word	0x2000008c

080004e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	@ 0x24
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	240c      	movs	r4, #12
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f004 f9b7 	bl	8004868 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_GPIO_Init+0x80>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <MX_GPIO_Init+0x80>)
 8000500:	2102      	movs	r1, #2
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_GPIO_Init+0x80>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050a:	2202      	movs	r2, #2
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_GPIO_Init+0x80>)
 8000514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000516:	4b13      	ldr	r3, [pc, #76]	@ (8000564 <MX_GPIO_Init+0x80>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <MX_GPIO_Init+0x80>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2280      	movs	r2, #128	@ 0x80
 800052e:	0192      	lsls	r2, r2, #6
 8000530:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	4a0c      	ldr	r2, [pc, #48]	@ (8000568 <MX_GPIO_Init+0x84>)
 8000536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800053e:	193a      	adds	r2, r7, r4
 8000540:	23a0      	movs	r3, #160	@ 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f001 fe98 	bl	800227c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2007      	movs	r0, #7
 8000552:	f001 fe51 	bl	80021f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000556:	2007      	movs	r0, #7
 8000558:	f001 fe63 	bl	8002222 <HAL_NVIC_EnableIRQ>

}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b009      	add	sp, #36	@ 0x24
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	10210000 	.word	0x10210000

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	GPIO_PinState button 	= GPIO_PIN_SET;
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
	GPIO_PinState buttonOld = GPIO_PIN_SET;
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]

    extern LAMP_HandleTypedef hlamp;
    hlamp.ADC_Results[TEMP_LOCATION] = 0;
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <main+0x88>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
    hlamp.ADC_Results[BATT_LOCATION] = 4095;
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <main+0x88>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	@ (80005f8 <main+0x8c>)
 8000588:	609a      	str	r2, [r3, #8]
	hlamp.status = LAMP_OFF;
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <main+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	hlamp.setup  = LAMP_SETUP_OFF;
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <main+0x88>)
 8000592:	2203      	movs	r2, #3
 8000594:	705a      	strb	r2, [r3, #1]
	hlamp.button = 0;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <main+0x88>)
 8000598:	2200      	movs	r2, #0
 800059a:	70da      	strb	r2, [r3, #3]
	hlamp.helth  = LAMP_OK;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <main+0x88>)
 800059e:	2200      	movs	r2, #0
 80005a0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc55 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f829 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f7ff ff9b 	bl	80004e4 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 80005ae:	1dbc      	adds	r4, r7, #6
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	019a      	lsls	r2, r3, #6
 80005b4:	23a0      	movs	r3, #160	@ 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 f898 	bl	80026f0 <HAL_GPIO_ReadPin>
 80005c0:	0003      	movs	r3, r0
 80005c2:	7023      	strb	r3, [r4, #0]
	  if(buttonOld == GPIO_PIN_SET && button == GPIO_PIN_RESET)
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10d      	bne.n	80005e8 <main+0x7c>
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d109      	bne.n	80005e8 <main+0x7c>
	  {

		  hlamp.button++;
 80005d4:	4b07      	ldr	r3, [pc, #28]	@ (80005f4 <main+0x88>)
 80005d6:	78db      	ldrb	r3, [r3, #3]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <main+0x88>)
 80005de:	70da      	strb	r2, [r3, #3]

		  Lamp_Start();
 80005e0:	f000 fb32 	bl	8000c48 <Lamp_Start>
		  Lamp_SetPower();
 80005e4:	f000 fb72 	bl	8000ccc <Lamp_SetPower>

	  }
	  buttonOld = button;
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	1dba      	adds	r2, r7, #6
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
	  button = HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin);
 80005f0:	e7dd      	b.n	80005ae <main+0x42>
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	20000170 	.word	0x20000170
 80005f8:	00000fff 	.word	0x00000fff

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b08d      	sub	sp, #52	@ 0x34
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	2414      	movs	r4, #20
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	231c      	movs	r3, #28
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f004 f92b 	bl	8004868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2314      	movs	r3, #20
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f004 f924 	bl	8004868 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2202      	movs	r2, #2
 8000624:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2280      	movs	r2, #128	@ 0x80
 8000632:	0152      	lsls	r2, r2, #5
 8000634:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2240      	movs	r2, #64	@ 0x40
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	193b      	adds	r3, r7, r4
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f8b2 	bl	80027a8 <HAL_RCC_OscConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000648:	f000 f81c 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	003b      	movs	r3, r7
 800064e:	2207      	movs	r2, #7
 8000650:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000652:	003b      	movs	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	003b      	movs	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800065e:	003b      	movs	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	003b      	movs	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fa7e 	bl	8002b70 <HAL_RCC_ClockConfig>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000678:	f000 f804 	bl	8000684 <Error_Handler>
  }
}
 800067c:	46c0      	nop			@ (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b00d      	add	sp, #52	@ 0x34
 8000682:	bd90      	pop	{r4, r7, pc}

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 750);
 800068c:	4b02      	ldr	r3, [pc, #8]	@ (8000698 <Error_Handler+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a02      	ldr	r2, [pc, #8]	@ (800069c <Error_Handler+0x18>)
 8000692:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x10>
 8000698:	2000008c 	.word	0x2000008c
 800069c:	000002ee 	.word	0x000002ee

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <HAL_MspInit+0x44>)
 80006a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_MspInit+0x44>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <HAL_MspInit+0x44>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <HAL_MspInit+0x44>)
 80006c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_MspInit+0x44>)
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	0549      	lsls	r1, r1, #21
 80006c8:	430a      	orrs	r2, r1
 80006ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <HAL_MspInit+0x44>)
 80006ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	055b      	lsls	r3, r3, #21
 80006d4:	4013      	ands	r3, r2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 fc00 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	0018      	movs	r0, r3
 8000724:	f002 f802 	bl	800272c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000734:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <ADC1_IRQHandler+0x14>)
 8000736:	0018      	movs	r0, r3
 8000738:	f001 f860 	bl	80017fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	20000028 	.word	0x20000028

08000748 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <TIM14_IRQHandler+0x14>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f8aa 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	20000124 	.word	0x20000124

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <SystemInit+0x14>)
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	0512      	lsls	r2, r2, #20
 800076a:	609a      	str	r2, [r3, #8]
#endif
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	@ 0x70
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	2360      	movs	r3, #96	@ 0x60
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	0018      	movs	r0, r3
 8000784:	2310      	movs	r3, #16
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f004 f86d 	bl	8004868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078e:	2354      	movs	r3, #84	@ 0x54
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	0018      	movs	r0, r3
 8000794:	230c      	movs	r3, #12
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f004 f865 	bl	8004868 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	2338      	movs	r3, #56	@ 0x38
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	231c      	movs	r3, #28
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f004 f85d 	bl	8004868 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	2334      	movs	r3, #52	@ 0x34
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f004 f856 	bl	8004868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007bc:	4b54      	ldr	r3, [pc, #336]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007be:	4a55      	ldr	r2, [pc, #340]	@ (8000914 <MX_TIM1_Init+0x19c>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80007c2:	4b53      	ldr	r3, [pc, #332]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007c4:	2213      	movs	r2, #19
 80007c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b51      	ldr	r3, [pc, #324]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007ce:	4b50      	ldr	r3, [pc, #320]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007d0:	4a51      	ldr	r2, [pc, #324]	@ (8000918 <MX_TIM1_Init+0x1a0>)
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007da:	4b4d      	ldr	r3, [pc, #308]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000910 <MX_TIM1_Init+0x198>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fbfb 	bl	8002fe4 <HAL_TIM_Base_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007f2:	f7ff ff47 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	2160      	movs	r1, #96	@ 0x60
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	0152      	lsls	r2, r2, #5
 80007fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000800:	187a      	adds	r2, r7, r1
 8000802:	4b43      	ldr	r3, [pc, #268]	@ (8000910 <MX_TIM1_Init+0x198>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f003 fa50 	bl	8003cac <HAL_TIM_ConfigClockSource>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000810:	f7ff ff38 	bl	8000684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000814:	4b3e      	ldr	r3, [pc, #248]	@ (8000910 <MX_TIM1_Init+0x198>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fd54 	bl	80032c4 <HAL_TIM_PWM_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000820:	f7ff ff30 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2154      	movs	r1, #84	@ 0x54
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000838:	187a      	adds	r2, r7, r1
 800083a:	4b35      	ldr	r3, [pc, #212]	@ (8000910 <MX_TIM1_Init+0x198>)
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f003 fef2 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000848:	f7ff ff1c 	bl	8000684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2138      	movs	r1, #56	@ 0x38
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2260      	movs	r2, #96	@ 0x60
 8000852:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500-1;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	22f4      	movs	r2, #244	@ 0xf4
 8000858:	32ff      	adds	r2, #255	@ 0xff
 800085a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000874:	1879      	adds	r1, r7, r1
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_TIM1_Init+0x198>)
 8000878:	220c      	movs	r2, #12
 800087a:	0018      	movs	r0, r3
 800087c:	f003 f916 	bl	8003aac <HAL_TIM_PWM_ConfigChannel>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000884:	f7ff fefe 	bl	8000684 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_TIM1_Init+0x198>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	69da      	ldr	r2, [r3, #28]
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_TIM1_Init+0x198>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4922      	ldr	r1, [pc, #136]	@ (800091c <MX_TIM1_Init+0x1a4>)
 8000894:	400a      	ands	r2, r1
 8000896:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	0192      	lsls	r2, r2, #6
 80008bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	0492      	lsls	r2, r2, #18
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	1d3a      	adds	r2, r7, #4
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_TIM1_Init+0x198>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 fefb 	bl	80046ec <HAL_TIMEx_ConfigBreakDeadTime>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80008fa:	f7ff fec3 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <MX_TIM1_Init+0x198>)
 8000900:	0018      	movs	r0, r3
 8000902:	f000 f8df 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b01c      	add	sp, #112	@ 0x70
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	2000008c 	.word	0x2000008c
 8000914:	40012c00 	.word	0x40012c00
 8000918:	000003e7 	.word	0x000003e7
 800091c:	fffff7ff 	.word	0xfffff7ff

08000920 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	2310      	movs	r3, #16
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	2310      	movs	r3, #16
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f003 ff99 	bl	8004868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	230c      	movs	r3, #12
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 ff92 	bl	8004868 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 8000946:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <MX_TIM3_Init+0xa4>)
 8000948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12000;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 800094c:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <MX_TIM3_Init+0xa8>)
 800094e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15000;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 8000958:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <MX_TIM3_Init+0xac>)
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fb3a 	bl	8002fe4 <HAL_TIM_Base_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000974:	f7ff fe86 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	2110      	movs	r1, #16
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	0152      	lsls	r2, r2, #5
 8000980:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000982:	187a      	adds	r2, r7, r1
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f003 f98f 	bl	8003cac <HAL_TIM_ConfigClockSource>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000992:	f7ff fe77 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2220      	movs	r2, #32
 800099a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_TIM3_Init+0xa0>)
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f003 fe3d 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009b2:	f7ff fe67 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b008      	add	sp, #32
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	200000d8 	.word	0x200000d8
 80009c4:	40000400 	.word	0x40000400
 80009c8:	00002ee0 	.word	0x00002ee0
 80009cc:	00003a98 	.word	0x00003a98

080009d0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <MX_TIM14_Init+0x44>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12000;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <MX_TIM14_Init+0x48>)
 80009de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <MX_TIM14_Init+0x4c>)
 80009ea:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <MX_TIM14_Init+0x40>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 faf2 	bl	8002fe4 <HAL_TIM_Base_Init>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a04:	f7ff fe3e 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000124 	.word	0x20000124
 8000a14:	40002000 	.word	0x40002000
 8000a18:	00002ee0 	.word	0x00002ee0
 8000a1c:	00001388 	.word	0x00001388

08000a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <HAL_TIM_Base_MspInit+0x94>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10e      	bne.n	8000a50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a36:	4b20      	ldr	r3, [pc, #128]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0109      	lsls	r1, r1, #4
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	4013      	ands	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000a4e:	e02c      	b.n	8000aaa <HAL_TIM_Base_MspInit+0x8a>
  else if(tim_baseHandle->Instance==TIM3)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_TIM_Base_MspInit+0x9c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10c      	bne.n	8000a74 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a60:	2102      	movs	r1, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a66:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
}
 8000a72:	e01a      	b.n	8000aaa <HAL_TIM_Base_MspInit+0x8a>
  else if(tim_baseHandle->Instance==TIM14)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a11      	ldr	r2, [pc, #68]	@ (8000ac0 <HAL_TIM_Base_MspInit+0xa0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d115      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	0209      	lsls	r1, r1, #8
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_TIM_Base_MspInit+0x98>)
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2013      	movs	r0, #19
 8000aa0:	f001 fbaa 	bl	80021f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000aa4:	2013      	movs	r0, #19
 8000aa6:	f001 fbbc 	bl	8002222 <HAL_NVIC_EnableIRQ>
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b006      	add	sp, #24
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40000400 	.word	0x40000400
 8000ac0:	40002000 	.word	0x40002000

08000ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	240c      	movs	r4, #12
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f003 fec6 	bl	8004868 <memset>
  if(timHandle->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <HAL_TIM_MspPostInit+0x78>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d126      	bne.n	8000b34 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <HAL_TIM_MspPostInit+0x7c>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_TIM_MspPostInit+0x7c>)
 8000aec:	2102      	movs	r1, #2
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_TIM_MspPostInit+0x7c>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2202      	movs	r2, #2
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB7     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_PWM_Pin;
 8000afe:	0021      	movs	r1, r4
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2202      	movs	r2, #2
 8000b0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_TIM_MspPostInit+0x80>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	0010      	movs	r0, r2
 8000b26:	f001 fba9 	bl	800227c <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN1_PB7);
 8000b2a:	23c0      	movs	r3, #192	@ 0xc0
 8000b2c:	029b      	lsls	r3, r3, #10
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fa0c 	bl	8000f4c <HAL_SYSCFG_SetPinBinding>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b009      	add	sp, #36	@ 0x24
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	40012c00 	.word	0x40012c00
 8000b40:	40021000 	.word	0x40021000
 8000b44:	50000400 	.word	0x50000400

08000b48 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <HAL_TIM_Base_MspDeInit+0x5c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d106      	bne.n	8000b68 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b60:	4912      	ldr	r1, [pc, #72]	@ (8000bac <HAL_TIM_Base_MspDeInit+0x64>)
 8000b62:	400a      	ands	r2, r1
 8000b64:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }
}
 8000b66:	e019      	b.n	8000b9c <HAL_TIM_Base_MspDeInit+0x54>
  else if(tim_baseHandle->Instance==TIM3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_Base_MspDeInit+0x68>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b78:	2102      	movs	r1, #2
 8000b7a:	438a      	bics	r2, r1
 8000b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7e:	e00d      	b.n	8000b9c <HAL_TIM_Base_MspDeInit+0x54>
  else if(tim_baseHandle->Instance==TIM14)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d108      	bne.n	8000b9c <HAL_TIM_Base_MspDeInit+0x54>
    __HAL_RCC_TIM14_CLK_DISABLE();
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_TIM_Base_MspDeInit+0x60>)
 8000b90:	4909      	ldr	r1, [pc, #36]	@ (8000bb8 <HAL_TIM_Base_MspDeInit+0x70>)
 8000b92:	400a      	ands	r2, r1
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8000b96:	2013      	movs	r0, #19
 8000b98:	f001 fb53 	bl	8002242 <HAL_NVIC_DisableIRQ>
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	fffff7ff 	.word	0xfffff7ff
 8000bb0:	40000400 	.word	0x40000400
 8000bb4:	40002000 	.word	0x40002000
 8000bb8:	ffff7fff 	.word	0xffff7fff

08000bbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10a      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		hlamp.setup = LAMP_SETUP_OFF;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	705a      	strb	r2, [r3, #1]


		if(HAL_TIM_Base_Stop(htim) != HAL_OK)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 fb00 	bl	80031dc <HAL_TIM_Base_Stop>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x28>
		{
			Error_Handler();
 8000be0:	f7ff fd50 	bl	8000684 <Error_Handler>
		}
	}
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40002000 	.word	0x40002000
 8000bf0:	20000170 	.word	0x20000170

08000bf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf8:	f7ff fdb2 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <LoopForever+0xa>)
  ldr r3, =_edata
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <LoopForever+0xe>)
  adds r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopForever+0x12>)
  b LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1a:	3204      	adds	r2, #4

08000c1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <LoopForever+0x16>)
  cmp r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c22:	f003 fe29 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fca1 	bl	800056c <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c30:	08004974 	.word	0x08004974
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c40:	20000180 	.word	0x20000180

08000c44 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <DMA1_Channel1_IRQHandler>
	...

08000c48 <Lamp_Start>:

LAMP_HandleTypedef hlamp;


void Lamp_Start(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	if(hlamp.status == LAMP_OFF)
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <Lamp_Start+0x70>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d12e      	bne.n	8000cb2 <Lamp_Start+0x6a>
	{
		hlamp.status = LAMP_ON;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <Lamp_Start+0x70>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]

	    MX_ADC1_Init();
 8000c5a:	f7ff fae1 	bl	8000220 <MX_ADC1_Init>
	    MX_TIM14_Init();
 8000c5e:	f7ff feb7 	bl	80009d0 <MX_TIM14_Init>
	    MX_TIM1_Init();
 8000c62:	f7ff fd89 	bl	8000778 <MX_TIM1_Init>
	    MX_TIM3_Init();
 8000c66:	f7ff fe5b 	bl	8000920 <MX_TIM3_Init>

		// start 5s setup timer
		if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <Lamp_Start+0x74>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f002 fadb 	bl	8003228 <HAL_TIM_Base_Start_IT>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <Lamp_Start+0x32>
		{
			Error_Handler();
 8000c76:	f7ff fd05 	bl	8000684 <Error_Handler>
		}


		hlamp.setup = LAMP_SETUP_ON;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <Lamp_Start+0x70>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	705a      	strb	r2, [r3, #1]

		// start adc timer
		if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <Lamp_Start+0x78>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f002 fa64 	bl	8003150 <HAL_TIM_Base_Start>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <Lamp_Start+0x48>
		{
			Error_Handler();
 8000c8c:	f7ff fcfa 	bl	8000684 <Error_Handler>
		}

		// start lamp pwm
		if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <Lamp_Start+0x7c>)
 8000c92:	210c      	movs	r1, #12
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fbdb 	bl	8003450 <HAL_TIM_PWM_Start>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <Lamp_Start+0x5a>
		{
			Error_Handler();
 8000c9e:	f7ff fcf1 	bl	8000684 <Error_Handler>
		}

		if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <Lamp_Start+0x80>)
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fd25 	bl	80016f4 <HAL_ADC_Start_IT>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d001      	beq.n	8000cb2 <Lamp_Start+0x6a>
		{
			Error_Handler();
 8000cae:	f7ff fce9 	bl	8000684 <Error_Handler>
		}
	}

}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000170 	.word	0x20000170
 8000cbc:	20000124 	.word	0x20000124
 8000cc0:	200000d8 	.word	0x200000d8
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	20000028 	.word	0x20000028

08000ccc <Lamp_SetPower>:


void Lamp_SetPower(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	if(hlamp.setup == LAMP_SETUP_ON)
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d12b      	bne.n	8000d30 <Lamp_SetPower+0x64>
	{
		switch(hlamp.button)
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d011      	beq.n	8000d04 <Lamp_SetPower+0x38>
 8000ce0:	dc16      	bgt.n	8000d10 <Lamp_SetPower+0x44>
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d002      	beq.n	8000cec <Lamp_SetPower+0x20>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d006      	beq.n	8000cf8 <Lamp_SetPower+0x2c>
 8000cea:	e011      	b.n	8000d10 <Lamp_SetPower+0x44>
		{
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2296      	movs	r2, #150	@ 0x96
 8000cf2:	0052      	lsls	r2, r2, #1
 8000cf4:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000cf6:	e027      	b.n	8000d48 <Lamp_SetPower+0x7c>
		case 2:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 600);
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2296      	movs	r2, #150	@ 0x96
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000d02:	e021      	b.n	8000d48 <Lamp_SetPower+0x7c>
		case 3:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	22fa      	movs	r2, #250	@ 0xfa
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000d0e:	e01b      	b.n	8000d48 <Lamp_SetPower+0x7c>
		default:
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	641a      	str	r2, [r3, #64]	@ 0x40
		    Lamp_DeInit();
 8000d18:	f000 f82a 	bl	8000d70 <Lamp_DeInit>

		    hlamp.button = 0;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	70da      	strb	r2, [r3, #3]
		    hlamp.status = LAMP_OFF;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		    hlamp.setup = LAMP_SETUP_OFF;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	705a      	strb	r2, [r3, #1]
			break;
 8000d2e:	e00b      	b.n	8000d48 <Lamp_SetPower+0x7c>

	}
	// turn off lamp
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	641a      	str	r2, [r3, #64]	@ 0x40

		Lamp_DeInit();
 8000d38:	f000 f81a 	bl	8000d70 <Lamp_DeInit>
		hlamp.status = LAMP_OFF;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
		hlamp.button = 0;
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	70da      	strb	r2, [r3, #3]
	}

	//forcee low state (batt, Temp)
	if((hlamp.helth != LAMP_OK) && (hlamp.status != LAMP_OFF))
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d008      	beq.n	8000d62 <Lamp_SetPower+0x96>
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <Lamp_SetPower+0x9c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <Lamp_SetPower+0x96>
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 300);
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <Lamp_SetPower+0xa0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2296      	movs	r2, #150	@ 0x96
 8000d5e:	0052      	lsls	r2, r2, #1
 8000d60:	641a      	str	r2, [r3, #64]	@ 0x40
	}

}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000170 	.word	0x20000170
 8000d6c:	2000008c 	.word	0x2000008c

08000d70 <Lamp_DeInit>:

void Lamp_DeInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	//#############ADC_Deinit################################
	if(HAL_ADC_DeInit(&hadc1) != HAL_OK)
 8000d74:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <Lamp_DeInit+0xa0>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 fc20 	bl	80015bc <HAL_ADC_DeInit>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <Lamp_DeInit+0x14>
	{
		Error_Handler();
 8000d80:	f7ff fc80 	bl	8000684 <Error_Handler>
	//#######################################################



	//###########5sTIM_Deinit################################
	if(HAL_TIM_OnePulse_Stop_IT(&htim14,0) != HAL_OK)
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <Lamp_DeInit+0xa4>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fd0d 	bl	80037a8 <HAL_TIM_OnePulse_Stop_IT>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <Lamp_DeInit+0x26>
	{
		Error_Handler();
 8000d92:	f7ff fc77 	bl	8000684 <Error_Handler>
	}
	if(HAL_TIM_OnePulse_DeInit(&htim14) != HAL_OK)
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <Lamp_DeInit+0xa4>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fcb7 	bl	800370c <HAL_TIM_OnePulse_DeInit>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <Lamp_DeInit+0x36>
	{
		Error_Handler();
 8000da2:	f7ff fc6f 	bl	8000684 <Error_Handler>
	}
	if(HAL_TIM_Base_DeInit(&htim14) != HAL_OK)
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <Lamp_DeInit+0xa4>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 f973 	bl	8003094 <HAL_TIM_Base_DeInit>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <Lamp_DeInit+0x46>
	{
		Error_Handler();
 8000db2:	f7ff fc67 	bl	8000684 <Error_Handler>




	//#############PWM_OUT_Deinit############################
	if(HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <Lamp_DeInit+0xa8>)
 8000db8:	210c      	movs	r1, #12
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f002 fc20 	bl	8003600 <HAL_TIM_PWM_Stop>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <Lamp_DeInit+0x58>
	{
		Error_Handler();
 8000dc4:	f7ff fc5e 	bl	8000684 <Error_Handler>
	}
	if(HAL_TIM_PWM_DeInit(&htim1) != HAL_OK)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <Lamp_DeInit+0xa8>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fad2 	bl	8003374 <HAL_TIM_PWM_DeInit>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <Lamp_DeInit+0x68>
	{
		Error_Handler();
 8000dd4:	f7ff fc56 	bl	8000684 <Error_Handler>
	}
	if(HAL_TIM_Base_DeInit(&htim1) != HAL_OK)
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <Lamp_DeInit+0xa8>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 f95a 	bl	8003094 <HAL_TIM_Base_DeInit>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <Lamp_DeInit+0x78>
	{
		Error_Handler();
 8000de4:	f7ff fc4e 	bl	8000684 <Error_Handler>




	//###########ADC_Triger_Deinit##########################
	if(HAL_TIM_Base_Stop(&htim3) != HAL_OK)
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <Lamp_DeInit+0xac>)
 8000dea:	0018      	movs	r0, r3
 8000dec:	f002 f9f6 	bl	80031dc <HAL_TIM_Base_Stop>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <Lamp_DeInit+0x88>
	{
		Error_Handler();
 8000df4:	f7ff fc46 	bl	8000684 <Error_Handler>
	}
	if(HAL_TIM_Base_DeInit(&htim3) != HAL_OK)
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <Lamp_DeInit+0xac>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 f94a 	bl	8003094 <HAL_TIM_Base_DeInit>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <Lamp_DeInit+0x98>
	{
		Error_Handler();
 8000e04:	f7ff fc3e 	bl	8000684 <Error_Handler>
	}
	//######################################################

}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	20000028 	.word	0x20000028
 8000e14:	20000124 	.word	0x20000124
 8000e18:	2000008c 	.word	0x2000008c
 8000e1c:	200000d8 	.word	0x200000d8

08000e20 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	0c12      	lsrs	r2, r2, #16
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1a      	lsrs	r2, r3, #16
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	40010000 	.word	0x40010000

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f80f 	bl	8000e80 <HAL_InitTick>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e001      	b.n	8000e72 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6e:	f7ff fc17 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_InitTick+0x88>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <HAL_InitTick+0x8c>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_InitTick+0x88>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	23fa      	movs	r3, #250	@ 0xfa
 8000ea4:	0098      	lsls	r0, r3, #2
 8000ea6:	f7ff f92f 	bl	8000108 <__udivsi3>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0019      	movs	r1, r3
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f7ff f92a 	bl	8000108 <__udivsi3>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 f9d3 	bl	8002262 <HAL_SYSTICK_Config>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d112      	bne.n	8000ee6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d80a      	bhi.n	8000edc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	425b      	negs	r3, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f992 	bl	80021f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_InitTick+0x90>)
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e00d      	b.n	8000ef8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e008      	b.n	8000ef8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e003      	b.n	8000ef8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	781b      	ldrb	r3, [r3, #0]
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b005      	add	sp, #20
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	18d2      	adds	r2, r2, r3
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	20000008 	.word	0x20000008
 8000f34:	2000017c 	.word	0x2000017c

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	@ (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	2000017c 	.word	0x2000017c

08000f4c <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff62 	bl	8000e20 <LL_SYSCFG_ConfigPinMux>
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f74:	401a      	ands	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	ff3fffff 	.word	0xff3fffff

08000f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	23c0      	movs	r3, #192	@ 0xc0
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	4013      	ands	r3, r2
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	2104      	movs	r1, #4
 8000fba:	400a      	ands	r2, r1
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2104      	movs	r1, #4
 8000fca:	400b      	ands	r3, r1
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4099      	lsls	r1, r3
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	4091      	lsls	r1, r2
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2104      	movs	r1, #4
 8001000:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001002:	40da      	lsrs	r2, r3
 8001004:	0013      	movs	r3, r2
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}

0800100e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	23c0      	movs	r3, #192	@ 0xc0
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4013      	ands	r3, r2
 8001020:	d101      	bne.n	8001026 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	211f      	movs	r1, #31
 8001044:	400a      	ands	r2, r1
 8001046:	210f      	movs	r1, #15
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0e9b      	lsrs	r3, r3, #26
 8001054:	210f      	movs	r1, #15
 8001056:	4019      	ands	r1, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	201f      	movs	r0, #31
 800105c:	4003      	ands	r3, r0
 800105e:	4099      	lsls	r1, r3
 8001060:	000b      	movs	r3, r1
 8001062:	431a      	orrs	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b004      	add	sp, #16
 800106e:	bd80      	pop	{r7, pc}

08001070 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	0a5b      	lsrs	r3, r3, #9
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	0252      	lsls	r2, r2, #9
 80010a4:	0a52      	lsrs	r2, r2, #9
 80010a6:	43d2      	mvns	r2, r2
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2203      	movs	r2, #3
 80010c4:	4013      	ands	r3, r2
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	0212      	lsls	r2, r2, #8
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	400b      	ands	r3, r1
 80010f0:	4904      	ldr	r1, [pc, #16]	@ (8001104 <LL_ADC_SetChannelSamplingTime+0x34>)
 80010f2:	400b      	ands	r3, r1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010fa:	46c0      	nop			@ (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	7fffff00 	.word	0x7fffff00

08001108 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <LL_ADC_EnableInternalRegulator+0x24>)
 8001116:	4013      	ands	r3, r2
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	0552      	lsls	r2, r2, #21
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	6fffffe8 	.word	0x6fffffe8

08001130 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a03      	ldr	r2, [pc, #12]	@ (800114c <LL_ADC_DisableInternalRegulator+0x1c>)
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}
 800114c:	6fffffe8 	.word	0x6fffffe8

08001150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	055b      	lsls	r3, r3, #21
 8001160:	401a      	ands	r2, r3
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	055b      	lsls	r3, r3, #21
 8001166:	429a      	cmp	r2, r3
 8001168:	d101      	bne.n	800116e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800116e:	2300      	movs	r3, #0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <LL_ADC_Enable+0x20>)
 8001186:	4013      	ands	r3, r2
 8001188:	2201      	movs	r2, #1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	7fffffe8 	.word	0x7fffffe8

0800119c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <LL_ADC_Disable+0x20>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	2202      	movs	r2, #2
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	7fffffe8 	.word	0x7fffffe8

080011c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d101      	bne.n	80011d8 <LL_ADC_IsEnabled+0x18>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <LL_ADC_IsEnabled+0x1a>
 80011d8:	2300      	movs	r3, #0
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsDisableOngoing+0x18>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsDisableOngoing+0x1a>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <LL_ADC_REG_StartConversion+0x20>)
 8001212:	4013      	ands	r3, r2
 8001214:	2204      	movs	r2, #4
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	7fffffe8 	.word	0x7fffffe8

08001228 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <LL_ADC_REG_StopConversion+0x20>)
 8001236:	4013      	ands	r3, r2
 8001238:	2210      	movs	r2, #16
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	7fffffe8 	.word	0x7fffffe8

0800124c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2204      	movs	r2, #4
 800125a:	4013      	ands	r3, r2
 800125c:	2b04      	cmp	r3, #4
 800125e:	d101      	bne.n	8001264 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001278:	231f      	movs	r3, #31
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e17e      	b.n	8001594 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10a      	bne.n	80012b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff f82b 	bl	80002fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2254      	movs	r2, #84	@ 0x54
 80012b0:	2100      	movs	r1, #0
 80012b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff ff49 	bl	8001150 <LL_ADC_IsInternalRegulatorEnabled>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d114      	bne.n	80012ec <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff ff1e 	bl	8001108 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012cc:	4bb3      	ldr	r3, [pc, #716]	@ (800159c <HAL_ADC_Init+0x32c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	49b3      	ldr	r1, [pc, #716]	@ (80015a0 <HAL_ADC_Init+0x330>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff18 	bl	8000108 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012de:	e002      	b.n	80012e6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f9      	bne.n	80012e0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff2d 	bl	8001150 <LL_ADC_IsInternalRegulatorEnabled>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d10f      	bne.n	800131a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	2210      	movs	r2, #16
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130a:	2201      	movs	r2, #1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001312:	231f      	movs	r3, #31
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ff94 	bl	800124c <LL_ADC_REG_IsConversionOngoing>
 8001324:	0003      	movs	r3, r0
 8001326:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	2210      	movs	r2, #16
 800132e:	4013      	ands	r3, r2
 8001330:	d000      	beq.n	8001334 <HAL_ADC_Init+0xc4>
 8001332:	e122      	b.n	800157a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <HAL_ADC_Init+0xcc>
 800133a:	e11e      	b.n	800157a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a98      	ldr	r2, [pc, #608]	@ (80015a4 <HAL_ADC_Init+0x334>)
 8001342:	4013      	ands	r3, r2
 8001344:	2202      	movs	r2, #2
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff35 	bl	80011c0 <LL_ADC_IsEnabled>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d000      	beq.n	800135c <HAL_ADC_Init+0xec>
 800135a:	e0ad      	b.n	80014b8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e1b      	ldrb	r3, [r3, #24]
 8001364:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001366:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7e5b      	ldrb	r3, [r3, #25]
 800136c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800136e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e9b      	ldrb	r3, [r3, #26]
 8001374:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001376:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_ADC_Init+0x116>
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	e000      	b.n	8001388 <HAL_ADC_Init+0x118>
 8001386:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001388:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800138e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da04      	bge.n	80013a2 <HAL_ADC_Init+0x132>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	e001      	b.n	80013a6 <HAL_ADC_Init+0x136>
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80013a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	212c      	movs	r1, #44	@ 0x2c
 80013ac:	5c5b      	ldrb	r3, [r3, r1]
 80013ae:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013b0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2220      	movs	r2, #32
 80013bc:	5c9b      	ldrb	r3, [r3, r2]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d115      	bne.n	80013ee <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e9b      	ldrb	r3, [r3, #26]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	0252      	lsls	r2, r2, #9
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e00b      	b.n	80013ee <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	2220      	movs	r2, #32
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	2201      	movs	r2, #1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00a      	beq.n	800140c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013fa:	23e0      	movs	r3, #224	@ 0xe0
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001404:	4313      	orrs	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a65      	ldr	r2, [pc, #404]	@ (80015a8 <HAL_ADC_Init+0x338>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	430a      	orrs	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0f9b      	lsrs	r3, r3, #30
 8001428:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800142e:	4313      	orrs	r3, r2
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	4313      	orrs	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	223c      	movs	r2, #60	@ 0x3c
 800143a:	5c9b      	ldrb	r3, [r3, r2]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d111      	bne.n	8001464 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	0f9b      	lsrs	r3, r3, #30
 8001446:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800144c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001452:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001458:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	2201      	movs	r2, #1
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a50      	ldr	r2, [pc, #320]	@ (80015ac <HAL_ADC_Init+0x33c>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	430a      	orrs	r2, r1
 8001478:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	23c0      	movs	r3, #192	@ 0xc0
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	429a      	cmp	r2, r3
 8001484:	d018      	beq.n	80014b8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	429a      	cmp	r2, r3
 8001490:	d012      	beq.n	80014b8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	429a      	cmp	r2, r3
 800149c:	d00c      	beq.n	80014b8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800149e:	4b44      	ldr	r3, [pc, #272]	@ (80015b0 <HAL_ADC_Init+0x340>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a44      	ldr	r2, [pc, #272]	@ (80015b4 <HAL_ADC_Init+0x344>)
 80014a4:	4013      	ands	r3, r2
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	23f0      	movs	r3, #240	@ 0xf0
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	401a      	ands	r2, r3
 80014b2:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <HAL_ADC_Init+0x340>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c0:	001a      	movs	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f7ff fd6f 	bl	8000fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d0:	4939      	ldr	r1, [pc, #228]	@ (80015b8 <HAL_ADC_Init+0x348>)
 80014d2:	001a      	movs	r2, r3
 80014d4:	f7ff fd67 	bl	8000fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d109      	bne.n	80014f4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2110      	movs	r1, #16
 80014ec:	4249      	negs	r1, r1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014f2:	e018      	b.n	8001526 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	039b      	lsls	r3, r3, #14
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d112      	bne.n	8001526 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	3b01      	subs	r3, #1
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	221c      	movs	r2, #28
 8001510:	4013      	ands	r3, r2
 8001512:	2210      	movs	r2, #16
 8001514:	4252      	negs	r2, r2
 8001516:	409a      	lsls	r2, r3
 8001518:	0011      	movs	r1, r2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2100      	movs	r1, #0
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fd57 	bl	8000fe0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001532:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001538:	429a      	cmp	r2, r3
 800153a:	d10b      	bne.n	8001554 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	2203      	movs	r2, #3
 8001548:	4393      	bics	r3, r2
 800154a:	2201      	movs	r2, #1
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001552:	e01c      	b.n	800158e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	2212      	movs	r2, #18
 800155a:	4393      	bics	r3, r2
 800155c:	2210      	movs	r2, #16
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001568:	2201      	movs	r2, #1
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001578:	e009      	b.n	800158e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	2210      	movs	r2, #16
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001586:	231f      	movs	r3, #31
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800158e:	231f      	movs	r3, #31
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b008      	add	sp, #32
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	00030d40 	.word	0x00030d40
 80015a4:	fffffefd 	.word	0xfffffefd
 80015a8:	ffde0201 	.word	0xffde0201
 80015ac:	1ffffc02 	.word	0x1ffffc02
 80015b0:	40012708 	.word	0x40012708
 80015b4:	ffc3ffff 	.word	0xffc3ffff
 80015b8:	7fffff04 	.word	0x7fffff04

080015bc <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80015bc:	b5b0      	push	{r4, r5, r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e081      	b.n	80016d2 <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	2202      	movs	r2, #2
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80015da:	250f      	movs	r5, #15
 80015dc:	197c      	adds	r4, r7, r5
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 fc09 	bl	8001df8 <ADC_ConversionStop>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d112      	bne.n	8001618 <HAL_ADC_DeInit+0x5c>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015f2:	197c      	adds	r4, r7, r5
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 fcb8 	bl	8001f6c <ADC_Disable>
 80015fc:	0003      	movs	r3, r0
 80015fe:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001600:	197b      	adds	r3, r7, r5
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <HAL_ADC_DeInit+0x52>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff fd8c 	bl	8001130 <LL_ADC_DisableInternalRegulator>
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */

  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	492e      	ldr	r1, [pc, #184]	@ (80016dc <HAL_ADC_DeInit+0x120>)
 8001624:	400a      	ands	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <HAL_ADC_DeInit+0x124>)
 800162e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH  | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	492a      	ldr	r1, [pc, #168]	@ (80016e4 <HAL_ADC_DeInit+0x128>)
 800163c:	400a      	ands	r2, r1
 800163e:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	0892      	lsrs	r2, r2, #2
 800164e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2107      	movs	r1, #7
 800165c:	438a      	bics	r2, r1
 800165e:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	491f      	ldr	r1, [pc, #124]	@ (80016e8 <HAL_ADC_DeInit+0x12c>)
 800166c:	400a      	ands	r2, r1
 800166e:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	491b      	ldr	r1, [pc, #108]	@ (80016e8 <HAL_ADC_DeInit+0x12c>)
 800167c:	400a      	ands	r2, r1
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4917      	ldr	r1, [pc, #92]	@ (80016e8 <HAL_ADC_DeInit+0x12c>)
 800168c:	400a      	ands	r2, r1
 800168e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC1_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <HAL_ADC_DeInit+0x130>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_ADC_DeInit+0x130>)
 80016a4:	4912      	ldr	r1, [pc, #72]	@ (80016f0 <HAL_ADC_DeInit+0x134>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7fe fe8f 	bl	80003d0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2254      	movs	r2, #84	@ 0x54
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	fffffc60 	.word	0xfffffc60
 80016e0:	0000039f 	.word	0x0000039f
 80016e4:	831e0200 	.word	0x831e0200
 80016e8:	f000f000 	.word	0xf000f000
 80016ec:	40012708 	.word	0x40012708
 80016f0:	ff03ffff 	.word	0xff03ffff

080016f4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fda3 	bl	800124c <LL_ADC_REG_IsConversionOngoing>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d15f      	bne.n	80017ca <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2254      	movs	r2, #84	@ 0x54
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_Start_IT+0x24>
 8001714:	2302      	movs	r3, #2
 8001716:	e05f      	b.n	80017d8 <HAL_ADC_Start_IT+0xe4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2254      	movs	r2, #84	@ 0x54
 800171c:	2101      	movs	r1, #1
 800171e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001720:	250f      	movs	r5, #15
 8001722:	197c      	adds	r4, r7, r5
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 fba2 	bl	8001e70 <ADC_Enable>
 800172c:	0003      	movs	r3, r0
 800172e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001730:	197b      	adds	r3, r7, r5
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d143      	bne.n	80017c0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <HAL_ADC_Start_IT+0xec>)
 800173e:	4013      	ands	r3, r2
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	0052      	lsls	r2, r2, #1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	221c      	movs	r2, #28
 8001756:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2254      	movs	r2, #84	@ 0x54
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	211c      	movs	r1, #28
 800176c:	438a      	bics	r2, r1
 800176e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d108      	bne.n	800178a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2108      	movs	r1, #8
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
          break;
 8001788:	e008      	b.n	800179c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
          break;
 800179a:	46c0      	nop			@ (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2110      	movs	r1, #16
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff fd23 	bl	8001204 <LL_ADC_REG_StartConversion>
 80017be:	e008      	b.n	80017d2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2254      	movs	r2, #84	@ 0x54
 80017c4:	2100      	movs	r1, #0
 80017c6:	5499      	strb	r1, [r3, r2]
 80017c8:	e003      	b.n	80017d2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ca:	230f      	movs	r3, #15
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80017d2:	230f      	movs	r3, #15
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bdb0      	pop	{r4, r5, r7, pc}
 80017e0:	fffff0fe 	.word	0xfffff0fe

080017e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d017      	beq.n	8001850 <HAL_ADC_IRQHandler+0x54>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	2210      	movs	r2, #16
 800182e:	4013      	ands	r3, r2
 8001830:	d106      	bne.n	8001840 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fbfa 	bl	800203c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d003      	beq.n	8001860 <HAL_ADC_IRQHandler+0x64>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2204      	movs	r2, #4
 800185c:	4013      	ands	r3, r2
 800185e:	d107      	bne.n	8001870 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2208      	movs	r2, #8
 8001864:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001866:	d04d      	beq.n	8001904 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2208      	movs	r2, #8
 800186c:	4013      	ands	r3, r2
 800186e:	d049      	beq.n	8001904 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	2210      	movs	r2, #16
 8001876:	4013      	ands	r3, r2
 8001878:	d106      	bne.n	8001888 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fbbe 	bl	800100e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d02e      	beq.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e9b      	ldrb	r3, [r3, #26]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12a      	bne.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d123      	bne.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fccb 	bl	800124c <LL_ADC_REG_IsConversionOngoing>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	210c      	movs	r1, #12
 80018c6:	438a      	bics	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a56      	ldr	r2, [pc, #344]	@ (8001a28 <HAL_ADC_IRQHandler+0x22c>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80018da:	e00b      	b.n	80018f4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	2220      	movs	r2, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fd8e 	bl	8000418 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	4013      	ands	r3, r2
 800190a:	d012      	beq.n	8001932 <HAL_ADC_IRQHandler+0x136>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	4013      	ands	r3, r2
 8001912:	d00e      	beq.n	8001932 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	0252      	lsls	r2, r2, #9
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f881 	bl	8001a2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2280      	movs	r2, #128	@ 0x80
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d014      	beq.n	8001966 <HAL_ADC_IRQHandler+0x16a>
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4013      	ands	r3, r2
 8001944:	d00f      	beq.n	8001966 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	0292      	lsls	r2, r2, #10
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fb60 	bl	800201c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	0052      	lsls	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d014      	beq.n	800199a <HAL_ADC_IRQHandler+0x19e>
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d00f      	beq.n	800199a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	02d2      	lsls	r2, r2, #11
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fb4e 	bl	800202c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2210      	movs	r2, #16
 800199e:	4013      	ands	r3, r2
 80019a0:	d02b      	beq.n	80019fa <HAL_ADC_IRQHandler+0x1fe>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2210      	movs	r2, #16
 80019a6:	4013      	ands	r3, r2
 80019a8:	d027      	beq.n	80019fa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e008      	b.n	80019ca <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fb7a 	bl	80010b6 <LL_ADC_REG_GetDMATransfer>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d110      	bne.n	80019f2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	00d2      	lsls	r2, r2, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e2:	2202      	movs	r2, #2
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f825 	bl	8001a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2210      	movs	r2, #16
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	019b      	lsls	r3, r3, #6
 8001a00:	4013      	ands	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x224>
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d008      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 fb1b 	bl	800204c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	0192      	lsls	r2, r2, #6
 8001a1e:	601a      	str	r2, [r3, #0]
  }
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b006      	add	sp, #24
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fffffefe 	.word	0xfffffefe

08001a2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2317      	movs	r3, #23
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2254      	movs	r2, #84	@ 0x54
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x24>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e1be      	b.n	8001dee <HAL_ADC_ConfigChannel+0x3a2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2254      	movs	r2, #84	@ 0x54
 8001a74:	2101      	movs	r1, #1
 8001a76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fbe5 	bl	800124c <LL_ADC_REG_IsConversionOngoing>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d000      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x3c>
 8001a86:	e1a1      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d100      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x46>
 8001a90:	e152      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aa2:	4ac2      	ldr	r2, [pc, #776]	@ (8001dac <HAL_ADC_ConfigChannel+0x360>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d108      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	f7ff fadc 	bl	8001070 <LL_ADC_REG_SetSequencerChAdd>
 8001ab8:	e0ed      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	211f      	movs	r1, #31
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	4099      	lsls	r1, r3
 8001aca:	000b      	movs	r3, r1
 8001acc:	43db      	mvns	r3, r3
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	0a5b      	lsrs	r3, r3, #9
 8001ada:	d105      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x9c>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	e0bc      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	d000      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0xa8>
 8001af2:	e0b5      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x214>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d000      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0xb4>
 8001afe:	e0ad      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x210>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2204      	movs	r2, #4
 8001b06:	4013      	ands	r3, r2
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0xc0>
 8001b0a:	e0a5      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x20c>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4013      	ands	r3, r2
 8001b14:	d000      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0xcc>
 8001b16:	e09d      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x208>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d000      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0xd8>
 8001b22:	e095      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x204>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d000      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0xe4>
 8001b2e:	e08d      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x200>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2240      	movs	r2, #64	@ 0x40
 8001b36:	4013      	ands	r3, r2
 8001b38:	d000      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0xf0>
 8001b3a:	e085      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1fc>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	4013      	ands	r3, r2
 8001b44:	d000      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0xfc>
 8001b46:	e07d      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1f8>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d000      	beq.n	8001b56 <HAL_ADC_ConfigChannel+0x10a>
 8001b54:	e074      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1f4>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d000      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0x118>
 8001b62:	e06b      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1f0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d000      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x126>
 8001b70:	e062      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1ec>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d000      	beq.n	8001b80 <HAL_ADC_ConfigChannel+0x134>
 8001b7e:	e059      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1e8>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	015b      	lsls	r3, r3, #5
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d151      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1e4>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	4013      	ands	r3, r2
 8001b96:	d149      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1e0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d141      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1dc>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	4013      	ands	r3, r2
 8001bae:	d139      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1d8>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d131      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1d4>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d129      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1d0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	02db      	lsls	r3, r3, #11
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d121      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1cc>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	031b      	lsls	r3, r3, #12
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d119      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c8>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	035b      	lsls	r3, r3, #13
 8001be8:	4013      	ands	r3, r2
 8001bea:	d111      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1c4>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	039b      	lsls	r3, r3, #14
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1c0>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	03db      	lsls	r3, r3, #15
 8001c00:	4013      	ands	r3, r2
 8001c02:	d001      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x1bc>
 8001c04:	2316      	movs	r3, #22
 8001c06:	e02c      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e02a      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c0c:	2315      	movs	r3, #21
 8001c0e:	e028      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c10:	2314      	movs	r3, #20
 8001c12:	e026      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c14:	2313      	movs	r3, #19
 8001c16:	e024      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c18:	2312      	movs	r3, #18
 8001c1a:	e022      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c1c:	2311      	movs	r3, #17
 8001c1e:	e020      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c20:	2310      	movs	r3, #16
 8001c22:	e01e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c24:	230f      	movs	r3, #15
 8001c26:	e01c      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c28:	230e      	movs	r3, #14
 8001c2a:	e01a      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c2c:	230d      	movs	r3, #13
 8001c2e:	e018      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c30:	230c      	movs	r3, #12
 8001c32:	e016      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c34:	230b      	movs	r3, #11
 8001c36:	e014      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c38:	230a      	movs	r3, #10
 8001c3a:	e012      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c3c:	2309      	movs	r3, #9
 8001c3e:	e010      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c40:	2308      	movs	r3, #8
 8001c42:	e00e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c44:	2307      	movs	r3, #7
 8001c46:	e00c      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c48:	2306      	movs	r3, #6
 8001c4a:	e00a      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	e008      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c50:	2304      	movs	r3, #4
 8001c52:	e006      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e004      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x216>
 8001c60:	2300      	movs	r3, #0
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	6852      	ldr	r2, [r2, #4]
 8001c66:	201f      	movs	r0, #31
 8001c68:	4002      	ands	r2, r0
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	000a      	movs	r2, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d808      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	001a      	movs	r2, r3
 8001c92:	f7ff f9cd 	bl	8001030 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	f7ff fa14 	bl	80010d0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db00      	blt.n	8001cb2 <HAL_ADC_ConfigChannel+0x266>
 8001cb0:	e096      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff f969 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <HAL_ADC_ConfigChannel+0x368>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d123      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd0:	d11e      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2280      	movs	r2, #128	@ 0x80
 8001cd6:	0412      	lsls	r2, r2, #16
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	4a35      	ldr	r2, [pc, #212]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001cdc:	0019      	movs	r1, r3
 8001cde:	0010      	movs	r0, r2
 8001ce0:	f7ff f940 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001ce4:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_ADC_ConfigChannel+0x36c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4934      	ldr	r1, [pc, #208]	@ (8001dbc <HAL_ADC_ConfigChannel+0x370>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7fe fa0c 	bl	8000108 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	189b      	adds	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d0e:	e067      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x374>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d162      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	03db      	lsls	r3, r3, #15
 8001d20:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d22:	d15d      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	03d2      	lsls	r2, r2, #15
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	4a20      	ldr	r2, [pc, #128]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f7ff f917 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001d36:	e053      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d004      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d48:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <HAL_ADC_ConfigChannel+0x360>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d107      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f7ff f99a 	bl	8001092 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da3c      	bge.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff f90f 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <HAL_ADC_ConfigChannel+0x368>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d108      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x378>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001d84:	0019      	movs	r1, r3
 8001d86:	0010      	movs	r0, r2
 8001d88:	f7ff f8ec 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001d8c:	e028      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x374>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d123      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x37c>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_ADC_ConfigChannel+0x364>)
 8001da0:	0019      	movs	r1, r3
 8001da2:	0010      	movs	r0, r2
 8001da4:	f7ff f8de 	bl	8000f64 <LL_ADC_SetCommonPathInternalCh>
 8001da8:	e01a      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x394>
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	80000004 	.word	0x80000004
 8001db0:	40012708 	.word	0x40012708
 8001db4:	a4000200 	.word	0xa4000200
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	00030d40 	.word	0x00030d40
 8001dc0:	a8000400 	.word	0xa8000400
 8001dc4:	ff7fffff 	.word	0xff7fffff
 8001dc8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd8:	2317      	movs	r3, #23
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2254      	movs	r2, #84	@ 0x54
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001de8:	2317      	movs	r3, #23
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b006      	add	sp, #24
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)

08001df8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fa21 	bl	800124c <LL_ADC_REG_IsConversionOngoing>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d02b      	beq.n	8001e66 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f7ff f9e5 	bl	80011e2 <LL_ADC_IsDisableOngoing>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d104      	bne.n	8001e26 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fa01 	bl	8001228 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e26:	f7ff f887 	bl	8000f38 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e2e:	e014      	b.n	8001e5a <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e30:	f7ff f882 	bl	8000f38 <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d90d      	bls.n	8001e5a <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	2210      	movs	r2, #16
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	2201      	movs	r2, #1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e006      	b.n	8001e68 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2204      	movs	r2, #4
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1e4      	bne.n	8001e30 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff f99d 	bl	80011c0 <LL_ADC_IsEnabled>
 8001e86:	1e03      	subs	r3, r0, #0
 8001e88:	d162      	bne.n	8001f50 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a32      	ldr	r2, [pc, #200]	@ (8001f5c <ADC_Enable+0xec>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04f      	b.n	8001f52 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff f95e 	bl	8001178 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <ADC_Enable+0xf0>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff f864 	bl	8000f8c <LL_ADC_GetCommonPathInternalCh>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001ece:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <ADC_Enable+0xf4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4925      	ldr	r1, [pc, #148]	@ (8001f68 <ADC_Enable+0xf8>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe f917 	bl	8000108 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	3301      	adds	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ee0:	e002      	b.n	8001ee8 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7e5b      	ldrb	r3, [r3, #25]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d02c      	beq.n	8001f50 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f81f 	bl	8000f38 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efe:	e020      	b.n	8001f42 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff f95b 	bl	80011c0 <LL_ADC_IsEnabled>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d104      	bne.n	8001f18 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7ff f930 	bl	8001178 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f18:	f7ff f80e 	bl	8000f38 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d90d      	bls.n	8001f42 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	2201      	movs	r2, #1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e007      	b.n	8001f52 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d1d7      	bne.n	8001f00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b004      	add	sp, #16
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	80000017 	.word	0x80000017
 8001f60:	40012708 	.word	0x40012708
 8001f64:	20000000 	.word	0x20000000
 8001f68:	00030d40 	.word	0x00030d40

08001f6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7ff f932 	bl	80011e2 <LL_ADC_IsDisableOngoing>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff f91a 	bl	80011c0 <LL_ADC_IsEnabled>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d040      	beq.n	8002012 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d13d      	bne.n	8002012 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10d      	bne.n	8001fc0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff f8f7 	bl	800119c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe ffbf 	bl	8000f38 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fbe:	e022      	b.n	8002006 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e01b      	b.n	8002014 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fdc:	f7fe ffac 	bl	8000f38 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d90d      	bls.n	8002006 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	2210      	movs	r2, #16
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e006      	b.n	8002014 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2201      	movs	r2, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d1e4      	bne.n	8001fdc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002034:	46c0      	nop			@ (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	1dfb      	adds	r3, r7, #7
 8002066:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b7f      	cmp	r3, #127	@ 0x7f
 800206e:	d809      	bhi.n	8002084 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	001a      	movs	r2, r3
 8002076:	231f      	movs	r3, #31
 8002078:	401a      	ands	r2, r3
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__NVIC_EnableIRQ+0x30>)
 800207c:	2101      	movs	r1, #1
 800207e:	4091      	lsls	r1, r2
 8002080:	000a      	movs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	0002      	movs	r2, r0
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80020a2:	d810      	bhi.n	80020c6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	001a      	movs	r2, r3
 80020aa:	231f      	movs	r3, #31
 80020ac:	4013      	ands	r3, r2
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <__NVIC_DisableIRQ+0x40>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80020ba:	f3bf 8f4f 	dsb	sy
}
 80020be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80020c0:	f3bf 8f6f 	isb	sy
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	0002      	movs	r2, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020e8:	d828      	bhi.n	800213c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ea:	4a2f      	ldr	r2, [pc, #188]	@ (80021a8 <__NVIC_SetPriority+0xd4>)
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	33c0      	adds	r3, #192	@ 0xc0
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	589b      	ldr	r3, [r3, r2]
 80020fa:	1dfa      	adds	r2, r7, #7
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	0011      	movs	r1, r2
 8002100:	2203      	movs	r2, #3
 8002102:	400a      	ands	r2, r1
 8002104:	00d2      	lsls	r2, r2, #3
 8002106:	21ff      	movs	r1, #255	@ 0xff
 8002108:	4091      	lsls	r1, r2
 800210a:	000a      	movs	r2, r1
 800210c:	43d2      	mvns	r2, r2
 800210e:	401a      	ands	r2, r3
 8002110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	22ff      	movs	r2, #255	@ 0xff
 8002118:	401a      	ands	r2, r3
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	0018      	movs	r0, r3
 8002120:	2303      	movs	r3, #3
 8002122:	4003      	ands	r3, r0
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002128:	481f      	ldr	r0, [pc, #124]	@ (80021a8 <__NVIC_SetPriority+0xd4>)
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b25b      	sxtb	r3, r3
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	430a      	orrs	r2, r1
 8002134:	33c0      	adds	r3, #192	@ 0xc0
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800213a:	e031      	b.n	80021a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800213c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ac <__NVIC_SetPriority+0xd8>)
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	0019      	movs	r1, r3
 8002144:	230f      	movs	r3, #15
 8002146:	400b      	ands	r3, r1
 8002148:	3b08      	subs	r3, #8
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3306      	adds	r3, #6
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	18d3      	adds	r3, r2, r3
 8002152:	3304      	adds	r3, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1dfa      	adds	r2, r7, #7
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	0011      	movs	r1, r2
 800215c:	2203      	movs	r2, #3
 800215e:	400a      	ands	r2, r1
 8002160:	00d2      	lsls	r2, r2, #3
 8002162:	21ff      	movs	r1, #255	@ 0xff
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	43d2      	mvns	r2, r2
 800216a:	401a      	ands	r2, r3
 800216c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	22ff      	movs	r2, #255	@ 0xff
 8002174:	401a      	ands	r2, r3
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0018      	movs	r0, r3
 800217c:	2303      	movs	r3, #3
 800217e:	4003      	ands	r3, r0
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <__NVIC_SetPriority+0xd8>)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	001c      	movs	r4, r3
 800218c:	230f      	movs	r3, #15
 800218e:	4023      	ands	r3, r4
 8002190:	3b08      	subs	r3, #8
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	430a      	orrs	r2, r1
 8002196:	3306      	adds	r3, #6
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	18c3      	adds	r3, r0, r3
 800219c:	3304      	adds	r3, #4
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	46c0      	nop			@ (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b003      	add	sp, #12
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	045b      	lsls	r3, r3, #17
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d301      	bcc.n	80021c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c4:	2301      	movs	r3, #1
 80021c6:	e010      	b.n	80021ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <SysTick_Config+0x44>)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	3a01      	subs	r2, #1
 80021ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d0:	2301      	movs	r3, #1
 80021d2:	425b      	negs	r3, r3
 80021d4:	2103      	movs	r1, #3
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff ff7c 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <SysTick_Config+0x44>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <SysTick_Config+0x44>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	210f      	movs	r1, #15
 8002204:	187b      	adds	r3, r7, r1
 8002206:	1c02      	adds	r2, r0, #0
 8002208:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	187b      	adds	r3, r7, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b25b      	sxtb	r3, r3
 8002212:	0011      	movs	r1, r2
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	0002      	movs	r2, r0
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff ff11 	bl	800205c <__NVIC_EnableIRQ>
}
 800223a:	46c0      	nop			@ (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	0002      	movs	r2, r0
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b25b      	sxtb	r3, r3
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff ff1b 	bl	8002090 <__NVIC_DisableIRQ>
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff ff9f 	bl	80021b0 <SysTick_Config>
 8002272:	0003      	movs	r3, r0
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800228a:	e14d      	b.n	8002528 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4091      	lsls	r1, r2
 8002296:	000a      	movs	r2, r1
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d100      	bne.n	80022a4 <HAL_GPIO_Init+0x28>
 80022a2:	e13e      	b.n	8002522 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x38>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b12      	cmp	r3, #18
 80022b2:	d125      	bne.n	8002300 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	58d3      	ldr	r3, [r2, r3]
 80022c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2207      	movs	r2, #7
 80022c6:	4013      	ands	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	43da      	mvns	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4013      	ands	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	220f      	movs	r2, #15
 80022de:	401a      	ands	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2107      	movs	r1, #7
 80022e4:	400b      	ands	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	6979      	ldr	r1, [r7, #20]
 80022fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	409a      	lsls	r2, r3
 800230e:	0013      	movs	r3, r2
 8002310:	43da      	mvns	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	401a      	ands	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	0013      	movs	r3, r2
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d00b      	beq.n	8002354 <HAL_GPIO_Init+0xd8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002348:	2b11      	cmp	r3, #17
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d130      	bne.n	80023b6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	409a      	lsls	r2, r3
 8002362:	0013      	movs	r3, r2
 8002364:	43da      	mvns	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4013      	ands	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	0013      	movs	r3, r2
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800238a:	2201      	movs	r2, #1
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4013      	ands	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	2201      	movs	r2, #1
 80023a2:	401a      	ands	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d017      	beq.n	80023ee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	4013      	ands	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	055b      	lsls	r3, r3, #21
 80023f6:	4013      	ands	r3, r2
 80023f8:	d100      	bne.n	80023fc <HAL_GPIO_Init+0x180>
 80023fa:	e092      	b.n	8002522 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80023fc:	4a50      	ldr	r2, [pc, #320]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3318      	adds	r3, #24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	589b      	ldr	r3, [r3, r2]
 8002408:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2203      	movs	r2, #3
 800240e:	4013      	ands	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	220f      	movs	r2, #15
 8002414:	409a      	lsls	r2, r3
 8002416:	0013      	movs	r3, r2
 8002418:	43da      	mvns	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	23a0      	movs	r3, #160	@ 0xa0
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	429a      	cmp	r2, r3
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x1d6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a45      	ldr	r2, [pc, #276]	@ (8002544 <HAL_GPIO_Init+0x2c8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x1d2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a44      	ldr	r2, [pc, #272]	@ (8002548 <HAL_GPIO_Init+0x2cc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x1ce>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a43      	ldr	r2, [pc, #268]	@ (800254c <HAL_GPIO_Init+0x2d0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x1ca>
 8002442:	2305      	movs	r3, #5
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x1d8>
 8002446:	2306      	movs	r3, #6
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x1d8>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x1d8>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x1d8>
 8002452:	2300      	movs	r3, #0
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	2103      	movs	r1, #3
 8002458:	400a      	ands	r2, r1
 800245a:	00d2      	lsls	r2, r2, #3
 800245c:	4093      	lsls	r3, r2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002464:	4936      	ldr	r1, [pc, #216]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3318      	adds	r3, #24
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002472:	4a33      	ldr	r2, [pc, #204]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	58d3      	ldr	r3, [r2, r3]
 8002478:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43da      	mvns	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	4013      	ands	r3, r2
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002498:	4929      	ldr	r1, [pc, #164]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 800249a:	2280      	movs	r2, #128	@ 0x80
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80024a0:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80024a2:	2384      	movs	r3, #132	@ 0x84
 80024a4:	58d3      	ldr	r3, [r2, r3]
 80024a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43da      	mvns	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4013      	ands	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	4013      	ands	r3, r2
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80024c6:	491e      	ldr	r1, [pc, #120]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80024c8:	2284      	movs	r2, #132	@ 0x84
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	43da      	mvns	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	035b      	lsls	r3, r3, #13
 80024e6:	4013      	ands	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80024f8:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43da      	mvns	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	039b      	lsls	r3, r3, #14
 8002510:	4013      	ands	r3, r2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_GPIO_Init+0x2c4>)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	3301      	adds	r3, #1
 8002526:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	40da      	lsrs	r2, r3
 8002530:	1e13      	subs	r3, r2, #0
 8002532:	d000      	beq.n	8002536 <HAL_GPIO_Init+0x2ba>
 8002534:	e6aa      	b.n	800228c <HAL_GPIO_Init+0x10>
  }
}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021800 	.word	0x40021800
 8002544:	50000400 	.word	0x50000400
 8002548:	50000800 	.word	0x50000800
 800254c:	50001400 	.word	0x50001400

08002550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800255e:	e0b4      	b.n	80026ca <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002560:	2201      	movs	r2, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	409a      	lsls	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <HAL_GPIO_DeInit+0x24>
 8002572:	e0a7      	b.n	80026c4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8002574:	4a5a      	ldr	r2, [pc, #360]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3318      	adds	r3, #24
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2203      	movs	r2, #3
 8002586:	4013      	ands	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	220f      	movs	r2, #15
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	23a0      	movs	r3, #160	@ 0xa0
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	429a      	cmp	r2, r3
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_DeInit+0x76>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	@ (80026e4 <HAL_GPIO_DeInit+0x194>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_DeInit+0x72>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	@ (80026e8 <HAL_GPIO_DeInit+0x198>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_DeInit+0x6e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_GPIO_DeInit+0x19c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_DeInit+0x6a>
 80025b6:	2305      	movs	r3, #5
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_DeInit+0x78>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_DeInit+0x78>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_DeInit+0x78>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_DeInit+0x78>
 80025c6:	2300      	movs	r3, #0
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	2103      	movs	r1, #3
 80025cc:	400a      	ands	r2, r1
 80025ce:	00d2      	lsls	r2, r2, #3
 80025d0:	4093      	lsls	r3, r2
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d136      	bne.n	8002646 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80025d8:	4a41      	ldr	r2, [pc, #260]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	58d3      	ldr	r3, [r2, r3]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	43d2      	mvns	r2, r2
 80025e2:	493f      	ldr	r1, [pc, #252]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	2280      	movs	r2, #128	@ 0x80
 80025e8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80025ea:	4a3d      	ldr	r2, [pc, #244]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 80025ec:	2384      	movs	r3, #132	@ 0x84
 80025ee:	58d3      	ldr	r3, [r2, r3]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	493a      	ldr	r1, [pc, #232]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	2284      	movs	r2, #132	@ 0x84
 80025fa:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80025fc:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43d9      	mvns	r1, r3
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800260a:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43d9      	mvns	r1, r3
 8002612:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 8002614:	400a      	ands	r2, r1
 8002616:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2203      	movs	r2, #3
 800261c:	4013      	ands	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	220f      	movs	r2, #15
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002628:	4a2d      	ldr	r2, [pc, #180]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3318      	adds	r3, #24
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	589a      	ldr	r2, [r3, r2]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43d9      	mvns	r1, r3
 8002638:	4829      	ldr	r0, [pc, #164]	@ (80026e0 <HAL_GPIO_DeInit+0x190>)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	400a      	ands	r2, r1
 8002640:	3318      	adds	r3, #24
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2103      	movs	r1, #3
 8002650:	4099      	lsls	r1, r3
 8002652:	000b      	movs	r3, r1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	58d3      	ldr	r3, [r2, r3]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	2107      	movs	r1, #7
 800266a:	400a      	ands	r2, r1
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	210f      	movs	r1, #15
 8002670:	4091      	lsls	r1, r2
 8002672:	000a      	movs	r2, r1
 8002674:	43d1      	mvns	r1, r2
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	08d2      	lsrs	r2, r2, #3
 800267a:	4019      	ands	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	0052      	lsls	r2, r2, #1
 800268c:	2103      	movs	r1, #3
 800268e:	4091      	lsls	r1, r2
 8002690:	000a      	movs	r2, r1
 8002692:	43d2      	mvns	r2, r2
 8002694:	401a      	ands	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2101      	movs	r1, #1
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	43d2      	mvns	r2, r2
 80026a8:	401a      	ands	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	0052      	lsls	r2, r2, #1
 80026b6:	2103      	movs	r1, #3
 80026b8:	4091      	lsls	r1, r2
 80026ba:	000a      	movs	r2, r1
 80026bc:	43d2      	mvns	r2, r2
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	1e13      	subs	r3, r2, #0
 80026d2:	d000      	beq.n	80026d6 <HAL_GPIO_DeInit+0x186>
 80026d4:	e744      	b.n	8002560 <HAL_GPIO_DeInit+0x10>
  }
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021800 	.word	0x40021800
 80026e4:	50000400 	.word	0x50000400
 80026e8:	50000800 	.word	0x50000800
 80026ec:	50001400 	.word	0x50001400

080026f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	000a      	movs	r2, r1
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	1cba      	adds	r2, r7, #2
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	4013      	ands	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e003      	b.n	800271c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800271c:	230f      	movs	r3, #15
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	0002      	movs	r2, r0
 8002734:	1dbb      	adds	r3, r7, #6
 8002736:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	1dba      	adds	r2, r7, #6
 800273e:	8812      	ldrh	r2, [r2, #0]
 8002740:	4013      	ands	r3, r2
 8002742:	d008      	beq.n	8002756 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002744:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002746:	1dba      	adds	r2, r7, #6
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f815 	bl	8002780 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	1dba      	adds	r2, r7, #6
 800275c:	8812      	ldrh	r2, [r2, #0]
 800275e:	4013      	ands	r3, r2
 8002760:	d008      	beq.n	8002774 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002764:	1dba      	adds	r2, r7, #6
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f810 	bl	8002794 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021800 	.word	0x40021800

08002780 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	0002      	movs	r2, r0
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	0002      	movs	r2, r0
 800279c:	1dbb      	adds	r3, r7, #6
 800279e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1d0      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d100      	bne.n	80027c6 <HAL_RCC_OscConfig+0x1e>
 80027c4:	e069      	b.n	800289a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4bc8      	ldr	r3, [pc, #800]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2238      	movs	r2, #56	@ 0x38
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d15d      	bne.n	800289a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1bc      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_OscConfig+0x56>
 80027ee:	4bbe      	ldr	r3, [pc, #760]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4bbd      	ldr	r3, [pc, #756]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80027f4:	2180      	movs	r1, #128	@ 0x80
 80027f6:	0249      	lsls	r1, r1, #9
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e020      	b.n	8002840 <HAL_RCC_OscConfig+0x98>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	23a0      	movs	r3, #160	@ 0xa0
 8002804:	02db      	lsls	r3, r3, #11
 8002806:	429a      	cmp	r2, r3
 8002808:	d10e      	bne.n	8002828 <HAL_RCC_OscConfig+0x80>
 800280a:	4bb7      	ldr	r3, [pc, #732]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4bb6      	ldr	r3, [pc, #728]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002810:	2180      	movs	r1, #128	@ 0x80
 8002812:	02c9      	lsls	r1, r1, #11
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4bb3      	ldr	r3, [pc, #716]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4bb2      	ldr	r3, [pc, #712]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800281e:	2180      	movs	r1, #128	@ 0x80
 8002820:	0249      	lsls	r1, r1, #9
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x98>
 8002828:	4baf      	ldr	r3, [pc, #700]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4bae      	ldr	r3, [pc, #696]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800282e:	49af      	ldr	r1, [pc, #700]	@ (8002aec <HAL_RCC_OscConfig+0x344>)
 8002830:	400a      	ands	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	4bac      	ldr	r3, [pc, #688]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4bab      	ldr	r3, [pc, #684]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800283a:	49ad      	ldr	r1, [pc, #692]	@ (8002af0 <HAL_RCC_OscConfig+0x348>)
 800283c:	400a      	ands	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d014      	beq.n	8002872 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fb76 	bl	8000f38 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002852:	f7fe fb71 	bl	8000f38 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b64      	cmp	r3, #100	@ 0x64
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e17b      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002864:	4ba0      	ldr	r3, [pc, #640]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	029b      	lsls	r3, r3, #10
 800286c:	4013      	ands	r3, r2
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0xaa>
 8002870:	e013      	b.n	800289a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fb61 	bl	8000f38 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800287c:	f7fe fb5c 	bl	8000f38 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e166      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	4b96      	ldr	r3, [pc, #600]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	4013      	ands	r3, r2
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2202      	movs	r2, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_RCC_OscConfig+0xfe>
 80028a4:	e086      	b.n	80029b4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b90      	ldr	r3, [pc, #576]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2238      	movs	r2, #56	@ 0x38
 80028ac:	4013      	ands	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d12f      	bne.n	8002916 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e14c      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b89      	ldr	r3, [pc, #548]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a8b      	ldr	r2, [pc, #556]	@ (8002af4 <HAL_RCC_OscConfig+0x34c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	4b85      	ldr	r3, [pc, #532]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028de:	4b82      	ldr	r3, [pc, #520]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a85      	ldr	r2, [pc, #532]	@ (8002af8 <HAL_RCC_OscConfig+0x350>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	4b7e      	ldr	r3, [pc, #504]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80028f2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	0adb      	lsrs	r3, r3, #11
 80028f8:	2207      	movs	r2, #7
 80028fa:	4013      	ands	r3, r2
 80028fc:	4a7f      	ldr	r2, [pc, #508]	@ (8002afc <HAL_RCC_OscConfig+0x354>)
 80028fe:	40da      	lsrs	r2, r3
 8002900:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <HAL_RCC_OscConfig+0x358>)
 8002902:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002904:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x35c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0018      	movs	r0, r3
 800290a:	f7fe fab9 	bl	8000e80 <HAL_InitTick>
 800290e:	1e03      	subs	r3, r0, #0
 8002910:	d050      	beq.n	80029b4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e122      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d030      	beq.n	8002980 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800291e:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <HAL_RCC_OscConfig+0x350>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	0049      	lsls	r1, r1, #1
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fafa 	bl	8000f38 <HAL_GetTick>
 8002944:	0003      	movs	r3, r0
 8002946:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800294a:	f7fe faf5 	bl	8000f38 <HAL_GetTick>
 800294e:	0002      	movs	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0ff      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b62      	ldr	r3, [pc, #392]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4013      	ands	r3, r2
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a61      	ldr	r2, [pc, #388]	@ (8002af4 <HAL_RCC_OscConfig+0x34c>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	021a      	lsls	r2, r3, #8
 8002978:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	e019      	b.n	80029b4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b58      	ldr	r3, [pc, #352]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002986:	4960      	ldr	r1, [pc, #384]	@ (8002b08 <HAL_RCC_OscConfig+0x360>)
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fad4 	bl	8000f38 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002996:	f7fe facf 	bl	8000f38 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0d9      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4013      	ands	r3, r2
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	d042      	beq.n	8002a44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2238      	movs	r2, #56	@ 0x38
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b18      	cmp	r3, #24
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d138      	bne.n	8002a44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0c2      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d019      	beq.n	8002a12 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80029de:	4b42      	ldr	r3, [pc, #264]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80029e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029e2:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe faa5 	bl	8000f38 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80029f4:	f7fe faa0 	bl	8000f38 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0aa      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002a06:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d0f1      	beq.n	80029f4 <HAL_RCC_OscConfig+0x24c>
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a12:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a16:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	438a      	bics	r2, r1
 8002a1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fa8b 	bl	8000f38 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fa86 	bl	8000f38 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e090      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d1f1      	bne.n	8002a28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d100      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2a8>
 8002a4e:	e084      	b.n	8002b5a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a50:	230f      	movs	r3, #15
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002a58:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2238      	movs	r2, #56	@ 0x38
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d000      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2c6>
 8002a6c:	e075      	b.n	8002b5a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e074      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2e0>
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a86:	e01c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x31a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x302>
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a96:	2104      	movs	r1, #4
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x31a>
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002aac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002ab8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_OscConfig+0x340>)
 8002abc:	2104      	movs	r1, #4
 8002abe:	438a      	bics	r2, r1
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fa35 	bl	8000f38 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fa30 	bl	8000f38 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x364>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d915      	bls.n	8002b10 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e039      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	fffeffff 	.word	0xfffeffff
 8002af0:	fffbffff 	.word	0xfffbffff
 8002af4:	ffff80ff 	.word	0xffff80ff
 8002af8:	ffffc7ff 	.word	0xffffc7ff
 8002afc:	02dc6c00 	.word	0x02dc6c00
 8002b00:	20000000 	.word	0x20000000
 8002b04:	20000004 	.word	0x20000004
 8002b08:	fffffeff 	.word	0xfffffeff
 8002b0c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b10:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_RCC_OscConfig+0x3bc>)
 8002b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b14:	2202      	movs	r2, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	d0dc      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x32c>
 8002b1a:	e013      	b.n	8002b44 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa0c 	bl	8000f38 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b24:	e009      	b.n	8002b3a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fa07 	bl	8000f38 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4a0d      	ldr	r2, [pc, #52]	@ (8002b68 <HAL_RCC_OscConfig+0x3c0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e010      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCC_OscConfig+0x3bc>)
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_RCC_OscConfig+0x3bc>)
 8002b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b52:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <HAL_RCC_OscConfig+0x3bc>)
 8002b54:	4905      	ldr	r1, [pc, #20]	@ (8002b6c <HAL_RCC_OscConfig+0x3c4>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b006      	add	sp, #24
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	00001388 	.word	0x00001388
 8002b6c:	efffffff 	.word	0xefffffff

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0e9      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b76      	ldr	r3, [pc, #472]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d91e      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b73      	ldr	r3, [pc, #460]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2207      	movs	r2, #7
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	4b70      	ldr	r3, [pc, #448]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe f9c8 	bl	8000f38 <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bac:	e009      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bae:	f7fe f9c3 	bl	8000f38 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0ca      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc2:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	4013      	ands	r3, r2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2204      	movs	r2, #4
 8002be0:	4013      	ands	r3, r2
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002be4:	4b60      	ldr	r3, [pc, #384]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a60      	ldr	r2, [pc, #384]	@ (8002d6c <HAL_RCC_ClockConfig+0x1fc>)
 8002bea:	401a      	ands	r2, r3
 8002bec:	4b5e      	ldr	r3, [pc, #376]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	21b0      	movs	r1, #176	@ 0xb0
 8002bf0:	0109      	lsls	r1, r1, #4
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a5d      	ldr	r2, [pc, #372]	@ (8002d70 <HAL_RCC_ClockConfig+0x200>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4b58      	ldr	r3, [pc, #352]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d055      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002c14:	4b54      	ldr	r3, [pc, #336]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	221c      	movs	r2, #28
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	4b51      	ldr	r3, [pc, #324]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c30:	4b4d      	ldr	r3, [pc, #308]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	029b      	lsls	r3, r3, #10
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d11f      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e08b      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4013      	ands	r3, r2
 8002c52:	d113      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e07f      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c60:	4b41      	ldr	r3, [pc, #260]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e074      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e06d      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2207      	movs	r2, #7
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe f952 	bl	8000f38 <HAL_GetTick>
 8002c94:	0003      	movs	r3, r0
 8002c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe f94d 	bl	8000f38 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2238      	movs	r2, #56	@ 0x38
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1ec      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d21e      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f92a 	bl	8000f38 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce8:	e009      	b.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cea:	f7fe f925 	bl	8000f38 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <HAL_RCC_ClockConfig+0x1f4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e02c      	b.n	8002d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cfe:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2207      	movs	r2, #7
 8002d04:	4013      	ands	r3, r2
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	@ (8002d74 <HAL_RCC_ClockConfig+0x204>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d2a:	f000 f82b 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d2e:	0001      	movs	r1, r0
 8002d30:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	220f      	movs	r2, #15
 8002d38:	401a      	ands	r2, r3
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <HAL_RCC_ClockConfig+0x208>)
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	58d3      	ldr	r3, [r2, r3]
 8002d40:	221f      	movs	r2, #31
 8002d42:	4013      	ands	r3, r2
 8002d44:	000a      	movs	r2, r1
 8002d46:	40da      	lsrs	r2, r3
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_RCC_ClockConfig+0x20c>)
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <HAL_RCC_ClockConfig+0x210>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fe f895 	bl	8000e80 <HAL_InitTick>
 8002d56:	0003      	movs	r3, r0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40022000 	.word	0x40022000
 8002d64:	00001388 	.word	0x00001388
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	ffff84ff 	.word	0xffff84ff
 8002d70:	fffff0ff 	.word	0xfffff0ff
 8002d74:	ffff8fff 	.word	0xffff8fff
 8002d78:	080048d8 	.word	0x080048d8
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x78>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2238      	movs	r2, #56	@ 0x38
 8002d90:	4013      	ands	r3, r2
 8002d92:	d10f      	bne.n	8002db4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x78>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0adb      	lsrs	r3, r3, #11
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2201      	movs	r2, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	0013      	movs	r3, r2
 8002da4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	4815      	ldr	r0, [pc, #84]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002daa:	f7fd f9ad 	bl	8000108 <__udivsi3>
 8002dae:	0003      	movs	r3, r0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e01e      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x78>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2238      	movs	r2, #56	@ 0x38
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x80>)
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x78>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2238      	movs	r2, #56	@ 0x38
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d103      	bne.n	8002dda <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x78>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2238      	movs	r2, #56	@ 0x38
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	d103      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002de6:	23fa      	movs	r3, #250	@ 0xfa
 8002de8:	01db      	lsls	r3, r3, #7
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e001      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002df2:	687b      	ldr	r3, [r7, #4]
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	02dc6c00 	.word	0x02dc6c00
 8002e04:	007a1200 	.word	0x007a1200

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e10:	2313      	movs	r3, #19
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e18:	2312      	movs	r3, #18
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e2c:	e079      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2011      	movs	r0, #17
 8002e30:	183b      	adds	r3, r7, r0
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	055b      	lsls	r3, r3, #21
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d110      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e46:	4b60      	ldr	r3, [pc, #384]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	0549      	lsls	r1, r1, #21
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e50:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	055b      	lsls	r3, r3, #21
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002e64:	4b58      	ldr	r3, [pc, #352]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e68:	23c0      	movs	r3, #192	@ 0xc0
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d014      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002e80:	4b51      	ldr	r3, [pc, #324]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	4a51      	ldr	r2, [pc, #324]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e90:	2180      	movs	r1, #128	@ 0x80
 8002e92:	0249      	lsls	r1, r1, #9
 8002e94:	430a      	orrs	r2, r1
 8002e96:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e98:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9e:	494c      	ldr	r1, [pc, #304]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002ea4:	4b48      	ldr	r3, [pc, #288]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe f841 	bl	8000f38 <HAL_GetTick>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eba:	e00c      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe f83c 	bl	8000f38 <HAL_GetTick>
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4a43      	ldr	r2, [pc, #268]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d904      	bls.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002ecc:	2313      	movs	r3, #19
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	701a      	strb	r2, [r3, #0]
          break;
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	2202      	movs	r2, #2
 8002edc:	4013      	ands	r3, r2
 8002ede:	d0ed      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002ee0:	2313      	movs	r3, #19
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	4b33      	ldr	r3, [pc, #204]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002efe:	e005      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	2312      	movs	r3, #18
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2213      	movs	r2, #19
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f0c:	2311      	movs	r3, #17
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f1c:	492e      	ldr	r1, [pc, #184]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2201      	movs	r2, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2c:	4b26      	ldr	r3, [pc, #152]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	2203      	movs	r2, #3
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2240      	movs	r2, #64	@ 0x40
 8002f46:	4013      	ands	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	01db      	lsls	r3, r3, #7
 8002f66:	4013      	ands	r3, r2
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f6a:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	0899      	lsrs	r1, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4013      	ands	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da09      	bge.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	22e0      	movs	r2, #224	@ 0xe0
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002fb8:	2312      	movs	r3, #18
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781b      	ldrb	r3, [r3, #0]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b006      	add	sp, #24
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	fffffcff 	.word	0xfffffcff
 8002fd0:	fffeffff 	.word	0xfffeffff
 8002fd4:	00001388 	.word	0x00001388
 8002fd8:	efffffff 	.word	0xefffffff
 8002fdc:	ffffcfff 	.word	0xffffcfff
 8002fe0:	ffff3fff 	.word	0xffff3fff

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e04a      	b.n	800308c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223d      	movs	r2, #61	@ 0x3d
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223c      	movs	r2, #60	@ 0x3c
 8003006:	2100      	movs	r1, #0
 8003008:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd fd07 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223d      	movs	r2, #61	@ 0x3d
 8003016:	2102      	movs	r1, #2
 8003018:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f000 ff37 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2248      	movs	r2, #72	@ 0x48
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	223e      	movs	r2, #62	@ 0x3e
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223f      	movs	r2, #63	@ 0x3f
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2240      	movs	r2, #64	@ 0x40
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2241      	movs	r2, #65	@ 0x41
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2242      	movs	r2, #66	@ 0x42
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2243      	movs	r2, #67	@ 0x43
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2244      	movs	r2, #68	@ 0x44
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2245      	movs	r2, #69	@ 0x45
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2246      	movs	r2, #70	@ 0x46
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2247      	movs	r2, #71	@ 0x47
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	223d      	movs	r2, #61	@ 0x3d
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	223d      	movs	r2, #61	@ 0x3d
 80030a0:	2102      	movs	r1, #2
 80030a2:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a27      	ldr	r2, [pc, #156]	@ (8003148 <HAL_TIM_Base_DeInit+0xb4>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	d10d      	bne.n	80030cc <HAL_TIM_Base_DeInit+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a25      	ldr	r2, [pc, #148]	@ (800314c <HAL_TIM_Base_DeInit+0xb8>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_Base_DeInit+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	438a      	bics	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fd fd3a 	bl	8000b48 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2248      	movs	r2, #72	@ 0x48
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	223e      	movs	r2, #62	@ 0x3e
 80030e0:	2100      	movs	r1, #0
 80030e2:	5499      	strb	r1, [r3, r2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	223f      	movs	r2, #63	@ 0x3f
 80030e8:	2100      	movs	r1, #0
 80030ea:	5499      	strb	r1, [r3, r2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2241      	movs	r2, #65	@ 0x41
 80030f8:	2100      	movs	r1, #0
 80030fa:	5499      	strb	r1, [r3, r2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2242      	movs	r2, #66	@ 0x42
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2243      	movs	r2, #67	@ 0x43
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2244      	movs	r2, #68	@ 0x44
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2245      	movs	r2, #69	@ 0x45
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2246      	movs	r2, #70	@ 0x46
 8003120:	2100      	movs	r1, #0
 8003122:	5499      	strb	r1, [r3, r2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2247      	movs	r2, #71	@ 0x47
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	223d      	movs	r2, #61	@ 0x3d
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	223c      	movs	r2, #60	@ 0x3c
 8003138:	2100      	movs	r1, #0
 800313a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	00001111 	.word	0x00001111
 800314c:	00000444 	.word	0x00000444

08003150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	223d      	movs	r2, #61	@ 0x3d
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e02f      	b.n	80031c8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223d      	movs	r2, #61	@ 0x3d
 800316c:	2102      	movs	r1, #2
 800316e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a16      	ldr	r2, [pc, #88]	@ (80031d0 <HAL_TIM_Base_Start+0x80>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIM_Base_Start+0x34>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <HAL_TIM_Base_Start+0x84>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d116      	bne.n	80031b2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a13      	ldr	r2, [pc, #76]	@ (80031d8 <HAL_TIM_Base_Start+0x88>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d016      	beq.n	80031c4 <HAL_TIM_Base_Start+0x74>
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	025b      	lsls	r3, r3, #9
 800319c:	429a      	cmp	r2, r3
 800319e:	d011      	beq.n	80031c4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b0:	e008      	b.n	80031c4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e000      	b.n	80031c6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b004      	add	sp, #16
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	00010007 	.word	0x00010007

080031dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <HAL_TIM_Base_Stop+0x44>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	d10d      	bne.n	800320c <HAL_TIM_Base_Stop+0x30>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <HAL_TIM_Base_Stop+0x48>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	d107      	bne.n	800320c <HAL_TIM_Base_Stop+0x30>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	438a      	bics	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	223d      	movs	r2, #61	@ 0x3d
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	00001111 	.word	0x00001111
 8003224:	00000444 	.word	0x00000444

08003228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	223d      	movs	r2, #61	@ 0x3d
 8003234:	5c9b      	ldrb	r3, [r3, r2]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e037      	b.n	80032b0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	223d      	movs	r2, #61	@ 0x3d
 8003244:	2102      	movs	r1, #2
 8003246:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <HAL_TIM_Base_Start_IT+0x90>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x44>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <HAL_TIM_Base_Start_IT+0x94>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d116      	bne.n	800329a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a13      	ldr	r2, [pc, #76]	@ (80032c0 <HAL_TIM_Base_Start_IT+0x98>)
 8003274:	4013      	ands	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b06      	cmp	r3, #6
 800327c:	d016      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x84>
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	2380      	movs	r3, #128	@ 0x80
 8003282:	025b      	lsls	r3, r3, #9
 8003284:	429a      	cmp	r2, r3
 8003286:	d011      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	e008      	b.n	80032ac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e000      	b.n	80032ae <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b004      	add	sp, #16
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	00010007 	.word	0x00010007

080032c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e04a      	b.n	800336c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223d      	movs	r2, #61	@ 0x3d
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	223c      	movs	r2, #60	@ 0x3c
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 f89f 	bl	8003430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223d      	movs	r2, #61	@ 0x3d
 80032f6:	2102      	movs	r1, #2
 80032f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	0019      	movs	r1, r3
 8003304:	0010      	movs	r0, r2
 8003306:	f000 fdc7 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2248      	movs	r2, #72	@ 0x48
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223e      	movs	r2, #62	@ 0x3e
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223f      	movs	r2, #63	@ 0x3f
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2241      	movs	r2, #65	@ 0x41
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2242      	movs	r2, #66	@ 0x42
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2243      	movs	r2, #67	@ 0x43
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2244      	movs	r2, #68	@ 0x44
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2245      	movs	r2, #69	@ 0x45
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2246      	movs	r2, #70	@ 0x46
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2247      	movs	r2, #71	@ 0x47
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223d      	movs	r2, #61	@ 0x3d
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223d      	movs	r2, #61	@ 0x3d
 8003380:	2102      	movs	r1, #2
 8003382:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a27      	ldr	r2, [pc, #156]	@ (8003428 <HAL_TIM_PWM_DeInit+0xb4>)
 800338c:	4013      	ands	r3, r2
 800338e:	d10d      	bne.n	80033ac <HAL_TIM_PWM_DeInit+0x38>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a25      	ldr	r2, [pc, #148]	@ (800342c <HAL_TIM_PWM_DeInit+0xb8>)
 8003398:	4013      	ands	r3, r2
 800339a:	d107      	bne.n	80033ac <HAL_TIM_PWM_DeInit+0x38>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f846 	bl	8003440 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2248      	movs	r2, #72	@ 0x48
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	223e      	movs	r2, #62	@ 0x3e
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223f      	movs	r2, #63	@ 0x3f
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2241      	movs	r2, #65	@ 0x41
 80033d8:	2100      	movs	r1, #0
 80033da:	5499      	strb	r1, [r3, r2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2242      	movs	r2, #66	@ 0x42
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2243      	movs	r2, #67	@ 0x43
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2244      	movs	r2, #68	@ 0x44
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2245      	movs	r2, #69	@ 0x45
 80033f8:	2100      	movs	r1, #0
 80033fa:	5499      	strb	r1, [r3, r2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2246      	movs	r2, #70	@ 0x46
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2247      	movs	r2, #71	@ 0x47
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	223d      	movs	r2, #61	@ 0x3d
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	223c      	movs	r2, #60	@ 0x3c
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	00001111 	.word	0x00001111
 800342c:	00000444 	.word	0x00000444

08003430 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003438:	46c0      	nop			@ (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <HAL_TIM_PWM_Start+0x22>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	223e      	movs	r2, #62	@ 0x3e
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	4193      	sbcs	r3, r2
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e037      	b.n	80034e2 <HAL_TIM_PWM_Start+0x92>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d108      	bne.n	800348a <HAL_TIM_PWM_Start+0x3a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	223f      	movs	r2, #63	@ 0x3f
 800347c:	5c9b      	ldrb	r3, [r3, r2]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	4193      	sbcs	r3, r2
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e02b      	b.n	80034e2 <HAL_TIM_PWM_Start+0x92>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d108      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x52>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2240      	movs	r2, #64	@ 0x40
 8003494:	5c9b      	ldrb	r3, [r3, r2]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	1e5a      	subs	r2, r3, #1
 800349c:	4193      	sbcs	r3, r2
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	e01f      	b.n	80034e2 <HAL_TIM_PWM_Start+0x92>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d108      	bne.n	80034ba <HAL_TIM_PWM_Start+0x6a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2241      	movs	r2, #65	@ 0x41
 80034ac:	5c9b      	ldrb	r3, [r3, r2]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	4193      	sbcs	r3, r2
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	e013      	b.n	80034e2 <HAL_TIM_PWM_Start+0x92>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d108      	bne.n	80034d2 <HAL_TIM_PWM_Start+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2242      	movs	r2, #66	@ 0x42
 80034c4:	5c9b      	ldrb	r3, [r3, r2]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	4193      	sbcs	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e007      	b.n	80034e2 <HAL_TIM_PWM_Start+0x92>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2243      	movs	r2, #67	@ 0x43
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	4193      	sbcs	r3, r2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e07b      	b.n	80035e2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0xaa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223e      	movs	r2, #62	@ 0x3e
 80034f4:	2102      	movs	r1, #2
 80034f6:	5499      	strb	r1, [r3, r2]
 80034f8:	e023      	b.n	8003542 <HAL_TIM_PWM_Start+0xf2>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xba>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223f      	movs	r2, #63	@ 0x3f
 8003504:	2102      	movs	r1, #2
 8003506:	5499      	strb	r1, [r3, r2]
 8003508:	e01b      	b.n	8003542 <HAL_TIM_PWM_Start+0xf2>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0xca>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	2102      	movs	r1, #2
 8003516:	5499      	strb	r1, [r3, r2]
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start+0xf2>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xda>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2241      	movs	r2, #65	@ 0x41
 8003524:	2102      	movs	r1, #2
 8003526:	5499      	strb	r1, [r3, r2]
 8003528:	e00b      	b.n	8003542 <HAL_TIM_PWM_Start+0xf2>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b10      	cmp	r3, #16
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xea>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2242      	movs	r2, #66	@ 0x42
 8003534:	2102      	movs	r1, #2
 8003536:	5499      	strb	r1, [r3, r2]
 8003538:	e003      	b.n	8003542 <HAL_TIM_PWM_Start+0xf2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2243      	movs	r2, #67	@ 0x43
 800353e:	2102      	movs	r1, #2
 8003540:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	2201      	movs	r2, #1
 800354a:	0018      	movs	r0, r3
 800354c:	f001 f848 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a25      	ldr	r2, [pc, #148]	@ (80035ec <HAL_TIM_PWM_Start+0x19c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_TIM_PWM_Start+0x11e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	@ (80035f0 <HAL_TIM_PWM_Start+0x1a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIM_PWM_Start+0x11e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <HAL_TIM_PWM_Start+0x1a4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_Start+0x122>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_TIM_PWM_Start+0x124>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2180      	movs	r1, #128	@ 0x80
 8003584:	0209      	lsls	r1, r1, #8
 8003586:	430a      	orrs	r2, r1
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_TIM_PWM_Start+0x19c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_TIM_PWM_Start+0x14e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <HAL_TIM_PWM_Start+0x1a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d116      	bne.n	80035cc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <HAL_TIM_PWM_Start+0x1ac>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d016      	beq.n	80035de <HAL_TIM_PWM_Start+0x18e>
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d011      	beq.n	80035de <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	e008      	b.n	80035de <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2101      	movs	r1, #1
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e000      	b.n	80035e0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	40000400 	.word	0x40000400
 80035fc:	00010007 	.word	0x00010007

08003600 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	0018      	movs	r0, r3
 8003614:	f000 ffe4 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a35      	ldr	r2, [pc, #212]	@ (80036f4 <HAL_TIM_PWM_Stop+0xf4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_TIM_PWM_Stop+0x36>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a34      	ldr	r2, [pc, #208]	@ (80036f8 <HAL_TIM_PWM_Stop+0xf8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_TIM_PWM_Stop+0x36>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a32      	ldr	r2, [pc, #200]	@ (80036fc <HAL_TIM_PWM_Stop+0xfc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_TIM_PWM_Stop+0x3a>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_TIM_PWM_Stop+0x3c>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a2e      	ldr	r2, [pc, #184]	@ (8003700 <HAL_TIM_PWM_Stop+0x100>)
 8003648:	4013      	ands	r3, r2
 800364a:	d10d      	bne.n	8003668 <HAL_TIM_PWM_Stop+0x68>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a2c      	ldr	r2, [pc, #176]	@ (8003704 <HAL_TIM_PWM_Stop+0x104>)
 8003654:	4013      	ands	r3, r2
 8003656:	d107      	bne.n	8003668 <HAL_TIM_PWM_Stop+0x68>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4929      	ldr	r1, [pc, #164]	@ (8003708 <HAL_TIM_PWM_Stop+0x108>)
 8003664:	400a      	ands	r2, r1
 8003666:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a24      	ldr	r2, [pc, #144]	@ (8003700 <HAL_TIM_PWM_Stop+0x100>)
 8003670:	4013      	ands	r3, r2
 8003672:	d10d      	bne.n	8003690 <HAL_TIM_PWM_Stop+0x90>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_TIM_PWM_Stop+0x104>)
 800367c:	4013      	ands	r3, r2
 800367e:	d107      	bne.n	8003690 <HAL_TIM_PWM_Stop+0x90>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d104      	bne.n	80036a0 <HAL_TIM_PWM_Stop+0xa0>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	223e      	movs	r2, #62	@ 0x3e
 800369a:	2101      	movs	r1, #1
 800369c:	5499      	strb	r1, [r3, r2]
 800369e:	e023      	b.n	80036e8 <HAL_TIM_PWM_Stop+0xe8>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d104      	bne.n	80036b0 <HAL_TIM_PWM_Stop+0xb0>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223f      	movs	r2, #63	@ 0x3f
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	e01b      	b.n	80036e8 <HAL_TIM_PWM_Stop+0xe8>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d104      	bne.n	80036c0 <HAL_TIM_PWM_Stop+0xc0>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
 80036be:	e013      	b.n	80036e8 <HAL_TIM_PWM_Stop+0xe8>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d104      	bne.n	80036d0 <HAL_TIM_PWM_Stop+0xd0>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2241      	movs	r2, #65	@ 0x41
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	e00b      	b.n	80036e8 <HAL_TIM_PWM_Stop+0xe8>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d104      	bne.n	80036e0 <HAL_TIM_PWM_Stop+0xe0>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2242      	movs	r2, #66	@ 0x42
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	e003      	b.n	80036e8 <HAL_TIM_PWM_Stop+0xe8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2243      	movs	r2, #67	@ 0x43
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800
 8003700:	00001111 	.word	0x00001111
 8003704:	00000444 	.word	0x00000444
 8003708:	ffff7fff 	.word	0xffff7fff

0800370c <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	@ 0x3d
 8003718:	2102      	movs	r1, #2
 800371a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a1b      	ldr	r2, [pc, #108]	@ (8003790 <HAL_TIM_OnePulse_DeInit+0x84>)
 8003724:	4013      	ands	r3, r2
 8003726:	d10d      	bne.n	8003744 <HAL_TIM_OnePulse_DeInit+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a19      	ldr	r2, [pc, #100]	@ (8003794 <HAL_TIM_OnePulse_DeInit+0x88>)
 8003730:	4013      	ands	r3, r2
 8003732:	d107      	bne.n	8003744 <HAL_TIM_OnePulse_DeInit+0x38>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2101      	movs	r1, #1
 8003740:	438a      	bics	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f826 	bl	8003798 <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2248      	movs	r2, #72	@ 0x48
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	223e      	movs	r2, #62	@ 0x3e
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223f      	movs	r2, #63	@ 0x3f
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2244      	movs	r2, #68	@ 0x44
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2245      	movs	r2, #69	@ 0x45
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	223d      	movs	r2, #61	@ 0x3d
 8003778:	2100      	movs	r1, #0
 800377a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223c      	movs	r2, #60	@ 0x3c
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	00001111 	.word	0x00001111
 8003794:	00000444 	.word	0x00000444

08003798 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2102      	movs	r1, #2
 80037be:	438a      	bics	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2104      	movs	r1, #4
 80037ce:	438a      	bics	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 ff00 	bl	80045e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2104      	movs	r1, #4
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fef9 	bl	80045e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <HAL_TIM_OnePulse_Stop_IT+0xe8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_TIM_OnePulse_Stop_IT+0x64>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a25      	ldr	r2, [pc, #148]	@ (8003894 <HAL_TIM_OnePulse_Stop_IT+0xec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIM_OnePulse_Stop_IT+0x64>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <HAL_TIM_OnePulse_Stop_IT+0x68>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_TIM_OnePulse_Stop_IT+0x6a>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d013      	beq.n	800383e <HAL_TIM_OnePulse_Stop_IT+0x96>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a1f      	ldr	r2, [pc, #124]	@ (800389c <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 800381e:	4013      	ands	r3, r2
 8003820:	d10d      	bne.n	800383e <HAL_TIM_OnePulse_Stop_IT+0x96>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <HAL_TIM_OnePulse_Stop_IT+0xf8>)
 800382a:	4013      	ands	r3, r2
 800382c:	d107      	bne.n	800383e <HAL_TIM_OnePulse_Stop_IT+0x96>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	491a      	ldr	r1, [pc, #104]	@ (80038a4 <HAL_TIM_OnePulse_Stop_IT+0xfc>)
 800383a:	400a      	ands	r2, r1
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 8003846:	4013      	ands	r3, r2
 8003848:	d10d      	bne.n	8003866 <HAL_TIM_OnePulse_Stop_IT+0xbe>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <HAL_TIM_OnePulse_Stop_IT+0xf8>)
 8003852:	4013      	ands	r3, r2
 8003854:	d107      	bne.n	8003866 <HAL_TIM_OnePulse_Stop_IT+0xbe>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	438a      	bics	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223e      	movs	r2, #62	@ 0x3e
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223f      	movs	r2, #63	@ 0x3f
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2244      	movs	r2, #68	@ 0x44
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2245      	movs	r2, #69	@ 0x45
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b002      	add	sp, #8
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800
 800389c:	00001111 	.word	0x00001111
 80038a0:	00000444 	.word	0x00000444
 80038a4:	ffff7fff 	.word	0xffff7fff

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2202      	movs	r2, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d021      	beq.n	800390c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	4013      	ands	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2203      	movs	r2, #3
 80038d6:	4252      	negs	r2, r2
 80038d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2203      	movs	r2, #3
 80038e8:	4013      	ands	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 faba 	bl	8003e68 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e007      	b.n	8003906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 faad 	bl	8003e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f000 fab9 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2204      	movs	r2, #4
 8003918:	4013      	ands	r3, r2
 800391a:	d01e      	beq.n	800395a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2205      	movs	r2, #5
 8003922:	4252      	negs	r2, r2
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	23c0      	movs	r3, #192	@ 0xc0
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4013      	ands	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 fa93 	bl	8003e68 <HAL_TIM_IC_CaptureCallback>
 8003942:	e007      	b.n	8003954 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fa86 	bl	8003e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fa92 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2208      	movs	r2, #8
 800395e:	4013      	ands	r3, r2
 8003960:	d021      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2208      	movs	r2, #8
 8003966:	4013      	ands	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2209      	movs	r2, #9
 8003970:	4252      	negs	r2, r2
 8003972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2204      	movs	r2, #4
 8003978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2203      	movs	r2, #3
 8003982:	4013      	ands	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 fa6d 	bl	8003e68 <HAL_TIM_IC_CaptureCallback>
 800398e:	e007      	b.n	80039a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fa60 	bl	8003e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fa6c 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2210      	movs	r2, #16
 80039aa:	4013      	ands	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2210      	movs	r2, #16
 80039b2:	4013      	ands	r3, r2
 80039b4:	d01e      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2211      	movs	r2, #17
 80039bc:	4252      	negs	r2, r2
 80039be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2208      	movs	r2, #8
 80039c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	23c0      	movs	r3, #192	@ 0xc0
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4013      	ands	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 fa46 	bl	8003e68 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e007      	b.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fa39 	bl	8003e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fa45 	bl	8003e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2201      	movs	r2, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00c      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	4013      	ands	r3, r2
 8003a02:	d008      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	4252      	negs	r2, r2
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fd f8d3 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2280      	movs	r2, #128	@ 0x80
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00c      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2280      	movs	r2, #128	@ 0x80
 8003a22:	4013      	ands	r3, r2
 8003a24:	d008      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2281      	movs	r2, #129	@ 0x81
 8003a2c:	4252      	negs	r2, r2
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 ff08 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	4013      	ands	r3, r2
 8003a48:	d007      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <HAL_TIM_IRQHandler+0x200>)
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 feff 	bl	8004858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2240      	movs	r2, #64	@ 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d00c      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	4013      	ands	r3, r2
 8003a68:	d008      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2241      	movs	r2, #65	@ 0x41
 8003a70:	4252      	negs	r2, r2
 8003a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fa06 	bl	8003e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d008      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2221      	movs	r2, #33	@ 0x21
 8003a92:	4252      	negs	r2, r2
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fecd 	bl	8004838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	fffffeff 	.word	0xfffffeff

08003aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2317      	movs	r3, #23
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	223c      	movs	r2, #60	@ 0x3c
 8003ac4:	5c9b      	ldrb	r3, [r3, r2]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x22>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e0e5      	b.n	8003c9a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	223c      	movs	r2, #60	@ 0x3c
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b14      	cmp	r3, #20
 8003ada:	d900      	bls.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x32>
 8003adc:	e0d1      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	009a      	lsls	r2, r3, #2
 8003ae2:	4b70      	ldr	r3, [pc, #448]	@ (8003ca4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fa3c 	bl	8003f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2108      	movs	r1, #8
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2104      	movs	r1, #4
 8003b14:	438a      	bics	r2, r1
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
      break;
 8003b2a:	e0af      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 fa9b 	bl	8004070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	0109      	lsls	r1, r1, #4
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4954      	ldr	r1, [pc, #336]	@ (8003ca8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6999      	ldr	r1, [r3, #24]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	619a      	str	r2, [r3, #24]
      break;
 8003b70:	e08c      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 faf6 	bl	800416c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2108      	movs	r1, #8
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69d9      	ldr	r1, [r3, #28]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	61da      	str	r2, [r3, #28]
      break;
 8003bb2:	e06b      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	0011      	movs	r1, r2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 fb57 	bl	8004270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	0109      	lsls	r1, r1, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4932      	ldr	r1, [pc, #200]	@ (8003ca8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69d9      	ldr	r1, [r3, #28]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e048      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 fb98 	bl	8004338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2108      	movs	r1, #8
 8003c14:	430a      	orrs	r2, r1
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2104      	movs	r1, #4
 8003c24:	438a      	bics	r2, r1
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c3a:	e027      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f000 fbd1 	bl	80043ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	0109      	lsls	r1, r1, #4
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4910      	ldr	r1, [pc, #64]	@ (8003ca8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c80:	e004      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003c82:	2317      	movs	r3, #23
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      break;
 8003c8a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	223c      	movs	r2, #60	@ 0x3c
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

  return status;
 8003c94:	2317      	movs	r3, #23
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b006      	add	sp, #24
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	08004918 	.word	0x08004918
 8003ca8:	fffffbff 	.word	0xfffffbff

08003cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	230f      	movs	r3, #15
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	223c      	movs	r2, #60	@ 0x3c
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_ConfigClockSource+0x20>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0bc      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x19a>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	223c      	movs	r2, #60	@ 0x3c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	223d      	movs	r2, #61	@ 0x3d
 8003cd8:	2102      	movs	r1, #2
 8003cda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e50 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a59      	ldr	r2, [pc, #356]	@ (8003e54 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2280      	movs	r2, #128	@ 0x80
 8003d02:	0192      	lsls	r2, r2, #6
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xde>
 8003d08:	2280      	movs	r2, #128	@ 0x80
 8003d0a:	0192      	lsls	r2, r2, #6
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d900      	bls.n	8003d12 <HAL_TIM_ConfigClockSource+0x66>
 8003d10:	e088      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d12:	2280      	movs	r2, #128	@ 0x80
 8003d14:	0152      	lsls	r2, r2, #5
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d100      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x70>
 8003d1a:	e088      	b.n	8003e2e <HAL_TIM_ConfigClockSource+0x182>
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	0152      	lsls	r2, r2, #5
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d900      	bls.n	8003d26 <HAL_TIM_ConfigClockSource+0x7a>
 8003d24:	e07e      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d26:	2b70      	cmp	r3, #112	@ 0x70
 8003d28:	d018      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xb0>
 8003d2a:	d900      	bls.n	8003d2e <HAL_TIM_ConfigClockSource+0x82>
 8003d2c:	e07a      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d2e:	2b60      	cmp	r3, #96	@ 0x60
 8003d30:	d04f      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x126>
 8003d32:	d900      	bls.n	8003d36 <HAL_TIM_ConfigClockSource+0x8a>
 8003d34:	e076      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d36:	2b50      	cmp	r3, #80	@ 0x50
 8003d38:	d03b      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x106>
 8003d3a:	d900      	bls.n	8003d3e <HAL_TIM_ConfigClockSource+0x92>
 8003d3c:	e072      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d3e:	2b40      	cmp	r3, #64	@ 0x40
 8003d40:	d057      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0x146>
 8003d42:	d900      	bls.n	8003d46 <HAL_TIM_ConfigClockSource+0x9a>
 8003d44:	e06e      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d46:	2b30      	cmp	r3, #48	@ 0x30
 8003d48:	d063      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x166>
 8003d4a:	d86b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d060      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x166>
 8003d50:	d868      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05d      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x166>
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d05b      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x166>
 8003d5a:	e063      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	f000 fc18 	bl	80045a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2277      	movs	r2, #119	@ 0x77
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e052      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d9a:	f000 fc01 	bl	80045a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2180      	movs	r1, #128	@ 0x80
 8003daa:	01c9      	lsls	r1, r1, #7
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
      break;
 8003db0:	e03e      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	f000 fb72 	bl	80044a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2150      	movs	r1, #80	@ 0x50
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 fbcc 	bl	8004568 <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e02e      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dde:	001a      	movs	r2, r3
 8003de0:	f000 fb90 	bl	8004504 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2160      	movs	r1, #96	@ 0x60
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 fbbc 	bl	8004568 <TIM_ITRx_SetConfig>
      break;
 8003df0:	e01e      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	001a      	movs	r2, r3
 8003e00:	f000 fb52 	bl	80044a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2140      	movs	r1, #64	@ 0x40
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fbac 	bl	8004568 <TIM_ITRx_SetConfig>
      break;
 8003e10:	e00e      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	f000 fba3 	bl	8004568 <TIM_ITRx_SetConfig>
      break;
 8003e22:	e005      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e24:	230f      	movs	r3, #15
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
      break;
 8003e2c:	e000      	b.n	8003e30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e2e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	223d      	movs	r2, #61	@ 0x3d
 8003e34:	2101      	movs	r1, #1
 8003e36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	223c      	movs	r2, #60	@ 0x3c
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e40:	230f      	movs	r3, #15
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	ffceff88 	.word	0xffceff88
 8003e54:	ffff00ff 	.word	0xffff00ff

08003e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b002      	add	sp, #8
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b002      	add	sp, #8
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e90:	46c0      	nop			@ (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8003f58 <TIM_Base_SetConfig+0xc0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x20>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f5c <TIM_Base_SetConfig+0xc4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2270      	movs	r2, #112	@ 0x70
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	@ (8003f58 <TIM_Base_SetConfig+0xc0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x5a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <TIM_Base_SetConfig+0xc4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x5a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a20      	ldr	r2, [pc, #128]	@ (8003f60 <TIM_Base_SetConfig+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x5a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <TIM_Base_SetConfig+0xcc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x5a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f6c <TIM_Base_SetConfig+0xd4>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2280      	movs	r2, #128	@ 0x80
 8003f08:	4393      	bics	r3, r2
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <TIM_Base_SetConfig+0xc0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xaa>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a0b      	ldr	r2, [pc, #44]	@ (8003f64 <TIM_Base_SetConfig+0xcc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d103      	bne.n	8003f4a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b004      	add	sp, #16
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40002000 	.word	0x40002000
 8003f64:	40014400 	.word	0x40014400
 8003f68:	40014800 	.word	0x40014800
 8003f6c:	fffffcff 	.word	0xfffffcff

08003f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	2201      	movs	r2, #1
 8003f86:	4393      	bics	r3, r2
 8003f88:	001a      	movs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004058 <TIM_OC1_SetConfig+0xe8>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4393      	bics	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	@ (800405c <TIM_OC1_SetConfig+0xec>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_OC1_SetConfig+0x6e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <TIM_OC1_SetConfig+0xf0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_OC1_SetConfig+0x6e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <TIM_OC1_SetConfig+0xf4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4393      	bics	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	@ (800405c <TIM_OC1_SetConfig+0xec>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_OC1_SetConfig+0xa0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <TIM_OC1_SetConfig+0xf0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC1_SetConfig+0xa0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <TIM_OC1_SetConfig+0xf4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d111      	bne.n	8004034 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <TIM_OC1_SetConfig+0xf8>)
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4a14      	ldr	r2, [pc, #80]	@ (800406c <TIM_OC1_SetConfig+0xfc>)
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b006      	add	sp, #24
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	fffeff8f 	.word	0xfffeff8f
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800
 8004068:	fffffeff 	.word	0xfffffeff
 800406c:	fffffdff 	.word	0xfffffdff

08004070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	2210      	movs	r2, #16
 8004086:	4393      	bics	r3, r2
 8004088:	001a      	movs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <TIM_OC2_SetConfig+0xe0>)
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <TIM_OC2_SetConfig+0xe4>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2220      	movs	r2, #32
 80040ba:	4393      	bics	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <TIM_OC2_SetConfig+0xe8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10d      	bne.n	80040ee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2280      	movs	r2, #128	@ 0x80
 80040d6:	4393      	bics	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2240      	movs	r2, #64	@ 0x40
 80040ea:	4393      	bics	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <TIM_OC2_SetConfig+0xe8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_OC2_SetConfig+0x96>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a18      	ldr	r2, [pc, #96]	@ (800415c <TIM_OC2_SetConfig+0xec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_OC2_SetConfig+0x96>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a17      	ldr	r2, [pc, #92]	@ (8004160 <TIM_OC2_SetConfig+0xf0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d113      	bne.n	800412e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4a16      	ldr	r2, [pc, #88]	@ (8004164 <TIM_OC2_SetConfig+0xf4>)
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a15      	ldr	r2, [pc, #84]	@ (8004168 <TIM_OC2_SetConfig+0xf8>)
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b006      	add	sp, #24
 800414e:	bd80      	pop	{r7, pc}
 8004150:	feff8fff 	.word	0xfeff8fff
 8004154:	fffffcff 	.word	0xfffffcff
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800
 8004164:	fffffbff 	.word	0xfffffbff
 8004168:	fffff7ff 	.word	0xfffff7ff

0800416c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a31      	ldr	r2, [pc, #196]	@ (8004248 <TIM_OC3_SetConfig+0xdc>)
 8004182:	401a      	ands	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a2d      	ldr	r2, [pc, #180]	@ (800424c <TIM_OC3_SetConfig+0xe0>)
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2203      	movs	r2, #3
 80041a0:	4393      	bics	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4a27      	ldr	r2, [pc, #156]	@ (8004250 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a23      	ldr	r2, [pc, #140]	@ (8004254 <TIM_OC3_SetConfig+0xe8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10d      	bne.n	80041e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4a22      	ldr	r2, [pc, #136]	@ (8004258 <TIM_OC3_SetConfig+0xec>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <TIM_OC3_SetConfig+0xf0>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <TIM_OC3_SetConfig+0xe8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC3_SetConfig+0x92>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004260 <TIM_OC3_SetConfig+0xf4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC3_SetConfig+0x92>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <TIM_OC3_SetConfig+0xf8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <TIM_OC3_SetConfig+0xfc>)
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4a18      	ldr	r2, [pc, #96]	@ (800426c <TIM_OC3_SetConfig+0x100>)
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b006      	add	sp, #24
 8004246:	bd80      	pop	{r7, pc}
 8004248:	fffffeff 	.word	0xfffffeff
 800424c:	fffeff8f 	.word	0xfffeff8f
 8004250:	fffffdff 	.word	0xfffffdff
 8004254:	40012c00 	.word	0x40012c00
 8004258:	fffff7ff 	.word	0xfffff7ff
 800425c:	fffffbff 	.word	0xfffffbff
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800
 8004268:	ffffefff 	.word	0xffffefff
 800426c:	ffffdfff 	.word	0xffffdfff

08004270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4a24      	ldr	r2, [pc, #144]	@ (8004318 <TIM_OC4_SetConfig+0xa8>)
 8004286:	401a      	ands	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a20      	ldr	r2, [pc, #128]	@ (800431c <TIM_OC4_SetConfig+0xac>)
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <TIM_OC4_SetConfig+0xb0>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <TIM_OC4_SetConfig+0xb4>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a17      	ldr	r2, [pc, #92]	@ (8004328 <TIM_OC4_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_OC4_SetConfig+0x70>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a16      	ldr	r2, [pc, #88]	@ (800432c <TIM_OC4_SetConfig+0xbc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC4_SetConfig+0x70>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <TIM_OC4_SetConfig+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <TIM_OC4_SetConfig+0xc4>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	ffffefff 	.word	0xffffefff
 800431c:	feff8fff 	.word	0xfeff8fff
 8004320:	fffffcff 	.word	0xfffffcff
 8004324:	ffffdfff 	.word	0xffffdfff
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014400 	.word	0x40014400
 8004330:	40014800 	.word	0x40014800
 8004334:	ffffbfff 	.word	0xffffbfff

08004338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <TIM_OC5_SetConfig+0x9c>)
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <TIM_OC5_SetConfig+0xa0>)
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <TIM_OC5_SetConfig+0xa4>)
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <TIM_OC5_SetConfig+0xa8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_OC5_SetConfig+0x66>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a14      	ldr	r2, [pc, #80]	@ (80043e4 <TIM_OC5_SetConfig+0xac>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_OC5_SetConfig+0x66>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a13      	ldr	r2, [pc, #76]	@ (80043e8 <TIM_OC5_SetConfig+0xb0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d109      	bne.n	80043b2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4a0c      	ldr	r2, [pc, #48]	@ (80043d4 <TIM_OC5_SetConfig+0x9c>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	fffeffff 	.word	0xfffeffff
 80043d8:	fffeff8f 	.word	0xfffeff8f
 80043dc:	fffdffff 	.word	0xfffdffff
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800

080043ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4a22      	ldr	r2, [pc, #136]	@ (800448c <TIM_OC6_SetConfig+0xa0>)
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a1e      	ldr	r2, [pc, #120]	@ (8004490 <TIM_OC6_SetConfig+0xa4>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4a1a      	ldr	r2, [pc, #104]	@ (8004494 <TIM_OC6_SetConfig+0xa8>)
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	051b      	lsls	r3, r3, #20
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	@ (8004498 <TIM_OC6_SetConfig+0xac>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_OC6_SetConfig+0x68>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a15      	ldr	r2, [pc, #84]	@ (800449c <TIM_OC6_SetConfig+0xb0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC6_SetConfig+0x68>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a14      	ldr	r2, [pc, #80]	@ (80044a0 <TIM_OC6_SetConfig+0xb4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d109      	bne.n	8004468 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <TIM_OC6_SetConfig+0xb8>)
 8004458:	4013      	ands	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	029b      	lsls	r3, r3, #10
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b006      	add	sp, #24
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	ffefffff 	.word	0xffefffff
 8004490:	feff8fff 	.word	0xfeff8fff
 8004494:	ffdfffff 	.word	0xffdfffff
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800
 80044a4:	fffbffff 	.word	0xfffbffff

080044a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	2201      	movs	r2, #1
 80044c0:	4393      	bics	r3, r2
 80044c2:	001a      	movs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	22f0      	movs	r2, #240	@ 0xf0
 80044d2:	4393      	bics	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	220a      	movs	r2, #10
 80044e4:	4393      	bics	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b006      	add	sp, #24
 8004502:	bd80      	pop	{r7, pc}

08004504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	2210      	movs	r2, #16
 800451c:	4393      	bics	r3, r2
 800451e:	001a      	movs	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <TIM_TI2_ConfigInputStage+0x60>)
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	22a0      	movs	r2, #160	@ 0xa0
 8004540:	4393      	bics	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	ffff0fff 	.word	0xffff0fff

08004568 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a08      	ldr	r2, [pc, #32]	@ (800459c <TIM_ITRx_SetConfig+0x34>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	2207      	movs	r2, #7
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	609a      	str	r2, [r3, #8]
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b004      	add	sp, #16
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	ffcfff8f 	.word	0xffcfff8f

080045a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <TIM_ETR_SetConfig+0x3c>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	021a      	lsls	r2, r3, #8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffff00ff 	.word	0xffff00ff

080045e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	221f      	movs	r2, #31
 80045f0:	4013      	ands	r3, r2
 80045f2:	2201      	movs	r2, #1
 80045f4:	409a      	lsls	r2, r3
 80045f6:	0013      	movs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	43d2      	mvns	r2, r2
 8004602:	401a      	ands	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	211f      	movs	r1, #31
 8004610:	400b      	ands	r3, r1
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4099      	lsls	r1, r3
 8004616:	000b      	movs	r3, r1
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b006      	add	sp, #24
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	223c      	movs	r2, #60	@ 0x3c
 8004636:	5c9b      	ldrb	r3, [r3, r2]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e04a      	b.n	80046d6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	223c      	movs	r2, #60	@ 0x3c
 8004644:	2101      	movs	r1, #1
 8004646:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	223d      	movs	r2, #61	@ 0x3d
 800464c:	2102      	movs	r1, #2
 800464e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800466e:	4013      	ands	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2270      	movs	r2, #112	@ 0x70
 8004680:	4393      	bics	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10c      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2280      	movs	r2, #128	@ 0x80
 80046ae:	4393      	bics	r3, r2
 80046b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	223d      	movs	r2, #61	@ 0x3d
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	223c      	movs	r2, #60	@ 0x3c
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b004      	add	sp, #16
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	ff0fffff 	.word	0xff0fffff
 80046e8:	40000400 	.word	0x40000400

080046ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	223c      	movs	r2, #60	@ 0x3c
 80046fe:	5c9b      	ldrb	r3, [r3, r2]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e079      	b.n	80047fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223c      	movs	r2, #60	@ 0x3c
 800470c:	2101      	movs	r1, #1
 800470e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	22ff      	movs	r2, #255	@ 0xff
 8004714:	4393      	bics	r3, r2
 8004716:	001a      	movs	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a38      	ldr	r2, [pc, #224]	@ (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004724:	401a      	ands	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004732:	401a      	ands	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a33      	ldr	r2, [pc, #204]	@ (800480c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004740:	401a      	ands	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a30      	ldr	r2, [pc, #192]	@ (8004810 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800474e:	401a      	ands	r2, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a2e      	ldr	r2, [pc, #184]	@ (8004814 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800475c:	401a      	ands	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a2b      	ldr	r2, [pc, #172]	@ (8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800476a:	401a      	ands	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a29      	ldr	r2, [pc, #164]	@ (800481c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004778:	401a      	ands	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a25      	ldr	r2, [pc, #148]	@ (8004820 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d106      	bne.n	800479c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a24      	ldr	r2, [pc, #144]	@ (8004824 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004792:	401a      	ands	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004820 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d121      	bne.n	80047ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80047aa:	401a      	ands	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	051b      	lsls	r3, r3, #20
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80047ba:	401a      	ands	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80047c8:	401a      	ands	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a12      	ldr	r2, [pc, #72]	@ (8004820 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d106      	bne.n	80047ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a15      	ldr	r2, [pc, #84]	@ (8004834 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80047e0:	401a      	ands	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	223c      	movs	r2, #60	@ 0x3c
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b004      	add	sp, #16
 8004802:	bd80      	pop	{r7, pc}
 8004804:	fffffcff 	.word	0xfffffcff
 8004808:	fffffbff 	.word	0xfffffbff
 800480c:	fffff7ff 	.word	0xfffff7ff
 8004810:	ffffefff 	.word	0xffffefff
 8004814:	ffffdfff 	.word	0xffffdfff
 8004818:	ffffbfff 	.word	0xffffbfff
 800481c:	fff0ffff 	.word	0xfff0ffff
 8004820:	40012c00 	.word	0x40012c00
 8004824:	efffffff 	.word	0xefffffff
 8004828:	ff0fffff 	.word	0xff0fffff
 800482c:	feffffff 	.word	0xfeffffff
 8004830:	fdffffff 	.word	0xfdffffff
 8004834:	dfffffff 	.word	0xdfffffff

08004838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b002      	add	sp, #8
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b002      	add	sp, #8
 8004866:	bd80      	pop	{r7, pc}

08004868 <memset>:
 8004868:	0003      	movs	r3, r0
 800486a:	1882      	adds	r2, r0, r2
 800486c:	4293      	cmp	r3, r2
 800486e:	d100      	bne.n	8004872 <memset+0xa>
 8004870:	4770      	bx	lr
 8004872:	7019      	strb	r1, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	e7f9      	b.n	800486c <memset+0x4>

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	2600      	movs	r6, #0
 800487c:	4c0c      	ldr	r4, [pc, #48]	@ (80048b0 <__libc_init_array+0x38>)
 800487e:	4d0d      	ldr	r5, [pc, #52]	@ (80048b4 <__libc_init_array+0x3c>)
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	2600      	movs	r6, #0
 800488a:	f000 f819 	bl	80048c0 <_init>
 800488e:	4c0a      	ldr	r4, [pc, #40]	@ (80048b8 <__libc_init_array+0x40>)
 8004890:	4d0a      	ldr	r5, [pc, #40]	@ (80048bc <__libc_init_array+0x44>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	00b3      	lsls	r3, r6, #2
 800489e:	58eb      	ldr	r3, [r5, r3]
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	00b3      	lsls	r3, r6, #2
 80048a8:	58eb      	ldr	r3, [r5, r3]
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	0800496c 	.word	0x0800496c
 80048b4:	0800496c 	.word	0x0800496c
 80048b8:	08004970 	.word	0x08004970
 80048bc:	0800496c 	.word	0x0800496c

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
